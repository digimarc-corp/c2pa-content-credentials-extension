{"version":3,"file":"HeftConfiguration.js","sourceRoot":"","sources":["../../src/configuration/HeftConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  Terminal,\n  ITerminalProvider,\n  IPackageJson,\n  PackageJsonLookup,\n  InternalError\n} from '@rushstack/node-core-library';\nimport { trueCasePathSync } from 'true-case-path';\nimport { RigConfig } from '@rushstack/rig-package';\n\nimport { Constants } from '../utilities/Constants';\n\n/**\n * @internal\n */\nexport interface IHeftConfigurationInitializationOptions {\n  /**\n   * The working directory the tool was executed in.\n   */\n  cwd: string;\n\n  /**\n   * Terminal instance to facilitate logging.\n   */\n  terminalProvider: ITerminalProvider;\n}\n\n/**\n * The base action configuration that all custom action configuration files\n * should inherit from.\n *\n * @public\n */\nexport interface IHeftActionConfiguration {}\n\n/**\n * Options to be used when retrieving the action configuration.\n *\n * @public\n */\nexport interface IHeftActionConfigurationOptions {\n  /**\n   * Whether or not arrays should be merged across Heft action configuration files.\n   */\n  mergeArrays?: boolean;\n}\n\n/**\n * @public\n */\nexport class HeftConfiguration {\n  private _buildFolder!: string;\n  private _projectHeftDataFolder: string | undefined;\n  private _projectConfigFolder: string | undefined;\n  private _buildCacheFolder: string | undefined;\n  private _rigConfig: RigConfig | undefined;\n  private _globalTerminal!: Terminal;\n  private _terminalProvider!: ITerminalProvider;\n\n  /**\n   * Project build folder. This is the folder containing the project's package.json file.\n   */\n  public get buildFolder(): string {\n    return this._buildFolder;\n  }\n\n  /**\n   * The path to the project's \".heft\" folder.\n   */\n  public get projectHeftDataFolder(): string {\n    if (!this._projectHeftDataFolder) {\n      this._projectHeftDataFolder = path.join(this.buildFolder, Constants.projectHeftFolderName);\n    }\n\n    return this._projectHeftDataFolder;\n  }\n\n  /**\n   * The path to the project's \"config\" folder.\n   */\n  public get projectConfigFolder(): string {\n    if (!this._projectConfigFolder) {\n      this._projectConfigFolder = path.join(this.buildFolder, Constants.projectConfigFolderName);\n    }\n\n    return this._projectConfigFolder;\n  }\n\n  /**\n   * The project's build cache folder.\n   *\n   * This folder exists at \\<project root\\>/.heft/build-cache. TypeScript's output\n   * goes into this folder and then is either copied or linked to the final output folder\n   */\n  public get buildCacheFolder(): string {\n    if (!this._buildCacheFolder) {\n      this._buildCacheFolder = path.join(this.projectHeftDataFolder, Constants.buildCacheFolderName);\n    }\n\n    return this._buildCacheFolder;\n  }\n\n  /**\n   * The rig.json configuration for this project, if present.\n   */\n  public get rigConfig(): RigConfig {\n    if (!this._rigConfig) {\n      throw new InternalError(\n        'The rigConfig cannot be accessed until HeftConfiguration.checkForRigAsync() has been called'\n      );\n    }\n    return this._rigConfig;\n  }\n\n  /**\n   * Terminal instance to facilitate logging.\n   */\n  public get globalTerminal(): Terminal {\n    return this._globalTerminal;\n  }\n\n  /**\n   * Terminal provider for the provided terminal.\n   */\n  public get terminalProvider(): ITerminalProvider {\n    return this._terminalProvider;\n  }\n\n  /**\n   * The Heft tool's package.json\n   */\n  public get heftPackageJson(): IPackageJson {\n    return PackageJsonLookup.instance.tryLoadPackageJsonFor(__dirname)!;\n  }\n\n  /**\n   * The package.json of the project being built\n   */\n  public get projectPackageJson(): IPackageJson {\n    return PackageJsonLookup.instance.tryLoadPackageJsonFor(this.buildFolder)!;\n  }\n\n  private constructor() {}\n\n  /**\n   * Performs the search for rig.json and initializes the `HeftConfiguration.rigConfig` object.\n   * @internal\n   */\n  public async _checkForRigAsync(): Promise<void> {\n    if (!this._rigConfig) {\n      this._rigConfig = await RigConfig.loadForProjectFolderAsync({ projectFolderPath: this._buildFolder });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public static initialize(options: IHeftConfigurationInitializationOptions): HeftConfiguration {\n    const configuration: HeftConfiguration = new HeftConfiguration();\n\n    const packageJsonPath: string | undefined = PackageJsonLookup.instance.tryGetPackageJsonFilePathFor(\n      options.cwd\n    );\n    if (packageJsonPath) {\n      let buildFolder: string = path.dirname(packageJsonPath);\n      // The CWD path's casing may be incorrect on a case-insensitive filesystem. Some tools, like Jest\n      // expect the casing of the project path to be correct and produce unexpected behavior when the casing\n      // isn't correct.\n      // This ensures the casing of the project folder is correct.\n      buildFolder = trueCasePathSync(buildFolder);\n      configuration._buildFolder = buildFolder;\n    } else {\n      throw new Error('No package.json file found. Are you in a project folder?');\n    }\n\n    configuration._terminalProvider = options.terminalProvider;\n    configuration._globalTerminal = new Terminal(options.terminalProvider);\n\n    return configuration;\n  }\n}\n"]}