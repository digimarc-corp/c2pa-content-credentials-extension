{"version":3,"file":"TerminalProviderManager.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/TerminalProviderManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAM3D,6FAA0F;AAE1F,MAAM,8BAA8B,GAAW,yBAAyB,CAAC;AAYzE,MAAa,uBAAwB,SAAQ,uEAAkC;IAK7E,YAAmB,OAAwC;QACzD,KAAK,EAAE,CAAC;QALF,+BAA0B,GAAW,CAAC,CAAC;QAC9B,uBAAkB,GAAmC,IAAI,GAAG,EAA6B,CAAC;QAMzG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,aAAa,CAAC;IAC9C,CAAC;IAEM,wBAAwB,CAAC,gBAAmC;QACjE,MAAM,EAAE,GAAW,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACrD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;QAElD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEM,kCAAkC,CAAC,kBAA0B;QAClE,MAAM,gBAAgB,GAAsB;YAC1C,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,oBAAoB;YACtD,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,qBAAqB;YACxD,KAAK,EAAE,CAAC,IAAY,EAAE,QAAkC,EAAE,EAAE;gBAC1D,MAAM,OAAO,GAAuC;oBAClD,IAAI,EAAE,8BAA8B;oBACpC,kBAAkB;oBAClB,IAAI;oBACJ,QAAQ;iBACT,CAAC;gBACF,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;SACF,CAAC;QAEF,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEM,8BAA8B,CAAC,OAA+B;QACnE,OAAO,OAAO,CAAC,IAAI,KAAK,8BAA8B,CAAC;IACzD,CAAC;IAEM,4BAA4B,CAAC,OAA+B;QACjE,IAAI,OAAO,CAAC,IAAI,KAAK,8BAA8B,EAAE;YACnD,MAAM,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAA6C,CAAC;YAC7F,MAAM,gBAAgB,GAAkC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACxG,IAAI,gBAAgB,EAAE;gBACpB,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACxC;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,+BAA+B,kBAAkB,2BAA2B,CAAC,CAAC;aAC/F;SACF;IACH,CAAC;IAEM,iCAAiC,CAAC,OAA+B;QACtE,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,+BAA+B,CAAC,OAA+B,IAAS,CAAC;CACjF;AAzDD,0DAyDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminalProvider, TerminalProviderSeverity } from '@rushstack/node-core-library';\n\nimport { ISubprocessInnerConfiguration } from './SubprocessRunnerBase';\nimport { ISubprocessMessageBase } from './SubprocessCommunication';\nimport { SubprocessCommunicationManagerBase } from './SubprocessCommunicationManagerBase';\n\nconst TERMINAL_PROVIDER_MESSAGE_TYPE: string = 'terminalProviderMessage';\n\ninterface ITerminalProviderSubprocessMessage extends ISubprocessMessageBase {\n  terminalProviderId: number;\n  data: string;\n  severity: TerminalProviderSeverity;\n}\n\nexport interface ITerminalProviderManagerOptions {\n  configuration: ISubprocessInnerConfiguration;\n}\n\nexport class TerminalProviderManager extends SubprocessCommunicationManagerBase {\n  private _terminalProviderIdCounter: number = 0;\n  private readonly _terminalProviders: Map<number, ITerminalProvider> = new Map<number, ITerminalProvider>();\n  private readonly _configuration: ISubprocessInnerConfiguration;\n\n  public constructor(options: ITerminalProviderManagerOptions) {\n    super();\n\n    this._configuration = options.configuration;\n  }\n\n  public registerTerminalProvider(terminalProvider: ITerminalProvider): number {\n    const id: number = this._terminalProviderIdCounter++;\n    this._terminalProviders.set(id, terminalProvider);\n\n    return id;\n  }\n\n  public registerSubprocessTerminalProvider(terminalProviderId: number): ITerminalProvider {\n    const terminalProvider: ITerminalProvider = {\n      eolCharacter: this._configuration.terminalEolCharacter,\n      supportsColor: this._configuration.terminalSupportsColor,\n      write: (data: string, severity: TerminalProviderSeverity) => {\n        const message: ITerminalProviderSubprocessMessage = {\n          type: TERMINAL_PROVIDER_MESSAGE_TYPE,\n          terminalProviderId,\n          data,\n          severity\n        };\n        this.sendMessageToParentProcess(message);\n      }\n    };\n\n    return terminalProvider;\n  }\n\n  public canHandleMessageFromSubprocess(message: ISubprocessMessageBase): boolean {\n    return message.type === TERMINAL_PROVIDER_MESSAGE_TYPE;\n  }\n\n  public receiveMessageFromSubprocess(message: ISubprocessMessageBase): void {\n    if (message.type === TERMINAL_PROVIDER_MESSAGE_TYPE) {\n      const { terminalProviderId, data, severity } = message as ITerminalProviderSubprocessMessage;\n      const terminalProvider: ITerminalProvider | undefined = this._terminalProviders.get(terminalProviderId);\n      if (terminalProvider) {\n        terminalProvider.write(data, severity);\n      } else {\n        throw new Error(`A terminal provider with ID ${terminalProviderId} has not been registered.`);\n      }\n    }\n  }\n\n  public canHandleMessageFromParentProcess(message: ISubprocessMessageBase): boolean {\n    return false;\n  }\n\n  public receiveMessageFromParentProcess(message: ISubprocessMessageBase): void {}\n}\n"]}