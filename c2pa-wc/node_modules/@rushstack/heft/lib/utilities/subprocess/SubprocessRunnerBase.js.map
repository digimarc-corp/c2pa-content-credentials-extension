{"version":3,"file":"SubprocessRunnerBase.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/SubprocessRunnerBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as childProcess from 'child_process';\nimport * as path from 'path';\nimport {\n  ITerminalProvider,\n  ITerminal,\n  Terminal,\n  FileError,\n  SubprocessTerminator\n} from '@rushstack/node-core-library';\n\nimport {\n  ISubprocessMessageBase,\n  ISubprocessApiCallArg,\n  SupportedSerializableArgType,\n  ISubprocessApiCallArgWithValue,\n  ISerializedErrorValue,\n  ISerializedFileErrorValue\n} from './SubprocessCommunication';\nimport { HeftSession } from '../../pluginFramework/HeftSession';\nimport { TerminalProviderManager } from './TerminalProviderManager';\nimport {\n  SubprocessCommunicationManagerBase,\n  ISubprocessCommunicationManagerInitializationOptions\n} from './SubprocessCommunicationManagerBase';\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\nimport { SubprocessLoggerManager } from './SubprocessLoggerManager';\n\nexport interface ISubprocessInnerConfiguration {\n  globalTerminalProviderId: number;\n  terminalSupportsColor: boolean;\n  terminalEolCharacter: string;\n}\n\nexport const SUBPROCESS_RUNNER_CLASS_LABEL: unique symbol = Symbol('IsSubprocessModule');\nexport const SUBPROCESS_RUNNER_INNER_INVOKE: unique symbol = Symbol('SubprocessInnerInvoke');\n\nexport interface ISubprocessRunnerBaseConfiguration {\n  /**\n   * The folder of the project being built\n   *\n   * For example, /home/username/code/repo/project\n   */\n  buildFolder: string;\n}\n\ninterface ISubprocessExitMessage extends ISubprocessMessageBase {\n  type: 'exit';\n  error: ISubprocessApiCallArg;\n}\n\n/**\n * This base class allows an computationally expensive task to be run in a separate NodeJS\n * process.\n *\n * The subprocess can be provided with a configuration, which must be JSON-serializable,\n * and the subprocess can log data via a Terminal object.\n */\nexport abstract class SubprocessRunnerBase<\n  TSubprocessConfiguration extends ISubprocessRunnerBaseConfiguration\n> {\n  public static [SUBPROCESS_RUNNER_CLASS_LABEL]: boolean = true;\n  private static _subprocessInspectorPort: number = 9229 + 1; // 9229 is the default port\n\n  private _terminalProviderManager!: TerminalProviderManager;\n  private _scopedLoggerManager!: SubprocessLoggerManager;\n  private _subprocessCommunicationManagerInitializationOptions!: ISubprocessCommunicationManagerInitializationOptions;\n\n  private _innerConfiguration!: ISubprocessInnerConfiguration;\n  public _runningAsSubprocess: boolean = false;\n  protected readonly _configuration: TSubprocessConfiguration;\n\n  protected _globalTerminal!: ITerminal;\n  private readonly _subprocessCommunicationManagers: SubprocessCommunicationManagerBase[] = [];\n\n  /**\n   * The subprocess filename. This should be set to __filename in the child class.\n   */\n  public abstract get filename(): string;\n\n  public get runningAsSubprocess(): boolean {\n    return this._runningAsSubprocess;\n  }\n\n  /**\n   * Constructs an instances of a subprocess runner\n   */\n  public constructor(\n    parentGlobalTerminalProvider: ITerminalProvider,\n    configuration: TSubprocessConfiguration,\n    heftSession: HeftSession\n  ) {\n    this._configuration = configuration;\n\n    if (parentGlobalTerminalProvider) {\n      // This is the parent process\n      this._innerConfiguration = {\n        globalTerminalProviderId: undefined!,\n        terminalEolCharacter: parentGlobalTerminalProvider.eolCharacter,\n        terminalSupportsColor: parentGlobalTerminalProvider.supportsColor\n      };\n\n      this._registerDefaultCommunicationManagers(\n        {\n          sendMessageToParentProcess: this._receiveMessageFromSubprocess.bind(this),\n          sendMessageToSubprocess: this._receiveMessageFromParentProcess.bind(this)\n        },\n        heftSession\n      );\n\n      const globalTerminalProviderId: number = this._terminalProviderManager.registerTerminalProvider(\n        parentGlobalTerminalProvider\n      );\n      this._innerConfiguration.globalTerminalProviderId = globalTerminalProviderId;\n      this._globalTerminal = new Terminal(\n        this._terminalProviderManager.registerSubprocessTerminalProvider(globalTerminalProviderId)\n      );\n    }\n  }\n\n  public static initializeSubprocess<TSubprocessConfiguration extends ISubprocessRunnerBaseConfiguration>(\n    thisType: new (\n      parentGlobalTerminalProvider: ITerminalProvider,\n      configuration: TSubprocessConfiguration,\n      heftSession: HeftSession\n    ) => SubprocessRunnerBase<TSubprocessConfiguration>,\n    innerConfiguration: ISubprocessInnerConfiguration,\n    configuration: TSubprocessConfiguration\n  ): SubprocessRunnerBase<TSubprocessConfiguration> {\n    const subprocessRunner: SubprocessRunnerBase<TSubprocessConfiguration> = new thisType(\n      undefined!,\n      configuration,\n      undefined!\n    );\n    subprocessRunner._runningAsSubprocess = true;\n    subprocessRunner._innerConfiguration = innerConfiguration;\n\n    subprocessRunner._registerDefaultCommunicationManagers(\n      {\n        sendMessageToParentProcess: process.send!.bind(process),\n        sendMessageToSubprocess: () => {\n          throw new Error('A subprocess cannot send a message to itself.');\n        }\n      },\n      undefined\n    );\n\n    subprocessRunner._globalTerminal = new Terminal(\n      subprocessRunner._terminalProviderManager.registerSubprocessTerminalProvider(\n        innerConfiguration.globalTerminalProviderId\n      )\n    );\n\n    return subprocessRunner;\n  }\n\n  public invokeAsSubprocessAsync(): Promise<void> {\n    return new Promise((resolve: () => void, reject: (error: Error) => void) => {\n      const subprocess: childProcess.ChildProcess = childProcess.fork(\n        path.resolve(__dirname, 'startSubprocess'),\n        [this.filename, JSON.stringify(this._innerConfiguration), JSON.stringify(this._configuration)],\n        {\n          execArgv: this._processNodeArgsForSubprocess(this._globalTerminal, process.execArgv),\n          cwd: this._configuration.buildFolder,\n          ...SubprocessTerminator.RECOMMENDED_OPTIONS\n        }\n      );\n\n      SubprocessTerminator.killProcessTreeOnExit(subprocess, SubprocessTerminator.RECOMMENDED_OPTIONS);\n\n      this._terminalProviderManager.registerSubprocess(subprocess);\n      this._scopedLoggerManager.registerSubprocess(subprocess);\n\n      let hasExited: boolean = false;\n      let exitError: Error | undefined;\n\n      subprocess.on('message', (message: ISubprocessMessageBase) => {\n        switch (message.type) {\n          case 'exit': {\n            if (hasExited) {\n              throw new Error(\n                `Subprocess communication error. Received a duplicate \"${message.type}\" message.`\n              );\n            }\n\n            const exitMessage: ISubprocessExitMessage = message as ISubprocessExitMessage;\n            hasExited = true;\n            exitError = SubprocessRunnerBase.deserializeFromIpcMessage(exitMessage.error) as\n              | Error\n              | undefined;\n\n            break;\n          }\n\n          default: {\n            if (hasExited) {\n              throw new Error(\n                'Subprocess communication error. Received a message after the subprocess ' +\n                  'has indicated that it has exited'\n              );\n            }\n\n            this._receiveMessageFromSubprocess(message);\n          }\n        }\n      });\n\n      subprocess.on('close', () => {\n        if (exitError) {\n          reject(exitError);\n        } else if (!hasExited) {\n          reject(new Error('Subprocess exited before sending \"exit\" message.'));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  public abstract invokeAsync(): Promise<void>;\n\n  public async [SUBPROCESS_RUNNER_INNER_INVOKE](): Promise<void> {\n    process.on('message', (message: ISubprocessMessageBase) => {\n      this._receiveMessageFromParentProcess(message);\n    });\n\n    let error: Error | undefined = undefined;\n    try {\n      await this.invokeAsync();\n    } catch (e) {\n      error = e as Error;\n    } finally {\n      process.removeAllListeners();\n\n      const exitMessage: ISubprocessExitMessage = {\n        type: 'exit',\n        error: SubprocessRunnerBase.serializeForIpcMessage(error)\n      };\n      process.send!(exitMessage);\n    }\n  }\n\n  protected registerSubprocessCommunicationManager(\n    communicationManager: SubprocessCommunicationManagerBase\n  ): void {\n    if (this._subprocessCommunicationManagerInitializationOptions) {\n      communicationManager.initialize(this._subprocessCommunicationManagerInitializationOptions);\n    }\n\n    this._subprocessCommunicationManagers.push(communicationManager);\n  }\n\n  protected async requestScopedLoggerAsync(loggerName: string): Promise<IScopedLogger> {\n    return await this._scopedLoggerManager.requestScopedLoggerAsync(loggerName);\n  }\n\n  private _registerDefaultCommunicationManagers(\n    subprocessCommunicationManagerInitializationOptions: ISubprocessCommunicationManagerInitializationOptions,\n    heftSession: HeftSession | undefined\n  ): void {\n    if (this._subprocessCommunicationManagerInitializationOptions) {\n      throw new Error('Default subprocess communication managers have already been registered.');\n    }\n\n    this._subprocessCommunicationManagerInitializationOptions =\n      subprocessCommunicationManagerInitializationOptions;\n\n    for (const communicationManager of this._subprocessCommunicationManagers) {\n      communicationManager.initialize(this._subprocessCommunicationManagerInitializationOptions);\n    }\n\n    this._terminalProviderManager = new TerminalProviderManager({\n      configuration: this._innerConfiguration\n    });\n    this._scopedLoggerManager = new SubprocessLoggerManager({\n      terminalProviderManager: this._terminalProviderManager,\n      heftSession: heftSession\n    });\n\n    this.registerSubprocessCommunicationManager(this._terminalProviderManager);\n    this.registerSubprocessCommunicationManager(this._scopedLoggerManager);\n  }\n\n  private _processNodeArgsForSubprocess(terminal: ITerminal, nodeArgs: string[]): string[] {\n    nodeArgs = [...nodeArgs]; // Clone the args array\n    const inspectPort: number = SubprocessRunnerBase._subprocessInspectorPort++;\n    let willUseInspector: boolean = false;\n\n    for (let i: number = 0; i < nodeArgs.length; i++) {\n      // The '--inspect' and '--inspect-brk' arguments can have an explicit port specified with syntax that\n      // looks like '--inspect=<port>', so we'll split by the '=' character in case the port is explicitly specified\n      const [firstNodeArgPart]: string[] = nodeArgs[i].split('=');\n      if (firstNodeArgPart === '--inspect' || firstNodeArgPart === '--inspect-brk') {\n        nodeArgs[i] = `${firstNodeArgPart}=${inspectPort}`;\n        willUseInspector = true;\n      }\n    }\n\n    if (willUseInspector) {\n      terminal.writeLine(`Subprocess with inspector bound to port ${inspectPort}`);\n    }\n\n    return nodeArgs;\n  }\n\n  private _receiveMessageFromParentProcess(message: ISubprocessMessageBase): void {\n    for (const subprocessCommunicationManager of this._subprocessCommunicationManagers) {\n      if (subprocessCommunicationManager.canHandleMessageFromParentProcess(message)) {\n        subprocessCommunicationManager.receiveMessageFromParentProcess(message);\n        return;\n      }\n    }\n\n    throw new Error(\n      'Subprocess communication manager. No communication manager can handle message type ' +\n        `\"${message.type}\" from parent process.`\n    );\n  }\n\n  private _receiveMessageFromSubprocess(message: ISubprocessMessageBase): void {\n    for (const subprocessCommunicationManager of this._subprocessCommunicationManagers) {\n      if (subprocessCommunicationManager.canHandleMessageFromSubprocess(message)) {\n        subprocessCommunicationManager.receiveMessageFromSubprocess(message);\n        return;\n      }\n    }\n\n    throw new Error(\n      'Subprocess communication manager. No communication manager can handle message type ' +\n        `\"${message.type}\" from subprocess.`\n    );\n  }\n\n  public static serializeForIpcMessage(arg: unknown): ISubprocessApiCallArg {\n    if (arg === undefined) {\n      return { type: SupportedSerializableArgType.Undefined };\n    } else if (arg === null) {\n      return { type: SupportedSerializableArgType.Null };\n    }\n\n    switch (typeof arg) {\n      case 'object': {\n        if (arg instanceof FileError) {\n          const result: ISubprocessApiCallArgWithValue<ISerializedFileErrorValue> = {\n            type: SupportedSerializableArgType.FileError,\n            value: {\n              errorMessage: arg.message,\n              errorStack: arg.stack,\n              absolutePath: arg.absolutePath,\n              projectFolder: arg.projectFolder,\n              line: arg.line,\n              column: arg.column\n            }\n          };\n\n          return result;\n        } else if (arg instanceof Error) {\n          const result: ISubprocessApiCallArgWithValue<ISerializedErrorValue> = {\n            type: SupportedSerializableArgType.Error,\n            value: {\n              errorMessage: arg.message,\n              errorStack: arg.stack\n            }\n          };\n\n          return result;\n        }\n\n        break;\n      }\n\n      case 'string':\n      case 'number':\n      case 'boolean': {\n        const result: ISubprocessApiCallArgWithValue = {\n          type: SupportedSerializableArgType.Primitive,\n          value: arg\n        };\n\n        return result;\n      }\n    }\n\n    throw new Error(`Argument (${arg}) is not supported in subprocess communication.`);\n  }\n\n  public static deserializeFromIpcMessage(arg: ISubprocessApiCallArg): unknown | undefined {\n    switch (arg.type) {\n      case SupportedSerializableArgType.Undefined: {\n        return undefined;\n      }\n\n      case SupportedSerializableArgType.Null: {\n        return null;\n      }\n\n      case SupportedSerializableArgType.Error: {\n        const typedArg: ISubprocessApiCallArgWithValue<ISerializedErrorValue> =\n          arg as ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\n        const result: Error = new Error(typedArg.value.errorMessage);\n        result.stack = typedArg.value.errorStack;\n        return result;\n      }\n\n      case SupportedSerializableArgType.FileError: {\n        const typedArg: ISubprocessApiCallArgWithValue<ISerializedFileErrorValue> =\n          arg as ISubprocessApiCallArgWithValue<ISerializedFileErrorValue>;\n        const result: FileError = new FileError(typedArg.value.errorMessage, {\n          absolutePath: typedArg.value.absolutePath,\n          projectFolder: typedArg.value.projectFolder,\n          line: typedArg.value.line,\n          column: typedArg.value.column\n        });\n        result.stack = typedArg.value.errorStack;\n        return result;\n      }\n\n      case SupportedSerializableArgType.Primitive: {\n        const typedArg: ISubprocessApiCallArgWithValue = arg as ISubprocessApiCallArgWithValue;\n        return typedArg.value;\n      }\n\n      default:\n        throw new Error(`Unexpected arg type \"${arg.type}\".`);\n    }\n  }\n}\n"]}