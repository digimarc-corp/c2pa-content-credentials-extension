{"version":3,"file":"startSubprocess.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/startSubprocess.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iEAMgC;AAEhC,MAAM,CAAC,EAAE,AAAD,EAAG,oBAAoB,EAAE,4BAA4B,EAAE,iCAAiC,CAAC,GAC/F,OAAO,CAAC,IAAI,CAAC;AAEf,8DAA8D;AAC9D,MAAM,sBAAsB,GAAQ,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAClE,MAAM,6BAA6B,GAAa,MAAM,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC,MAAM,CACvG,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,YAAY,CAC5C,CAAC;AACF,IAAI,6BAA6B,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9C,MAAM,IAAI,KAAK,CACb,wCAAwC,oBAAoB,2CAA2C,CACxG,CAAC;CACH;AAOD,MAAM,qBAAqB,GACzB,sBAAsB,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,IAAI,CAAC,qBAAqB,CAAC,oDAA6B,CAAC,EAAE;IACzD,MAAM,IAAI,KAAK,CACb,wCAAwC,oBAAoB,6BAA6B;QACvF,6BAA6B,CAChC,CAAC;CACH;AAED,MAAM,kBAAkB,GAAkC,IAAI,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;AACnG,MAAM,uBAAuB,GAAuC,IAAI,CAAC,KAAK,CAC5E,iCAAiC,CAClC,CAAC;AAEF,MAAM,gBAAgB,GAA6B,qBAAqB,CAAC,oBAAoB,CAC3F,qBAAqB,EACrB,kBAAkB,EAClB,uBAAuB,CACxB,CAAC;AAEF,gBAAgB,CAAC,qDAA8B,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  SubprocessRunnerBase,\n  ISubprocessInnerConfiguration,\n  SUBPROCESS_RUNNER_CLASS_LABEL,\n  SUBPROCESS_RUNNER_INNER_INVOKE,\n  ISubprocessRunnerBaseConfiguration\n} from './SubprocessRunnerBase';\n\nconst [, , subprocessModulePath, serializedInnerConfiguration, serializedSubprocessConfiguration] =\n  process.argv;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst subprocessRunnerModule: any = require(subprocessModulePath);\nconst subprocessRunnerModuleExports: string[] = Object.getOwnPropertyNames(subprocessRunnerModule).filter(\n  (exportName) => exportName !== '__esModule'\n);\nif (subprocessRunnerModuleExports.length !== 1) {\n  throw new Error(\n    `The provided subprocess module path (${subprocessModulePath}) must only have a single value exported.`\n  );\n}\n\ndeclare class SubprocessRunnerSubclass extends SubprocessRunnerBase<ISubprocessRunnerBaseConfiguration> {\n  public filename: string;\n  public invokeAsync(): Promise<void>;\n}\n\nconst SubprocessRunnerClass: typeof SubprocessRunnerSubclass =\n  subprocessRunnerModule[subprocessRunnerModuleExports[0]];\nif (!SubprocessRunnerClass[SUBPROCESS_RUNNER_CLASS_LABEL]) {\n  throw new Error(\n    `The provided subprocess module path (${subprocessModulePath}) does not extend from the ` +\n      'SubprocessRunnerBase class.'\n  );\n}\n\nconst innerConfiguration: ISubprocessInnerConfiguration = JSON.parse(serializedInnerConfiguration);\nconst subprocessConfiguration: ISubprocessRunnerBaseConfiguration = JSON.parse(\n  serializedSubprocessConfiguration\n);\n\nconst subprocessRunner: SubprocessRunnerSubclass = SubprocessRunnerClass.initializeSubprocess(\n  SubprocessRunnerClass,\n  innerConfiguration,\n  subprocessConfiguration\n);\n\nsubprocessRunner[SUBPROCESS_RUNNER_INNER_INVOKE].call(subprocessRunner).catch(console.error);\n"]}