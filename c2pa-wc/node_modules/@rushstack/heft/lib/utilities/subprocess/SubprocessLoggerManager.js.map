{"version":3,"file":"SubprocessLoggerManager.js","sourceRoot":"","sources":["../../../src/utilities/subprocess/SubprocessLoggerManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminalProvider, Terminal } from '@rushstack/node-core-library';\n\nimport {\n  ISubprocessMessageBase,\n  ISerializedErrorValue,\n  ISubprocessApiCallArgWithValue\n} from './SubprocessCommunication';\nimport { SubprocessCommunicationManagerBase } from './SubprocessCommunicationManagerBase';\nimport { TerminalProviderManager } from './TerminalProviderManager';\nimport { IScopedLogger, ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\nimport { HeftSession } from '../../pluginFramework/HeftSession';\nimport { SubprocessRunnerBase } from './SubprocessRunnerBase';\n\nconst SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE: string = 'subprocessLoggerManagerRequestLogger';\nconst SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE: string = 'subprocessLoggerManagerProvideLogger';\nconst SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE: string = 'subprocessLoggerEmitErrorWarning';\n\ninterface IRequestLoggerMessage extends ISubprocessMessageBase {\n  loggerName: string;\n}\n\ninterface IProvideLoggerMessage extends ISubprocessMessageBase {\n  loggerName: string;\n  terminalProviderId?: number;\n  error?: ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\n}\n\ninterface IEmitErrorOrWarning extends ISubprocessMessageBase {\n  loggerId: number;\n  errorOrWarning: ISubprocessApiCallArgWithValue<ISerializedErrorValue>;\n  isError: boolean;\n}\n\ninterface IPromiseResult<TResult> {\n  resolve: (result: TResult) => void;\n  reject: (error: Error) => void;\n}\n\nexport interface ISubprocessLoggerManagerOptions {\n  terminalProviderManager: TerminalProviderManager;\n  heftSession?: HeftSession;\n}\n\nexport class SubprocessLoggerManager extends SubprocessCommunicationManagerBase {\n  private readonly _terminalProviderManager: TerminalProviderManager;\n  private readonly _heftSession: HeftSession | undefined;\n  private readonly _loggerNamesAwaitingResponse: Map<string, IPromiseResult<IScopedLogger>> = new Map<\n    string,\n    IPromiseResult<IScopedLogger>\n  >();\n  private readonly _requestedLoggers: Map<number, ScopedLogger> = new Map<number, ScopedLogger>();\n\n  public constructor(options: ISubprocessLoggerManagerOptions) {\n    super();\n\n    this._heftSession = options.heftSession;\n    this._terminalProviderManager = options.terminalProviderManager;\n  }\n\n  public async requestScopedLoggerAsync(loggerName: string): Promise<IScopedLogger> {\n    if (this._loggerNamesAwaitingResponse.has(loggerName)) {\n      throw new Error(`A logger with name \"${loggerName}\" has already been requested.`);\n    }\n\n    try {\n      return await new Promise((resolve: (logger: IScopedLogger) => void, reject: (error: Error) => void) => {\n        this._loggerNamesAwaitingResponse.set(loggerName, { resolve, reject });\n\n        const message: IRequestLoggerMessage = {\n          type: SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE,\n          loggerName: loggerName\n        };\n        this.sendMessageToParentProcess(message);\n      });\n    } finally {\n      this._loggerNamesAwaitingResponse.delete(loggerName);\n    }\n  }\n\n  public canHandleMessageFromSubprocess(message: ISubprocessMessageBase): boolean {\n    return (\n      message.type === SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE ||\n      message.type === SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE\n    );\n  }\n\n  public receiveMessageFromSubprocess(message: ISubprocessMessageBase): void {\n    switch (message.type) {\n      case SUBPROCESS_LOGGER_MANAGER_REQUEST_LOGGER_MESSAGE_TYPE: {\n        // Requesting a new logger\n        if (!this._heftSession) {\n          throw new Error(\n            `A heft session must be provided to the ${SubprocessLoggerManager.name} instance in the ` +\n              'parent process.'\n          );\n        }\n\n        if (!this._terminalProviderManager) {\n          throw new Error(\n            `A terminal provider manager must be provided to the ${SubprocessLoggerManager.name} instance in the ` +\n              'parent process.'\n          );\n        }\n\n        const typedMessage: IRequestLoggerMessage = message as IRequestLoggerMessage;\n\n        let responseMessage: IProvideLoggerMessage;\n        try {\n          const logger: ScopedLogger = this._heftSession.requestScopedLogger(typedMessage.loggerName);\n          const terminalProviderId: number = this._terminalProviderManager.registerTerminalProvider(\n            logger.terminalProvider\n          );\n          this._requestedLoggers.set(terminalProviderId, logger);\n\n          responseMessage = {\n            type: SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE,\n            loggerName: typedMessage.loggerName,\n            terminalProviderId: terminalProviderId\n          };\n        } catch (error) {\n          responseMessage = {\n            type: SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE,\n            loggerName: typedMessage.loggerName,\n            error: SubprocessRunnerBase.serializeForIpcMessage(\n              error\n            ) as ISubprocessApiCallArgWithValue<ISerializedErrorValue>\n          };\n        }\n\n        this.sendMessageToSubprocess(responseMessage);\n\n        break;\n      }\n\n      case SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE: {\n        const typedMessage: IEmitErrorOrWarning = message as IEmitErrorOrWarning;\n        const logger: ScopedLogger | undefined = this._requestedLoggers.get(typedMessage.loggerId);\n        if (!logger) {\n          throw new Error(`No logger was was registered with ID ${typedMessage.loggerId}`);\n        }\n\n        const errorOrWarning: Error = SubprocessRunnerBase.deserializeFromIpcMessage(\n          typedMessage.errorOrWarning\n        ) as Error;\n        if (typedMessage.isError) {\n          logger.emitError(errorOrWarning);\n        } else {\n          logger.emitWarning(errorOrWarning);\n        }\n\n        break;\n      }\n    }\n  }\n\n  public canHandleMessageFromParentProcess(message: ISubprocessMessageBase): boolean {\n    return message.type === SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE;\n  }\n\n  public receiveMessageFromParentProcess(message: ISubprocessMessageBase): void {\n    if (message.type === SUBPROCESS_LOGGER_MANAGER_PROVIDE_LOGGER_MESSAGE_TYPE) {\n      const typedMessage: IProvideLoggerMessage = message as IProvideLoggerMessage;\n      const response: IPromiseResult<IScopedLogger> | undefined = this._loggerNamesAwaitingResponse.get(\n        typedMessage.loggerName\n      );\n      if (!response) {\n        throw new Error(`Missing a registered responder for logger name \"${typedMessage.loggerName}\"`);\n      }\n\n      if (typedMessage.error) {\n        const error: Error = SubprocessRunnerBase.deserializeFromIpcMessage(typedMessage.error) as Error;\n        response.reject(error);\n      } else if (typedMessage.terminalProviderId !== undefined) {\n        const terminalProvider: ITerminalProvider =\n          this._terminalProviderManager.registerSubprocessTerminalProvider(typedMessage.terminalProviderId);\n\n        const sendErrorOrWarning: (errorOrWarning: Error, isError: boolean) => void = (\n          errorOrWarning: Error,\n          isError: boolean\n        ) => {\n          const message: IEmitErrorOrWarning = {\n            type: SUBPROCESS_LOGGER_EMIT_ERROR_WARNING_MESSAGE_TYPE,\n            loggerId: typedMessage.terminalProviderId!,\n            errorOrWarning: SubprocessRunnerBase.serializeForIpcMessage(\n              errorOrWarning\n            ) as ISubprocessApiCallArgWithValue<ISerializedErrorValue>,\n            isError\n          };\n          this.sendMessageToParentProcess(message);\n        };\n\n        const scopedLogger: IScopedLogger = {\n          terminal: new Terminal(terminalProvider),\n          emitError: (error: Error) => {\n            sendErrorOrWarning(error, true);\n          },\n          emitWarning: (warning: Error) => {\n            sendErrorOrWarning(warning, false);\n          }\n        };\n        response.resolve(scopedLogger);\n      } else {\n        response.reject(new Error('Received an invalid response.'));\n      }\n    }\n  }\n}\n"]}