{"version":3,"file":"CoreConfigFiles.js","sourceRoot":"","sources":["../../src/utilities/CoreConfigFiles.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  ConfigurationFile,\n  IConfigurationFileOptions,\n  InheritanceType,\n  PathResolutionMethod\n} from '@rushstack/heft-config-file';\nimport { ITerminal } from '@rushstack/node-core-library';\n\nimport { IApiExtractorPluginConfiguration } from '../plugins/ApiExtractorPlugin/ApiExtractorPlugin';\nimport { ITypeScriptConfigurationJson } from '../plugins/TypeScriptPlugin/TypeScriptPlugin';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { INodeServicePluginConfiguration } from '../plugins/NodeServicePlugin';\n\nexport enum HeftEvent {\n  // Part of the 'clean' stage\n  clean = 'clean',\n\n  // Part of the 'build' stage\n  preCompile = 'pre-compile',\n  compile = 'compile',\n  bundle = 'bundle',\n  postBuild = 'post-build',\n\n  // Part of the 'test' stage\n  test = 'test'\n}\n\nexport interface IHeftConfigurationJsonEventActionBase {\n  actionKind: string;\n  heftEvent: 'clean' | 'pre-compile' | 'compile' | 'bundle' | 'post-build' | 'test';\n  actionId: string;\n}\n\nexport interface IHeftConfigurationDeleteGlobsEventAction extends IHeftConfigurationJsonEventActionBase {\n  actionKind: 'deleteGlobs';\n  globsToDelete: string[];\n}\n\nexport interface IHeftConfigurationRunScriptEventAction extends IHeftConfigurationJsonEventActionBase {\n  actionKind: 'runScript';\n  scriptPath: string;\n  scriptOptions: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport interface ISharedCopyConfiguration {\n  /**\n   * File extensions that should be copied from the source folder to the destination folder(s)\n   */\n  fileExtensions?: string[];\n\n  /**\n   * Globs that should be explicitly excluded. This takes precedence over globs listed in \"includeGlobs\" and\n   * files that match the file extensions provided in \"fileExtensions\".\n   */\n  excludeGlobs?: string[];\n\n  /**\n   * Globs that should be explicitly included.\n   */\n  includeGlobs?: string[];\n\n  /**\n   * Copy only the file and discard the relative path from the source folder.\n   */\n  flatten?: boolean;\n\n  /**\n   * Hardlink files instead of copying.\n   */\n  hardlink?: boolean;\n}\n\nexport interface IExtendedSharedCopyConfiguration extends ISharedCopyConfiguration {\n  /**\n   * The folder from which files should be copied, relative to the project root. For example, \"src\".\n   */\n  sourceFolder: string;\n\n  /**\n   * Folder(s) to which files should be copied, relative to the project root. For example [\"lib\", \"lib-cjs\"].\n   */\n  destinationFolders: string[];\n}\n\nexport interface IHeftConfigurationCopyFilesEventAction extends IHeftConfigurationJsonEventActionBase {\n  actionKind: 'copyFiles';\n  copyOperations: IExtendedSharedCopyConfiguration[];\n}\n\nexport interface IHeftConfigurationJsonPluginSpecifier {\n  plugin: string;\n  options?: object;\n}\n\nexport interface IHeftConfigurationJson {\n  eventActions?: IHeftConfigurationJsonEventActionBase[];\n  heftPlugins?: IHeftConfigurationJsonPluginSpecifier[];\n}\n\nexport interface IHeftEventActions {\n  copyFiles: Map<HeftEvent, IHeftConfigurationCopyFilesEventAction[]>;\n  deleteGlobs: Map<HeftEvent, IHeftConfigurationDeleteGlobsEventAction[]>;\n  runScript: Map<HeftEvent, IHeftConfigurationRunScriptEventAction[]>;\n}\n\nexport class CoreConfigFiles {\n  private static _heftConfigFileLoader: ConfigurationFile<IHeftConfigurationJson> | undefined;\n\n  private static _heftConfigFileEventActionsCache: Map<HeftConfiguration, IHeftEventActions> = new Map<\n    HeftConfiguration,\n    IHeftEventActions\n  >();\n\n  private static _apiExtractorTaskConfigurationLoader:\n    | ConfigurationFile<IApiExtractorPluginConfiguration>\n    | undefined;\n  private static _typeScriptConfigurationFileLoader:\n    | ConfigurationFile<ITypeScriptConfigurationJson>\n    | undefined;\n  private static _nodeServiceConfigurationLoader:\n    | ConfigurationFile<INodeServicePluginConfiguration>\n    | undefined;\n\n  /**\n   * Returns the loader for the `config/heft.json` config file.\n   */\n  public static get heftConfigFileLoader(): ConfigurationFile<IHeftConfigurationJson> {\n    if (!CoreConfigFiles._heftConfigFileLoader) {\n      const schemaPath: string = path.join(__dirname, '..', 'schemas', 'heft.schema.json');\n      CoreConfigFiles._heftConfigFileLoader = new ConfigurationFile<IHeftConfigurationJson>({\n        projectRelativeFilePath: 'config/heft.json',\n        jsonSchemaPath: schemaPath,\n        propertyInheritance: {\n          heftPlugins: {\n            inheritanceType: InheritanceType.append\n          }\n        },\n        jsonPathMetadata: {\n          '$.heftPlugins.*.plugin': {\n            pathResolutionMethod: PathResolutionMethod.NodeResolve\n          },\n          '$.eventActions.[?(@.actionKind===\"runScript\")].scriptPath': {\n            pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToProjectRoot\n          }\n        }\n      });\n    }\n\n    return CoreConfigFiles._heftConfigFileLoader;\n  }\n\n  /**\n   * Gets the eventActions from config/heft.json\n   */\n  public static async getConfigConfigFileEventActionsAsync(\n    terminal: ITerminal,\n    heftConfiguration: HeftConfiguration\n  ): Promise<IHeftEventActions> {\n    let result: IHeftEventActions | undefined =\n      CoreConfigFiles._heftConfigFileEventActionsCache.get(heftConfiguration);\n    if (!result) {\n      const heftConfigJson: IHeftConfigurationJson | undefined =\n        await CoreConfigFiles.heftConfigFileLoader.tryLoadConfigurationFileForProjectAsync(\n          terminal,\n          heftConfiguration.buildFolder,\n          heftConfiguration.rigConfig\n        );\n\n      result = {\n        copyFiles: new Map<HeftEvent, IHeftConfigurationCopyFilesEventAction[]>(),\n        deleteGlobs: new Map<HeftEvent, IHeftConfigurationDeleteGlobsEventAction[]>(),\n        runScript: new Map<HeftEvent, IHeftConfigurationRunScriptEventAction[]>()\n      };\n      CoreConfigFiles._heftConfigFileEventActionsCache.set(heftConfiguration, result);\n\n      for (const eventAction of heftConfigJson?.eventActions || []) {\n        switch (eventAction.actionKind) {\n          case 'copyFiles': {\n            CoreConfigFiles._addEventActionToMap(\n              eventAction as IHeftConfigurationCopyFilesEventAction,\n              result.copyFiles\n            );\n            break;\n          }\n\n          case 'deleteGlobs': {\n            CoreConfigFiles._addEventActionToMap(\n              eventAction as IHeftConfigurationDeleteGlobsEventAction,\n              result.deleteGlobs\n            );\n            break;\n          }\n\n          case 'runScript': {\n            CoreConfigFiles._addEventActionToMap(\n              eventAction as IHeftConfigurationRunScriptEventAction,\n              result.runScript\n            );\n            break;\n          }\n\n          default: {\n            throw new Error(\n              `Unknown heft eventAction actionKind \"${eventAction.actionKind}\" in ` +\n                `\"${CoreConfigFiles.heftConfigFileLoader.getObjectSourceFilePath(eventAction)}\" `\n            );\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the loader for the `config/api-extractor-task.json` config file.\n   */\n  public static get apiExtractorTaskConfigurationLoader(): ConfigurationFile<IApiExtractorPluginConfiguration> {\n    if (!CoreConfigFiles._apiExtractorTaskConfigurationLoader) {\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'api-extractor-task.schema.json');\n      CoreConfigFiles._apiExtractorTaskConfigurationLoader =\n        new ConfigurationFile<IApiExtractorPluginConfiguration>({\n          projectRelativeFilePath: 'config/api-extractor-task.json',\n          jsonSchemaPath: schemaPath\n        });\n    }\n\n    return CoreConfigFiles._apiExtractorTaskConfigurationLoader;\n  }\n\n  /**\n   * Returns the loader for the `config/typescript.json` config file.\n   */\n  public static get typeScriptConfigurationFileLoader(): ConfigurationFile<ITypeScriptConfigurationJson> {\n    if (!CoreConfigFiles._typeScriptConfigurationFileLoader) {\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'typescript.schema.json');\n      CoreConfigFiles._typeScriptConfigurationFileLoader =\n        new ConfigurationFile<ITypeScriptConfigurationJson>({\n          projectRelativeFilePath: 'config/typescript.json',\n          jsonSchemaPath: schemaPath,\n          propertyInheritance: {\n            staticAssetsToCopy: {\n              inheritanceType: InheritanceType.custom,\n              inheritanceFunction: (\n                currentObject: ISharedCopyConfiguration,\n                parentObject: ISharedCopyConfiguration\n              ): ISharedCopyConfiguration => {\n                const result: ISharedCopyConfiguration = {};\n\n                CoreConfigFiles._inheritArray(result, 'fileExtensions', currentObject, parentObject);\n                CoreConfigFiles._inheritArray(result, 'includeGlobs', currentObject, parentObject);\n                CoreConfigFiles._inheritArray(result, 'excludeGlobs', currentObject, parentObject);\n\n                return result;\n              }\n            }\n          }\n        } as IConfigurationFileOptions<ITypeScriptConfigurationJson>);\n    }\n\n    return CoreConfigFiles._typeScriptConfigurationFileLoader;\n  }\n\n  /**\n   * Returns the loader for the `config/api-extractor-task.json` config file.\n   */\n  public static get nodeServiceConfigurationLoader(): ConfigurationFile<INodeServicePluginConfiguration> {\n    if (!CoreConfigFiles._nodeServiceConfigurationLoader) {\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'node-service.schema.json');\n      CoreConfigFiles._nodeServiceConfigurationLoader =\n        new ConfigurationFile<INodeServicePluginConfiguration>({\n          projectRelativeFilePath: 'config/node-service.json',\n          jsonSchemaPath: schemaPath\n        });\n    }\n\n    return CoreConfigFiles._nodeServiceConfigurationLoader;\n  }\n\n  private static _addEventActionToMap<TEventAction extends IHeftConfigurationJsonEventActionBase>(\n    eventAction: TEventAction,\n    map: Map<HeftEvent, TEventAction[]>\n  ): void {\n    const heftEvent: HeftEvent = CoreConfigFiles._parseHeftEvent(eventAction);\n    let eventArray: TEventAction[] | undefined = map.get(heftEvent);\n    if (!eventArray) {\n      eventArray = [];\n      map.set(heftEvent, eventArray);\n    }\n\n    eventArray.push(eventAction);\n  }\n\n  private static _parseHeftEvent(eventAction: IHeftConfigurationJsonEventActionBase): HeftEvent {\n    switch (eventAction.heftEvent) {\n      case 'clean':\n        return HeftEvent.clean;\n\n      case 'pre-compile':\n        return HeftEvent.preCompile;\n\n      case 'compile':\n        return HeftEvent.compile;\n\n      case 'bundle':\n        return HeftEvent.bundle;\n\n      case 'post-build':\n        return HeftEvent.postBuild;\n\n      case 'test':\n        return HeftEvent.test;\n\n      default:\n        throw new Error(\n          `Unknown heft event \"${eventAction.heftEvent}\" in ` +\n            ` \"${CoreConfigFiles.heftConfigFileLoader.getObjectSourceFilePath(eventAction)}\".`\n        );\n    }\n  }\n\n  private static _inheritArray<\n    TResultObject extends { [P in TArrayKeys]?: unknown[] },\n    TArrayKeys extends keyof TResultObject\n  >(\n    resultObject: TResultObject,\n    propertyName: TArrayKeys,\n    currentObject: TResultObject,\n    parentObject: TResultObject\n  ): void {\n    let newValue: unknown[] | undefined;\n    if (currentObject[propertyName] && parentObject[propertyName]) {\n      newValue = [\n        ...(currentObject[propertyName] as unknown[]),\n        ...(parentObject[propertyName] as unknown[])\n      ];\n    } else {\n      newValue = currentObject[propertyName] || parentObject[propertyName];\n    }\n\n    if (newValue !== undefined) {\n      resultObject[propertyName] = newValue as TResultObject[TArrayKeys];\n    }\n  }\n}\n"]}