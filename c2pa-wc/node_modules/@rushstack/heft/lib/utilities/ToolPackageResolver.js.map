{"version":3,"file":"ToolPackageResolver.js","sourceRoot":"","sources":["../../src/utilities/ToolPackageResolver.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { ITerminal, PackageJsonLookup, INodePackageJson, Import } from '@rushstack/node-core-library';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { RigConfig } from '@rushstack/rig-package';\n\nexport interface IToolPackageResolution {\n  typeScriptPackagePath: string | undefined;\n  tslintPackagePath: string | undefined;\n  eslintPackagePath: string | undefined;\n  apiExtractorPackagePath: string | undefined;\n}\n\nexport class ToolPackageResolver {\n  private _packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\n  private _resolverCache: Map<string, Promise<IToolPackageResolution>> = new Map<\n    string,\n    Promise<IToolPackageResolution>\n  >();\n\n  public async resolveToolPackagesAsync(\n    heftConfiguration: HeftConfiguration,\n    terminal: ITerminal\n  ): Promise<IToolPackageResolution> {\n    const buildFolder: string = heftConfiguration.buildFolder;\n    const projectFolder: string | undefined = this._packageJsonLookup.tryGetPackageFolderFor(buildFolder);\n    if (!projectFolder) {\n      throw new Error(`Unable to find a package.json file for \"${buildFolder}\" `);\n    }\n\n    let resolutionPromise: Promise<IToolPackageResolution> | undefined =\n      this._resolverCache.get(projectFolder);\n    if (!resolutionPromise) {\n      resolutionPromise = this._resolveToolPackagesInnerAsync(heftConfiguration, terminal);\n      this._resolverCache.set(projectFolder, resolutionPromise);\n    }\n\n    return await resolutionPromise;\n  }\n\n  private async _resolveToolPackagesInnerAsync(\n    heftConfiguration: HeftConfiguration,\n    terminal: ITerminal\n  ): Promise<IToolPackageResolution> {\n    // The following rules will apply independently to each tool (TypeScript, AE, ESLint, TSLint)\n    // - If the local project has a devDependency (not regular or peer dependency) on the tool,\n    // that has highest precedence.\n    // - OTHERWISE if there is a rig.json file, then look at the rig's package.json. Does it have a\n    // regular dependency (not dev or peer dependency) on the tool? If yes, then\n    // resolve the tool from the rig package folder.\n    // - OTHERWISE try to resolve it from the current project.\n\n    const typeScriptPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\n      'typescript',\n      heftConfiguration,\n      terminal\n    );\n    const tslintPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\n      'tslint',\n      heftConfiguration,\n      terminal\n    );\n    const eslintPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\n      'eslint',\n      heftConfiguration,\n      terminal\n    );\n    const apiExtractorPackageResolvePromise: Promise<string | undefined> = this._tryResolveToolPackageAsync(\n      '@microsoft/api-extractor',\n      heftConfiguration,\n      terminal\n    );\n\n    const [typeScriptPackagePath, tslintPackagePath, eslintPackagePath, apiExtractorPackagePath] =\n      await Promise.all([\n        typeScriptPackageResolvePromise,\n        tslintPackageResolvePromise,\n        eslintPackageResolvePromise,\n        apiExtractorPackageResolvePromise\n      ]);\n    return {\n      apiExtractorPackagePath,\n      typeScriptPackagePath,\n      tslintPackagePath,\n      eslintPackagePath\n    };\n  }\n\n  private async _tryResolveToolPackageAsync(\n    toolPackageName: string,\n    heftConfiguration: HeftConfiguration,\n    terminal: ITerminal\n  ): Promise<string | undefined> {\n    // See if the project has a devDependency on the package\n    if (\n      heftConfiguration.projectPackageJson.devDependencies &&\n      heftConfiguration.projectPackageJson.devDependencies[toolPackageName]\n    ) {\n      try {\n        const resolvedPackageFolder: string = Import.resolvePackage({\n          packageName: toolPackageName,\n          baseFolderPath: heftConfiguration.buildFolder\n        });\n        terminal.writeVerboseLine(`Resolved \"${toolPackageName}\" as a direct devDependency of the project.`);\n        return resolvedPackageFolder;\n      } catch (e) {\n        terminal.writeWarningLine(\n          `\"${toolPackageName}\" is listed as a direct devDependency of the project, but could not be resolved. ` +\n            'Have dependencies been installed?'\n        );\n        return undefined;\n      }\n    }\n\n    const rigConfiguration: RigConfig = heftConfiguration.rigConfig;\n    if (rigConfiguration.rigFound) {\n      const rigFolder: string = rigConfiguration.getResolvedProfileFolder();\n      const rigPackageJsonPath: string | undefined =\n        this._packageJsonLookup.tryGetPackageJsonFilePathFor(rigFolder);\n      if (!rigPackageJsonPath) {\n        throw new Error(\n          `Unable to resolve the package.json file for the \"${rigConfiguration.rigPackageName}\" rig package.`\n        );\n      }\n      const rigPackageJson: INodePackageJson =\n        this._packageJsonLookup.loadNodePackageJson(rigPackageJsonPath);\n      if (rigPackageJson.dependencies && rigPackageJson.dependencies[toolPackageName]) {\n        try {\n          const resolvedPackageFolder: string = Import.resolvePackage({\n            packageName: toolPackageName,\n            baseFolderPath: path.dirname(rigPackageJsonPath)\n          });\n          terminal.writeVerboseLine(\n            `Resolved \"${toolPackageName}\" as a dependency of the \"${rigConfiguration.rigPackageName}\" rig package.`\n          );\n          return resolvedPackageFolder;\n        } catch (e) {\n          terminal.writeWarningLine(\n            `\"${toolPackageName}\" is listed as a dependency of the \"${rigConfiguration.rigPackageName}\" rig package, ` +\n              'but could not be resolved. Have dependencies been installed?'\n          );\n          return undefined;\n        }\n      }\n    }\n\n    try {\n      const resolvedPackageFolder: string = Import.resolvePackage({\n        packageName: toolPackageName,\n        baseFolderPath: heftConfiguration.buildFolder\n      });\n      terminal.writeVerboseLine(`Resolved \"${toolPackageName}\" from ${resolvedPackageFolder}.`);\n      return resolvedPackageFolder;\n    } catch (e) {\n      // Ignore\n      return undefined;\n    }\n  }\n}\n"]}