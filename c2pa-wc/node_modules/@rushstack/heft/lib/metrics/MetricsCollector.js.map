{"version":3,"file":"MetricsCollector.js","sourceRoot":"","sources":["../../src/metrics/MetricsCollector.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,uCAAyB;AACzB,qCAAsD;AACtD,2CAAyC;AACzC,oEAA6D;AAoD7D;;;;GAIG;AACH,MAAa,qBAAqB;IAAlC;QACE;;WAEG;QACI,iBAAY,GAAmC,IAAI,kBAAQ,CAAuB;YACvF,YAAY;YACZ,aAAa;SACd,CAAC,CAAC;QAEH;;WAEG;QACI,UAAK,GAAsB,IAAI,2BAAiB,EAAE,CAAC;QAE1D;;WAEG;QACI,qBAAgB,GAAsB,IAAI,2BAAiB,EAAE,CAAC;IACvE,CAAC;CAAA;AAlBD,sDAkBC;AAUD;;;GAGG;AACH,MAAa,gBAAgB;IAA7B;QACkB,UAAK,GAA0B,IAAI,qBAAqB,EAAE,CAAC;QACnE,qBAAgB,GAAY,KAAK,CAAC;IA4E5C,CAAC;IAzEC;;OAEG;IACI,YAAY;QACjB,IAAI,CAAC,YAAY,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC;IACxC,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CACX,OAAe,EACf,eAA2C,EAC3C,UAAmC;QAEnC,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,MAAM,IAAI,iCAAa,CAAC,mEAAmE,CAAC,CAAC;SAC9F;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,iCAAa,CAAC,sCAAsC,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,iCAAa,CAAC,qCAAqC,CAAC,CAAC;SAChE;QAED,MAAM,qBAAqB,mBACzB,oBAAoB,EAAE,CAAC,wBAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,IACjE,CAAC,eAAe,IAAI,EAAE,CAAC,CAC3B,CAAC;QAEF,MAAM,WAAW,GAAiB;YAChC,OAAO,EAAE,OAAO;YAChB,gBAAgB,EAAE,qBAAqB,CAAC,gBAAgB;YACxD,oBAAoB,EAAE,qBAAqB,CAAC,oBAAoB;YAChE,SAAS,EAAE,OAAO,CAAC,QAAQ;YAC3B,WAAW,EAAE,OAAO,CAAC,IAAI;YACzB,YAAY,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM;YAC9B,gBAAgB,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK;YACpC,oBAAoB,EAAE,EAAE,CAAC,QAAQ,EAAE;YACnC,iBAAiB,EAAE,UAAU,IAAI,EAAE;SACpC,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACzD;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,qBAAqB;QAChC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;QAED,MAAM,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAC5C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;CACF;AA9ED,4CA8EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as os from 'os';\nimport { AsyncParallelHook, SyncHook } from 'tapable';\nimport { performance } from 'perf_hooks';\nimport { InternalError } from '@rushstack/node-core-library';\n\n/**\n * @public\n */\nexport interface IMetricsData {\n  /**\n   * The command that was executed.\n   */\n  command: string;\n\n  /**\n   * Whether or not the command ran into errors\n   */\n  encounteredError?: boolean;\n\n  /**\n   * The amount of time the command took to execute, in milliseconds.\n   */\n  taskTotalExecutionMs: number;\n\n  /**\n   * The name of the operating system provided by NodeJS.\n   */\n  machineOs: string;\n\n  /**\n   * The processor's architecture.\n   */\n  machineArch: string;\n\n  /**\n   * The number of processor cores.\n   */\n  machineCores: number;\n\n  /**\n   * The processor's model name.\n   */\n  machineProcessor: string;\n\n  /**\n   * The total amount of memory the machine has, in megabytes.\n   */\n  machineTotalMemoryMB: number;\n\n  /**\n   * A map of commandline parameter names to their effective values\n   */\n  commandParameters: Record<string, string>;\n}\n\n/**\n * Tap these hooks to record build metrics, to a file, for example.\n *\n * @public\n */\nexport class MetricsCollectorHooks {\n  /**\n   * This hook is called when a metric is recorded.\n   */\n  public recordMetric: SyncHook<string, IMetricsData> = new SyncHook<string, IMetricsData>([\n    'metricName',\n    'metricsData'\n  ]);\n\n  /**\n   * This hook is called when collected metrics should be flushed\n   */\n  public flush: AsyncParallelHook = new AsyncParallelHook();\n\n  /**\n   * This hook is called when collected metrics should be flushed and no more metrics will be collected.\n   */\n  public flushAndTeardown: AsyncParallelHook = new AsyncParallelHook();\n}\n\n/**\n * @internal\n */\nexport interface IPerformanceData {\n  taskTotalExecutionMs: number;\n  encounteredError?: boolean;\n}\n\n/**\n * @internal\n * A simple performance metrics collector. A plugin is required to pipe data anywhere.\n */\nexport class MetricsCollector {\n  public readonly hooks: MetricsCollectorHooks = new MetricsCollectorHooks();\n  private _hasBeenTornDown: boolean = false;\n  private _startTimeMs: number | undefined;\n\n  /**\n   * Start metrics log timer.\n   */\n  public setStartTime(): void {\n    this._startTimeMs = performance.now();\n  }\n\n  /**\n   * Record metrics to the installed plugin(s).\n   *\n   * @param command - Describe the user command, e.g. `start` or `build`\n   * @param parameterMap - Optional map of parameters to their values\n   * @param performanceData - Optional performance data\n   */\n  public record(\n    command: string,\n    performanceData?: Partial<IPerformanceData>,\n    parameters?: Record<string, string>\n  ): void {\n    if (this._startTimeMs === undefined) {\n      throw new InternalError('MetricsCollector has not been initialized with setStartTime() yet');\n    }\n\n    if (this._hasBeenTornDown) {\n      throw new InternalError('MetricsCollector has been torn down.');\n    }\n\n    if (!command) {\n      throw new InternalError('The command name must be specified.');\n    }\n\n    const filledPerformanceData: IPerformanceData = {\n      taskTotalExecutionMs: (performance.now() - this._startTimeMs) / 1000,\n      ...(performanceData || {})\n    };\n\n    const metricsData: IMetricsData = {\n      command: command,\n      encounteredError: filledPerformanceData.encounteredError,\n      taskTotalExecutionMs: filledPerformanceData.taskTotalExecutionMs,\n      machineOs: process.platform,\n      machineArch: process.arch,\n      machineCores: os.cpus().length,\n      machineProcessor: os.cpus()[0].model,\n      machineTotalMemoryMB: os.totalmem(),\n      commandParameters: parameters || {}\n    };\n\n    this.hooks.recordMetric.call('inner_loop_heft', metricsData);\n  }\n\n  /**\n   * Flushes all pending logged metrics.\n   */\n  public async flushAsync(): Promise<void> {\n    if (this._hasBeenTornDown) {\n      throw new Error('MetricsCollector has been torn down.');\n    }\n\n    await this.hooks.flush.promise();\n  }\n\n  /**\n   * Flushes all pending logged metrics and closes the MetricsCollector instance.\n   */\n  public async flushAndTeardownAsync(): Promise<void> {\n    if (this._hasBeenTornDown) {\n      throw new Error('MetricsCollector has already been torn down.');\n    }\n\n    await this.hooks.flushAndTeardown.promise();\n    this._hasBeenTornDown = true;\n  }\n}\n"]}