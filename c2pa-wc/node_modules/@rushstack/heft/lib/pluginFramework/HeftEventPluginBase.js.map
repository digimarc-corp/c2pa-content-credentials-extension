{"version":3,"file":"HeftEventPluginBase.js","sourceRoot":"","sources":["../../src/pluginFramework/HeftEventPluginBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { TapOptions } from 'tapable';\n\nimport { IHeftPlugin } from '../pluginFramework/IHeftPlugin';\nimport { HeftSession } from '../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\nimport {\n  CoreConfigFiles,\n  HeftEvent,\n  IHeftConfigurationJsonEventActionBase,\n  IHeftEventActions\n} from '../utilities/CoreConfigFiles';\nimport { ICleanStageContext, ICleanStageProperties } from '../stages/CleanStage';\nimport {\n  IBuildStageContext,\n  IBuildStageProperties,\n  IBundleSubstage,\n  ICompileSubstage,\n  IPostBuildSubstage,\n  IPreCompileSubstage\n} from '../stages/BuildStage';\nimport { ITestStageContext, ITestStageProperties } from '../stages/TestStage';\n\nexport abstract class HeftEventPluginBase<THeftEventAction extends IHeftConfigurationJsonEventActionBase>\n  implements IHeftPlugin\n{\n  public abstract readonly pluginName: string;\n  protected abstract readonly eventActionName: keyof IHeftEventActions;\n  protected abstract readonly loggerName: string;\n\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    const logger: ScopedLogger = heftSession.requestScopedLogger(this.loggerName);\n    const heftStageTap: TapOptions<'promise'> = {\n      name: this.pluginName,\n      stage: Number.MAX_SAFE_INTEGER / 2 // This should give us some certainty that this will run after other plugins\n    };\n\n    const handleEventActionsAsync = async <TStageProperties>(\n      heftEvent: HeftEvent,\n      properties: TStageProperties,\n      handler: (\n        heftEvent: HeftEvent,\n        heftEventActions: THeftEventAction[],\n        logger: ScopedLogger,\n        heftSession: HeftSession,\n        heftConfiguration: HeftConfiguration,\n        properties: TStageProperties\n      ) => Promise<void>\n    ): Promise<void> => {\n      const heftEventActions: THeftEventAction[] = await this._getEventActions(\n        heftEvent,\n        logger,\n        heftConfiguration\n      );\n      if (heftEventActions.length) {\n        await handler(heftEvent, heftEventActions, logger, heftSession, heftConfiguration, properties);\n      }\n    };\n\n    heftSession.hooks.clean.tap(this.pluginName, (clean: ICleanStageContext) => {\n      clean.hooks.run.tapPromise(heftStageTap, async () => {\n        await handleEventActionsAsync(\n          HeftEvent.clean,\n          clean.properties,\n          this.handleCleanEventActionsAsync.bind(this)\n        );\n      });\n    });\n\n    heftSession.hooks.build.tap(this.pluginName, (build: IBuildStageContext) => {\n      build.hooks.preCompile.tap(this.pluginName, (preCompile: IPreCompileSubstage) => {\n        preCompile.hooks.run.tapPromise(heftStageTap, async () => {\n          await handleEventActionsAsync(\n            HeftEvent.preCompile,\n            build.properties,\n            this.handleBuildEventActionsAsync.bind(this)\n          );\n        });\n      });\n\n      build.hooks.compile.tap(this.pluginName, (compile: ICompileSubstage) => {\n        compile.hooks.run.tapPromise(heftStageTap, async () => {\n          await handleEventActionsAsync(\n            HeftEvent.compile,\n            build.properties,\n            this.handleBuildEventActionsAsync.bind(this)\n          );\n        });\n      });\n\n      build.hooks.bundle.tap(this.pluginName, (bundle: IBundleSubstage) => {\n        bundle.hooks.run.tapPromise(heftStageTap, async () => {\n          await handleEventActionsAsync(\n            HeftEvent.bundle,\n            build.properties,\n            this.handleBuildEventActionsAsync.bind(this)\n          );\n        });\n      });\n\n      build.hooks.postBuild.tap(this.pluginName, (postBuild: IPostBuildSubstage) => {\n        postBuild.hooks.run.tapPromise(heftStageTap, async () => {\n          await handleEventActionsAsync(\n            HeftEvent.postBuild,\n            build.properties,\n            this.handleBuildEventActionsAsync.bind(this)\n          );\n        });\n      });\n    });\n\n    heftSession.hooks.test.tap(this.pluginName, (test: ITestStageContext) => {\n      test.hooks.run.tapPromise(heftStageTap, async () => {\n        await handleEventActionsAsync(\n          HeftEvent.test,\n          test.properties,\n          this.handleTestEventActionsAsync.bind(this)\n        );\n      });\n    });\n  }\n\n  protected handleCleanEventActionsAsync(\n    heftEvent: HeftEvent,\n    heftEventActions: THeftEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: ICleanStageProperties\n  ): Promise<void> {\n    return Promise.resolve();\n  }\n\n  protected handleBuildEventActionsAsync(\n    heftEvent: HeftEvent,\n    heftEventActions: THeftEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: IBuildStageProperties\n  ): Promise<void> {\n    return Promise.resolve();\n  }\n\n  protected handleTestEventActionsAsync(\n    heftEvent: HeftEvent,\n    heftEventActions: THeftEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: ITestStageProperties\n  ): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private async _getEventActions(\n    heftEvent: HeftEvent,\n    logger: ScopedLogger,\n    heftConfiguration: HeftConfiguration\n  ): Promise<THeftEventAction[]> {\n    const allEventActions: IHeftEventActions = await CoreConfigFiles.getConfigConfigFileEventActionsAsync(\n      logger.terminal,\n      heftConfiguration\n    );\n    const baseEventActions: IHeftConfigurationJsonEventActionBase[] =\n      allEventActions[this.eventActionName].get(heftEvent) || [];\n\n    return baseEventActions as THeftEventAction[];\n  }\n}\n"]}