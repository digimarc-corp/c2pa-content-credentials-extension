{"version":3,"file":"ScopedLogger.js","sourceRoot":"","sources":["../../../src/pluginFramework/logging/ScopedLogger.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAA2E;AAG3E,6FAA0F;AAC1F,qDAAkD;AA2BlD;;GAEG;AACH,MAAa,YAAY;IA4BvB;;OAEG;IACH,YAAmB,OAA6B;QA7B/B,YAAO,GAAY,EAAE,CAAC;QACtB,cAAS,GAAY,EAAE,CAAC;QA6BvC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAErC,IAAI,CAAC,gBAAgB,GAAG,IAAI,yDAA2B,CACrD,OAAO,CAAC,gBAAgB,EACxB,IAAI,IAAI,CAAC,UAAU,IAAI,CACxB,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,4BAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACtD,CAAC;IApCD,IAAY,kBAAkB;QAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;IAC9C,CAAC;IAED,IAAW,MAAM;QACf,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IA4BD;;OAEG;IACI,SAAS,CAAC,KAAY;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,UAAU,+BAAc,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChF,IAAI,IAAI,CAAC,kBAAkB,IAAI,KAAK,CAAC,KAAK,EAAE;YAC1C,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;OAEG;IACI,WAAW,CAAC,OAAc;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,+BAAc,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,kBAAkB,IAAI,OAAO,CAAC,KAAK,EAAE;YAC5C,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/C;IACH,CAAC;CACF;AAhED,oCAgEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Terminal, ITerminalProvider } from '@rushstack/node-core-library';\n\nimport { IHeftPlugin } from '../IHeftPlugin';\nimport { PrefixProxyTerminalProvider } from '../../utilities/PrefixProxyTerminalProvider';\nimport { LoggingManager } from './LoggingManager';\n\nexport interface IScopedLoggerOptions {\n  requestingPlugin: IHeftPlugin;\n  loggerName: string;\n  terminalProvider: ITerminalProvider;\n  getShouldPrintStacks: () => boolean;\n  errorHasBeenEmittedCallback: () => void;\n}\n\n/**\n * @public\n */\nexport interface IScopedLogger {\n  readonly terminal: Terminal;\n\n  /**\n   * Call this function to emit an error to the heft runtime.\n   */\n  emitError(error: Error): void;\n\n  /**\n   * Call this function to emit an warning to the heft runtime.\n   */\n  emitWarning(warning: Error): void;\n}\n\n/**\n * @public\n */\nexport class ScopedLogger implements IScopedLogger {\n  private readonly _options: IScopedLoggerOptions;\n  private readonly _errors: Error[] = [];\n  private readonly _warnings: Error[] = [];\n\n  private get _shouldPrintStacks(): boolean {\n    return this._options.getShouldPrintStacks();\n  }\n\n  public get errors(): ReadonlyArray<Error> {\n    return [...this._errors];\n  }\n\n  public get warnings(): ReadonlyArray<Error> {\n    return [...this._warnings];\n  }\n\n  /**\n   * @internal\n   */\n  public readonly _requestingPlugin: IHeftPlugin;\n\n  public readonly loggerName: string;\n\n  public readonly terminalProvider: ITerminalProvider;\n\n  public readonly terminal: Terminal;\n\n  /**\n   * @internal\n   */\n  public constructor(options: IScopedLoggerOptions) {\n    this._options = options;\n    this._requestingPlugin = options.requestingPlugin;\n    this.loggerName = options.loggerName;\n\n    this.terminalProvider = new PrefixProxyTerminalProvider(\n      options.terminalProvider,\n      `[${this.loggerName}] `\n    );\n    this.terminal = new Terminal(this.terminalProvider);\n  }\n\n  /**\n   * {@inheritdoc IScopedLogger.emitError}\n   */\n  public emitError(error: Error): void {\n    this._errors.push(error);\n    this.terminal.writeErrorLine(`Error: ${LoggingManager.getErrorMessage(error)}`);\n    if (this._shouldPrintStacks && error.stack) {\n      this.terminal.writeErrorLine(error.stack);\n    }\n  }\n\n  /**\n   * {@inheritdoc IScopedLogger.emitWarning}\n   */\n  public emitWarning(warning: Error): void {\n    this._warnings.push(warning);\n    this.terminal.writeWarningLine(`Warning: ${LoggingManager.getErrorMessage(warning)}`);\n    if (this._shouldPrintStacks && warning.stack) {\n      this.terminal.writeWarningLine(warning.stack);\n    }\n  }\n}\n"]}