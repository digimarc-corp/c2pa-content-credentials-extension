{"version":3,"file":"HeftSession.js","sourceRoot":"","sources":["../../src/pluginFramework/HeftSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAiD3D;;GAEG;AACH,MAAa,WAAW;IAoCtB;;OAEG;IACH,YAAmB,OAA4B,EAAE,sBAAmD;QAClG,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAC7D,IAAI,CAAC,gBAAgB,GAAG,sBAAsB,CAAC,gBAAgB,CAAC;QAChE,IAAI,CAAC,cAAc,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAC5D,IAAI,CAAC,WAAW,GAAG,sBAAsB,CAAC,WAAW,CAAC;QAEtD,IAAI,CAAC,KAAK,GAAG;YACX,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK;YAE7C,aAAa,EAAE,sBAAsB,CAAC,iBAAiB;YACvD,KAAK,EAAE,sBAAsB,CAAC,UAAU,CAAC,uBAAuB;YAChE,KAAK,EAAE,sBAAsB,CAAC,UAAU,CAAC,uBAAuB;YAChE,IAAI,EAAE,sBAAsB,CAAC,SAAS,CAAC,uBAAuB;SAC/D,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,sBAAsB,CAAC,cAAc,CAAC;QAE7D,IAAI,CAAC,2BAA2B,GAAG,OAAO,CAAC,2BAA2B,CAAC;IACzE,CAAC;IA/CD;;OAEG;IACH,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IA4CD;;OAEG;IACI,mBAAmB,CAAC,UAAkB;QAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACpF,CAAC;CACF;AAnED,kCAmEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { SyncHook } from 'tapable';\n\nimport { MetricsCollector, MetricsCollectorHooks } from '../metrics/MetricsCollector';\nimport { ICleanStageContext } from '../stages/CleanStage';\nimport { IBuildStageContext } from '../stages/BuildStage';\nimport { ITestStageContext } from '../stages/TestStage';\nimport { IHeftPlugin } from './IHeftPlugin';\nimport { IInternalHeftSessionOptions } from './InternalHeftSession';\nimport { ScopedLogger } from './logging/ScopedLogger';\nimport { LoggingManager } from './logging/LoggingManager';\nimport { ICustomActionOptions } from '../cli/actions/CustomAction';\nimport { IHeftLifecycle } from './HeftLifecycle';\nimport { HeftCommandLine } from '../cli/HeftCommandLine';\n\n/** @beta */\nexport type RegisterAction = <TParameters>(action: ICustomActionOptions<TParameters>) => void;\n\n/**\n * @public\n */\nexport interface IHeftSessionHooks {\n  metricsCollector: MetricsCollectorHooks;\n\n  /** @internal */\n  heftLifecycle: SyncHook<IHeftLifecycle>;\n  build: SyncHook<IBuildStageContext>;\n  clean: SyncHook<ICleanStageContext>;\n  test: SyncHook<ITestStageContext>;\n}\n\nexport interface IHeftSessionOptions {\n  plugin: IHeftPlugin;\n\n  /**\n   * @beta\n   */\n  requestAccessToPluginByName: RequestAccessToPluginByNameCallback;\n}\n\n/**\n * @beta\n */\nexport type RequestAccessToPluginByNameCallback = (\n  pluginToAccessName: string,\n  pluginApply: (pluginAccessor: object) => void\n) => void;\n\n/**\n * @public\n */\nexport class HeftSession {\n  private readonly _loggingManager: LoggingManager;\n  private readonly _options: IHeftSessionOptions;\n  private readonly _getIsDebugMode: () => boolean;\n\n  public readonly hooks: IHeftSessionHooks;\n\n  /**\n   * @internal\n   */\n  public readonly metricsCollector: MetricsCollector;\n\n  /**\n   * If set to true, the build is running with the --debug flag\n   */\n  public get debugMode(): boolean {\n    return this._getIsDebugMode();\n  }\n\n  /** @beta */\n  public readonly registerAction: RegisterAction;\n\n  /**\n   * @beta\n   * {@inheritDoc HeftCommandLine}\n   */\n  public readonly commandLine: HeftCommandLine;\n\n  /**\n   * Call this function to receive a callback with the plugin if and after the specified plugin\n   * has been applied. This is used to tap hooks on another plugin.\n   *\n   * @beta\n   */\n  public readonly requestAccessToPluginByName: RequestAccessToPluginByNameCallback;\n\n  /**\n   * @internal\n   */\n  public constructor(options: IHeftSessionOptions, internalSessionOptions: IInternalHeftSessionOptions) {\n    this._options = options;\n\n    this._loggingManager = internalSessionOptions.loggingManager;\n    this.metricsCollector = internalSessionOptions.metricsCollector;\n    this.registerAction = internalSessionOptions.registerAction;\n    this.commandLine = internalSessionOptions.commandLine;\n\n    this.hooks = {\n      metricsCollector: this.metricsCollector.hooks,\n\n      heftLifecycle: internalSessionOptions.heftLifecycleHook,\n      build: internalSessionOptions.buildStage.stageInitializationHook,\n      clean: internalSessionOptions.cleanStage.stageInitializationHook,\n      test: internalSessionOptions.testStage.stageInitializationHook\n    };\n\n    this._getIsDebugMode = internalSessionOptions.getIsDebugMode;\n\n    this.requestAccessToPluginByName = options.requestAccessToPluginByName;\n  }\n\n  /**\n   * Call this function to request a logger with the specified name.\n   */\n  public requestScopedLogger(loggerName: string): ScopedLogger {\n    return this._loggingManager.requestScopedLogger(this._options.plugin, loggerName);\n  }\n}\n"]}