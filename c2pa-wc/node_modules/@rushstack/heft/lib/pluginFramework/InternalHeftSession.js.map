{"version":3,"file":"InternalHeftSession.js","sourceRoot":"","sources":["../../src/pluginFramework/InternalHeftSession.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAAmC;AAGnC,+CAA4D;AAyB5D;;GAEG;AACH,MAAa,mBAAmB;IAI9B,YAAmB,OAAoC;QAF/C,iBAAY,GAAkC,IAAI,GAAG,EAA4B,CAAC;QAGxF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC1B,CAAC;IAEM,mBAAmB,CAAC,UAAuB;QAChD,OAAO,IAAI,yBAAW,CACpB;YACE,MAAM,EAAE,UAAU;YAClB,2BAA2B,EAAE,CAC3B,kBAA0B,EAC1B,aAA+C,EAC/C,EAAE;gBACF,IAAI,UAAU,GAAiC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBACzF,IAAI,CAAC,UAAU,EAAE;oBACf,UAAU,GAAG,IAAI,kBAAQ,CAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;iBACvD;gBAED,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;YACvD,CAAC;SACF,EACD,IAAI,CAAC,QAAQ,CACd,CAAC;IACJ,CAAC;IAEM,gBAAgB,CAAC,MAAmB;QACzC,MAAM,UAAU,GAAiC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC1F,MAAM,QAAQ,GAAuB,MAAM,CAAC,QAAQ,CAAC;QACrD,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,gBAAgB,GAAgB,IAAI,GAAG,CAAS,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1F,MAAM,IAAI,KAAK,CACb,WAAW,MAAM,CAAC,UAAU,kEAAkE;oBAC5F,0DAA0D,MAAM,CAAC,UAAU,IAAI;oBAC/E,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC1C,CAAC;aACH;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC3B;SACF;IACH,CAAC;CACF;AA7CD,kDA6CC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { SyncHook } from 'tapable';\n\nimport { IHeftPlugin } from './IHeftPlugin';\nimport { HeftSession, RegisterAction } from './HeftSession';\nimport { BuildStage } from '../stages/BuildStage';\nimport { CleanStage } from '../stages/CleanStage';\nimport { TestStage } from '../stages/TestStage';\nimport { MetricsCollector } from '../metrics/MetricsCollector';\nimport { LoggingManager } from './logging/LoggingManager';\nimport { IHeftLifecycle } from './HeftLifecycle';\nimport { HeftCommandLine } from '../cli/HeftCommandLine';\n\n/**\n * @internal\n */\nexport interface IInternalHeftSessionOptions {\n  heftLifecycleHook: SyncHook<IHeftLifecycle>;\n  buildStage: BuildStage;\n  cleanStage: CleanStage;\n  testStage: TestStage;\n\n  metricsCollector: MetricsCollector;\n  loggingManager: LoggingManager;\n  getIsDebugMode(): boolean;\n  registerAction: RegisterAction;\n  commandLine: HeftCommandLine;\n}\n\n/**\n * @internal\n */\nexport class InternalHeftSession {\n  private readonly _options: IInternalHeftSessionOptions;\n  private _pluginHooks: Map<string, SyncHook<object>> = new Map<string, SyncHook<object>>();\n\n  public constructor(options: IInternalHeftSessionOptions) {\n    this._options = options;\n  }\n\n  public getSessionForPlugin(thisPlugin: IHeftPlugin): HeftSession {\n    return new HeftSession(\n      {\n        plugin: thisPlugin,\n        requestAccessToPluginByName: (\n          pluginToAccessName: string,\n          pluginApplyFn: (pluginAccessor: object) => void\n        ) => {\n          let pluginHook: SyncHook<object> | undefined = this._pluginHooks.get(pluginToAccessName);\n          if (!pluginHook) {\n            pluginHook = new SyncHook<object>(['pluginAccessor']);\n            this._pluginHooks.set(pluginToAccessName, pluginHook);\n          }\n\n          pluginHook.tap(thisPlugin.pluginName, pluginApplyFn);\n        }\n      },\n      this._options\n    );\n  }\n\n  public applyPluginHooks(plugin: IHeftPlugin): void {\n    const pluginHook: SyncHook<object> | undefined = this._pluginHooks.get(plugin.pluginName);\n    const accessor: object | undefined = plugin.accessor;\n    if (pluginHook && pluginHook.taps.length > 0) {\n      if (!accessor) {\n        const accessingPlugins: Set<string> = new Set<string>(pluginHook.taps.map((x) => x.name));\n        throw new Error(\n          `Plugin \"${plugin.pluginName}\" does not provide an accessor property, so it does not provide ` +\n            `access to other plugins. Plugins requesting access to \"${plugin.pluginName}: ` +\n            Array.from(accessingPlugins).join(', ')\n        );\n      } else {\n        pluginHook.call(accessor);\n      }\n    }\n  }\n}\n"]}