{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["../../src/pluginFramework/PluginManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminal, InternalError, Import } from '@rushstack/node-core-library';\n\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { IHeftPlugin } from './IHeftPlugin';\nimport { InternalHeftSession } from './InternalHeftSession';\nimport { HeftSession } from './HeftSession';\nimport {\n  CoreConfigFiles,\n  IHeftConfigurationJsonPluginSpecifier,\n  IHeftConfigurationJson\n} from '../utilities/CoreConfigFiles';\n\n// Default plugins\nimport { CopyFilesPlugin } from '../plugins/CopyFilesPlugin';\nimport { TypeScriptPlugin } from '../plugins/TypeScriptPlugin/TypeScriptPlugin';\nimport { DeleteGlobsPlugin } from '../plugins/DeleteGlobsPlugin';\nimport { CopyStaticAssetsPlugin } from '../plugins/CopyStaticAssetsPlugin';\nimport { RunScriptPlugin } from '../plugins/RunScriptPlugin';\nimport { ApiExtractorPlugin } from '../plugins/ApiExtractorPlugin/ApiExtractorPlugin';\nimport { ProjectValidatorPlugin } from '../plugins/ProjectValidatorPlugin';\nimport { ToolPackageResolver } from '../utilities/ToolPackageResolver';\nimport { NodeServicePlugin } from '../plugins/NodeServicePlugin';\n\nexport interface IPluginManagerOptions {\n  terminal: ITerminal;\n  heftConfiguration: HeftConfiguration;\n  internalHeftSession: InternalHeftSession;\n}\n\nexport class PluginManager {\n  private _terminal: ITerminal;\n  private _heftConfiguration: HeftConfiguration;\n  private _internalHeftSession: InternalHeftSession;\n  private _appliedPlugins: IHeftPlugin[] = [];\n  private _appliedPluginNames: Set<string> = new Set<string>();\n\n  public constructor(options: IPluginManagerOptions) {\n    this._terminal = options.terminal;\n    this._heftConfiguration = options.heftConfiguration;\n    this._internalHeftSession = options.internalHeftSession;\n  }\n\n  public initializeDefaultPlugins(): void {\n    const taskPackageResolver: ToolPackageResolver = new ToolPackageResolver();\n\n    this._applyPlugin(new TypeScriptPlugin(taskPackageResolver));\n    this._applyPlugin(new CopyStaticAssetsPlugin());\n    this._applyPlugin(new CopyFilesPlugin());\n    this._applyPlugin(new DeleteGlobsPlugin());\n    this._applyPlugin(new RunScriptPlugin());\n    this._applyPlugin(new ApiExtractorPlugin(taskPackageResolver));\n    this._applyPlugin(new ProjectValidatorPlugin());\n    this._applyPlugin(new NodeServicePlugin());\n  }\n\n  public initializePlugin(pluginSpecifier: string, options?: object): void {\n    const resolvedPluginPath: string = this._resolvePlugin(pluginSpecifier);\n    this._initializeResolvedPlugin(resolvedPluginPath, options);\n  }\n\n  public async initializePluginsFromConfigFileAsync(): Promise<void> {\n    const heftConfigurationJson: IHeftConfigurationJson | undefined =\n      await CoreConfigFiles.heftConfigFileLoader.tryLoadConfigurationFileForProjectAsync(\n        this._heftConfiguration.globalTerminal,\n        this._heftConfiguration.buildFolder,\n        this._heftConfiguration.rigConfig\n      );\n    const heftPluginSpecifiers: IHeftConfigurationJsonPluginSpecifier[] =\n      heftConfigurationJson?.heftPlugins || [];\n\n    for (const pluginSpecifier of heftPluginSpecifiers) {\n      this._initializeResolvedPlugin(pluginSpecifier.plugin, pluginSpecifier.options);\n    }\n  }\n\n  public afterInitializeAllPlugins(): void {\n    for (const appliedPlugin of this._appliedPlugins) {\n      this._internalHeftSession.applyPluginHooks(appliedPlugin);\n    }\n  }\n\n  private _initializeResolvedPlugin(resolvedPluginPath: string, options?: object): void {\n    const plugin: IHeftPlugin<object | void> = this._loadAndValidatePluginPackage(\n      resolvedPluginPath,\n      options\n    );\n\n    if (this._appliedPluginNames.has(plugin.pluginName)) {\n      throw new Error(\n        `Error applying plugin \"${resolvedPluginPath}\": A plugin with name \"${plugin.pluginName}\" has ` +\n          'already been applied'\n      );\n    } else {\n      this._applyPlugin(plugin, options);\n    }\n  }\n\n  private _applyPlugin(plugin: IHeftPlugin<object | void>, options?: object): void {\n    try {\n      const heftSession: HeftSession = this._internalHeftSession.getSessionForPlugin(plugin);\n      plugin.apply(heftSession, this._heftConfiguration, options);\n      this._appliedPlugins.push(plugin);\n      this._appliedPluginNames.add(plugin.pluginName);\n    } catch (e) {\n      throw new InternalError(`Error applying \"${plugin.pluginName}\": ${e}`);\n    }\n  }\n\n  private _loadAndValidatePluginPackage(resolvedPluginPath: string, options?: object): IHeftPlugin {\n    let pluginPackage: IHeftPlugin;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const loadedPluginPackage: IHeftPlugin | { default: IHeftPlugin } = require(resolvedPluginPath);\n      pluginPackage = (loadedPluginPackage as { default: IHeftPlugin }).default || loadedPluginPackage;\n    } catch (e) {\n      throw new InternalError(`Error loading plugin package from \"${resolvedPluginPath}\": ${e}`);\n    }\n\n    if (!pluginPackage) {\n      throw new InternalError(`Plugin package loaded from \"${resolvedPluginPath}\" is null or undefined.`);\n    }\n\n    this._terminal.writeVerboseLine(`Loaded plugin package from \"${resolvedPluginPath}\"`);\n\n    if (!pluginPackage.apply || typeof pluginPackage.apply !== 'function') {\n      throw new InternalError(\n        `Plugin packages must define an \"apply\" function. The plugin loaded from \"${resolvedPluginPath}\" ` +\n          'either doesn\\'t define an \"apply\" property, or its value isn\\'t a function.'\n      );\n    }\n\n    if (!pluginPackage.pluginName || typeof pluginPackage.pluginName !== 'string') {\n      throw new InternalError(\n        `Plugin packages must define a \"pluginName\" property. The plugin loaded from \"${resolvedPluginPath}\" ` +\n          'either doesn\\'t define a \"pluginName\" property, or its value isn\\'t a string.'\n      );\n    }\n\n    if (options && pluginPackage.optionsSchema) {\n      try {\n        pluginPackage.optionsSchema.validateObject(options, 'config/heft.json');\n      } catch (e) {\n        throw new Error(\n          `Provided options for plugin \"${pluginPackage.pluginName}\" did not match the provided plugin schema.\\n${e}`\n        );\n      }\n    }\n\n    return pluginPackage;\n  }\n\n  private _resolvePlugin(pluginSpecifier: string): string {\n    let resolvedPluginPath: string;\n\n    this._terminal.writeVerboseLine(`Resolving plugin ${pluginSpecifier}`);\n\n    try {\n      resolvedPluginPath = Import.resolveModule({\n        modulePath: pluginSpecifier,\n        baseFolderPath: this._heftConfiguration.buildFolder\n      });\n    } catch (e) {\n      throw new InternalError(`Error resolving specified plugin \"${pluginSpecifier}\". Resolve error: ${e}`);\n    }\n\n    if (!resolvedPluginPath) {\n      throw new InternalError(`Error resolving specified plugin \"${pluginSpecifier}\".`);\n    }\n\n    this._terminal.writeVerboseLine(`Resolved plugin path to ${resolvedPluginPath}`);\n\n    return resolvedPluginPath;\n  }\n}\n"]}