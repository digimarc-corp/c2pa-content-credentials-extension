{"version":3,"file":"CustomAction.js","sourceRoot":"","sources":["../../../src/cli/actions/CustomAction.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  CommandLineFlagParameter,\n  CommandLineStringParameter,\n  CommandLineIntegerParameter,\n  CommandLineStringListParameter\n} from '@rushstack/ts-command-line';\n\nimport { HeftActionBase, IHeftActionBaseOptions } from './HeftActionBase';\n\n/** @beta */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ICustomActionParameterBase<CustomActionParameterType> {\n  kind: 'flag' | 'integer' | 'string' | 'stringList'; // TODO: Add \"choice\"\n\n  parameterLongName: string;\n  description: string;\n}\n\n/** @beta */\nexport interface ICustomActionParameterFlag extends ICustomActionParameterBase<boolean> {\n  kind: 'flag';\n}\n\n/** @beta */\nexport interface ICustomActionParameterInteger extends ICustomActionParameterBase<number> {\n  kind: 'integer';\n}\n\n/** @beta */\nexport interface ICustomActionParameterString extends ICustomActionParameterBase<string> {\n  kind: 'string';\n}\n\n/** @beta */\nexport interface ICustomActionParameterStringList extends ICustomActionParameterBase<ReadonlyArray<string>> {\n  kind: 'stringList';\n}\n\n/** @beta */\nexport type CustomActionParameterType = string | boolean | number | ReadonlyArray<string> | undefined;\n\n/** @beta */\nexport type ICustomActionParameter<TParameter> = TParameter extends boolean\n  ? ICustomActionParameterFlag\n  : TParameter extends number\n  ? ICustomActionParameterInteger\n  : TParameter extends string\n  ? ICustomActionParameterString\n  : TParameter extends ReadonlyArray<string>\n  ? ICustomActionParameterStringList\n  : never;\n\n/** @beta */\nexport interface ICustomActionOptions<TParameters> {\n  actionName: string;\n  documentation: string;\n  summary?: string;\n\n  parameters?: { [K in keyof TParameters]: ICustomActionParameter<TParameters[K]> };\n\n  callback: (parameters: TParameters) => void | Promise<void>;\n}\n\nexport class CustomAction<TParameters> extends HeftActionBase {\n  private _customActionOptions: ICustomActionOptions<TParameters>;\n  private _parameterValues!: Map<string, () => CustomActionParameterType>;\n\n  public constructor(\n    customActionOptions: ICustomActionOptions<TParameters>,\n    options: IHeftActionBaseOptions\n  ) {\n    super(\n      {\n        actionName: customActionOptions.actionName,\n        documentation: customActionOptions.documentation,\n        summary: customActionOptions.summary || ''\n      },\n      options\n    );\n\n    this._customActionOptions = customActionOptions;\n  }\n\n  public onDefineParameters(): void {\n    super.onDefineParameters();\n\n    this._parameterValues = new Map<string, () => CustomActionParameterType>();\n    for (const [callbackValueName, untypedParameterOption] of Object.entries(\n      this._customActionOptions.parameters || {}\n    )) {\n      if (this._parameterValues.has(callbackValueName)) {\n        throw new Error(`Duplicate callbackValueName: ${callbackValueName}`);\n      }\n\n      let getParameterValue: () => CustomActionParameterType;\n\n      const parameterOption: ICustomActionParameter<CustomActionParameterType> =\n        untypedParameterOption as ICustomActionParameter<CustomActionParameterType>;\n      switch (parameterOption.kind) {\n        case 'flag': {\n          const parameter: CommandLineFlagParameter = this.defineFlagParameter({\n            parameterLongName: parameterOption.parameterLongName,\n            description: parameterOption.description\n          });\n          getParameterValue = () => parameter.value;\n          break;\n        }\n\n        case 'string': {\n          const parameter: CommandLineStringParameter = this.defineStringParameter({\n            parameterLongName: parameterOption.parameterLongName,\n            description: parameterOption.description,\n            argumentName: 'VALUE'\n          });\n          getParameterValue = () => parameter.value;\n          break;\n        }\n\n        case 'integer': {\n          const parameter: CommandLineIntegerParameter = this.defineIntegerParameter({\n            parameterLongName: parameterOption.parameterLongName,\n            description: parameterOption.description,\n            argumentName: 'VALUE'\n          });\n          getParameterValue = () => parameter.value;\n          break;\n        }\n\n        case 'stringList': {\n          const parameter: CommandLineStringListParameter = this.defineStringListParameter({\n            parameterLongName: parameterOption.parameterLongName,\n            description: parameterOption.description,\n            argumentName: 'VALUE'\n          });\n          getParameterValue = () => parameter.values;\n          break;\n        }\n\n        default: {\n          throw new Error(\n            // @ts-expect-error All cases are handled above, therefore parameterOption is of type `never`\n            `Unrecognized parameter kind \"${parameterOption.kind}\" for parameter \"${parameterOption.parameterLongName}`\n          );\n        }\n      }\n\n      this._parameterValues.set(callbackValueName, getParameterValue);\n    }\n  }\n\n  protected async actionExecuteAsync(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parameterValues: Record<string, any> = {};\n\n    for (const [callbackName, getParameterValue] of this._parameterValues.entries()) {\n      parameterValues[callbackName] = getParameterValue();\n    }\n\n    await this._customActionOptions.callback(parameterValues as TParameters);\n  }\n}\n"]}