{"version":3,"file":"HeftActionBase.js","sourceRoot":"","sources":["../../../src/cli/actions/HeftActionBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport {\n  CommandLineAction,\n  CommandLineFlagParameter,\n  ICommandLineActionOptions,\n  ICommandLineFlagDefinition,\n  IBaseCommandLineDefinition,\n  ICommandLineChoiceDefinition,\n  CommandLineChoiceParameter,\n  CommandLineIntegerParameter,\n  ICommandLineIntegerDefinition,\n  CommandLineStringParameter,\n  ICommandLineStringDefinition,\n  CommandLineStringListParameter,\n  ICommandLineStringListDefinition\n} from '@rushstack/ts-command-line';\nimport {\n  ITerminal,\n  IPackageJson,\n  Colors,\n  ConsoleTerminalProvider,\n  AlreadyReportedError\n} from '@rushstack/node-core-library';\nimport { performance } from 'perf_hooks';\n\nimport { IPerformanceData, MetricsCollector } from '../../metrics/MetricsCollector';\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\nimport { BuildStage } from '../../stages/BuildStage';\nimport { CleanStage } from '../../stages/CleanStage';\nimport { TestStage } from '../../stages/TestStage';\nimport { LoggingManager } from '../../pluginFramework/logging/LoggingManager';\nimport { Constants } from '../../utilities/Constants';\n\nexport interface IStages {\n  buildStage: BuildStage;\n  cleanStage: CleanStage;\n  testStage: TestStage;\n}\n\nexport interface IHeftActionBaseOptions {\n  terminal: ITerminal;\n  loggingManager: LoggingManager;\n  metricsCollector: MetricsCollector;\n  heftConfiguration: HeftConfiguration;\n  stages: IStages;\n}\n\nexport abstract class HeftActionBase extends CommandLineAction {\n  protected readonly terminal: ITerminal;\n  protected readonly loggingManager: LoggingManager;\n  protected readonly metricsCollector: MetricsCollector;\n  protected readonly heftConfiguration: HeftConfiguration;\n  protected readonly stages: IStages;\n  protected verboseFlag!: CommandLineFlagParameter;\n\n  public constructor(\n    commandLineOptions: ICommandLineActionOptions,\n    heftActionOptions: IHeftActionBaseOptions\n  ) {\n    super(commandLineOptions);\n    this.terminal = heftActionOptions.terminal;\n    this.loggingManager = heftActionOptions.loggingManager;\n    this.metricsCollector = heftActionOptions.metricsCollector;\n    this.heftConfiguration = heftActionOptions.heftConfiguration;\n    this.stages = heftActionOptions.stages;\n    this.setStartTime();\n  }\n\n  public onDefineParameters(): void {\n    this.verboseFlag = this.defineFlagParameter({\n      parameterLongName: '--verbose',\n      parameterShortName: '-v',\n      description: 'If specified, log information useful for debugging.'\n    });\n  }\n\n  public defineChoiceParameter(options: ICommandLineChoiceDefinition): CommandLineChoiceParameter {\n    this._validateDefinedParameter(options);\n    return super.defineChoiceParameter(options);\n  }\n\n  public defineFlagParameter(options: ICommandLineFlagDefinition): CommandLineFlagParameter {\n    this._validateDefinedParameter(options);\n    return super.defineFlagParameter(options);\n  }\n\n  public defineIntegerParameter(options: ICommandLineIntegerDefinition): CommandLineIntegerParameter {\n    this._validateDefinedParameter(options);\n    return super.defineIntegerParameter(options);\n  }\n\n  public defineStringParameter(options: ICommandLineStringDefinition): CommandLineStringParameter {\n    this._validateDefinedParameter(options);\n    return super.defineStringParameter(options);\n  }\n\n  public defineStringListParameter(\n    options: ICommandLineStringListDefinition\n  ): CommandLineStringListParameter {\n    this._validateDefinedParameter(options);\n    return super.defineStringListParameter(options);\n  }\n\n  public setStartTime(): void {\n    this.metricsCollector.setStartTime();\n  }\n\n  public recordMetrics(performanceData?: Partial<IPerformanceData>): void {\n    this.metricsCollector.record(this.actionName, performanceData, this.getParameterStringMap());\n  }\n\n  public async onExecute(): Promise<void> {\n    this.terminal.writeLine(`Starting ${this.actionName}`);\n\n    if (this.verboseFlag.value) {\n      if (this.heftConfiguration.terminalProvider instanceof ConsoleTerminalProvider) {\n        this.heftConfiguration.terminalProvider.verboseEnabled = true;\n      }\n    }\n\n    let encounteredError: boolean = false;\n    try {\n      await this.actionExecuteAsync();\n      await this.afterExecuteAsync();\n    } catch (e) {\n      encounteredError = true;\n      throw e;\n    } finally {\n      const warningStrings: string[] = this.loggingManager.getWarningStrings();\n      const errorStrings: string[] = this.loggingManager.getErrorStrings();\n\n      const encounteredWarnings: boolean = warningStrings.length > 0;\n      encounteredError = encounteredError || errorStrings.length > 0;\n\n      this.recordMetrics({ encounteredError });\n\n      this.terminal.writeLine(\n        Colors.bold(\n          (encounteredError ? Colors.red : encounteredWarnings ? Colors.yellow : Colors.green)(\n            `-------------------- Finished (${Math.round(performance.now()) / 1000}s) --------------------`\n          )\n        )\n      );\n\n      if (warningStrings.length > 0) {\n        this.terminal.writeWarningLine(`Encountered ${warningStrings.length} warnings:`);\n        for (const warningString of warningStrings) {\n          this.terminal.writeWarningLine(`  ${warningString}`);\n        }\n      }\n\n      if (errorStrings.length > 0) {\n        this.terminal.writeErrorLine(`Encountered ${errorStrings.length} errors:`);\n        for (const errorString of errorStrings) {\n          this.terminal.writeErrorLine(`  ${errorString}`);\n        }\n      }\n\n      const projectPackageJson: IPackageJson = this.heftConfiguration.projectPackageJson;\n      this.terminal.writeLine(\n        `Project: ${projectPackageJson.name}`,\n        Colors.dim(Colors.gray(`@${projectPackageJson.version}`))\n      );\n      this.terminal.writeLine(`Heft version: ${this.heftConfiguration.heftPackageJson.version}`);\n      this.terminal.writeLine(`Node version: ${process.version}`);\n    }\n\n    if (encounteredError) {\n      throw new AlreadyReportedError();\n    }\n  }\n\n  protected abstract actionExecuteAsync(): Promise<void>;\n\n  /**\n   * @virtual\n   */\n  protected async afterExecuteAsync(): Promise<void> {\n    /* no-op by default */\n  }\n\n  private _validateDefinedParameter(options: IBaseCommandLineDefinition): void {\n    if (\n      options.parameterLongName === Constants.pluginParameterLongName ||\n      options.parameterLongName === Constants.debugParameterLongName\n    ) {\n      throw new Error(`Actions must not register a parameter with longName \"${options.parameterLongName}\".`);\n    }\n  }\n}\n"]}