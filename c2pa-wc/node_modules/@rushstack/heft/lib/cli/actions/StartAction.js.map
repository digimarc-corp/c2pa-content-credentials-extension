{"version":3,"file":"StartAction.js","sourceRoot":"","sources":["../../../src/cli/actions/StartAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qDAA0E;AAC1E,wDAAwG;AAGxG,qDAAkD;AAElD,MAAa,WAAY,SAAQ,+BAAc;IAK7C,YAAmB,iBAAyC;QAC1D,KAAK,CACH;YACE,UAAU,EAAE,OAAO;YACnB,OAAO,EAAE,8CAA8C;YACvD,aAAa,EAAE,EAAE;SAClB,EACD,iBAAiB,CAClB,CAAC;IACJ,CAAC;IAEM,kBAAkB;QACvB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,wBAAwB,GAAG,uBAAU,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;QAE/E,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACzC,iBAAiB,EAAE,SAAS;YAC5B,WAAW,EAAE,yEAAyE;SACvF,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,kBAAkB;QAChC,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;YACzB,MAAM,UAAU,GAAe,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACtD,MAAM,iBAAiB,GAAuB,EAAE,CAAC;YACjD,MAAM,UAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAEpD,MAAM,iBAAO,CAAC,iCAAiC,CAC7C,IAAI,CAAC,QAAQ,EACb,OAAO,EACP,KAAK,IAAI,EAAE,CAAC,MAAM,UAAU,CAAC,YAAY,EAAE,CAC5C,CAAC;SACH;QAED,MAAM,UAAU,GAAe,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACtD,MAAM,iBAAiB,mCAClB,uBAAU,CAAC,gCAAgC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAC7E,SAAS,EAAE,IAAI,EACf,SAAS,EAAE,IAAI,GAChB,CAAC;QAEF,MAAM,UAAU,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACpD,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC;IAClC,CAAC;IAES,KAAK,CAAC,iBAAiB;QAC/B,MAAM,IAAI,OAAO,CAAC,GAAG,EAAE;YACrB,iCAAiC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAxDD,kCAwDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { IHeftActionBaseOptions, HeftActionBase } from './HeftActionBase';\nimport { IBuildStageStandardParameters, BuildStage, IBuildStageOptions } from '../../stages/BuildStage';\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\nimport { ICleanStageOptions, CleanStage } from '../../stages/CleanStage';\nimport { Logging } from '../../utilities/Logging';\n\nexport class StartAction extends HeftActionBase {\n  private _buildStandardParameters!: IBuildStageStandardParameters;\n  private _cleanFlag!: CommandLineFlagParameter;\n  private _storybookFlag!: CommandLineFlagParameter;\n\n  public constructor(heftActionOptions: IHeftActionBaseOptions) {\n    super(\n      {\n        actionName: 'start',\n        summary: 'Run the local server for the current project',\n        documentation: ''\n      },\n      heftActionOptions\n    );\n  }\n\n  public onDefineParameters(): void {\n    super.onDefineParameters();\n\n    this._buildStandardParameters = BuildStage.defineStageStandardParameters(this);\n\n    this._cleanFlag = this.defineFlagParameter({\n      parameterLongName: '--clean',\n      description: 'If specified, clean the package before starting the development server.'\n    });\n  }\n\n  protected async actionExecuteAsync(): Promise<void> {\n    if (this._cleanFlag.value) {\n      const cleanStage: CleanStage = this.stages.cleanStage;\n      const cleanStageOptions: ICleanStageOptions = {};\n      await cleanStage.initializeAsync(cleanStageOptions);\n\n      await Logging.runFunctionWithLoggingBoundsAsync(\n        this.terminal,\n        'Clean',\n        async () => await cleanStage.executeAsync()\n      );\n    }\n\n    const buildStage: BuildStage = this.stages.buildStage;\n    const buildStageOptions: IBuildStageOptions = {\n      ...BuildStage.getOptionsFromStandardParameters(this._buildStandardParameters),\n      watchMode: true,\n      serveMode: true\n    };\n\n    await buildStage.initializeAsync(buildStageOptions);\n    await buildStage.executeAsync();\n  }\n\n  protected async afterExecuteAsync(): Promise<void> {\n    await new Promise(() => {\n      /* start should never continue */\n    });\n  }\n}\n"]}