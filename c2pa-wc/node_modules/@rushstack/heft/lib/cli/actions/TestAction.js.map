{"version":3,"file":"TestAction.js","sourceRoot":"","sources":["../../../src/cli/actions/TestAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAI3D,+CAA4C;AAG5C,qDAAkD;AAElD,MAAa,UAAW,SAAQ,yBAAW;IAGzC;;;MAGE;IAEF,YAAmB,iBAAyC;QAC1D,KAAK,CAAC,iBAAiB,EAAE;YACvB,UAAU,EAAE,MAAM;YAClB,OAAO,EAAE,kCAAkC;YAC3C,aAAa,EAAE,EAAE;SAClB,CAAC,CAAC;IACL,CAAC;IAEM,kBAAkB;QACvB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC1C,iBAAiB,EAAE,WAAW;YAC9B,WAAW,EAAE,8CAA8C;YAC3D,oBAAoB,EAAE,CAAC,UAAU,CAAC,CAAC,gBAAgB;SACpD,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC3C,iBAAiB,EAAE,YAAY;YAC/B,WAAW,EAAE,kDAAkD;SAChE,CAAC,CAAC;IACL,CAAC;IAES,KAAK,CAAC,kBAAkB;QAChC,MAAM,WAAW,GAAY,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;QACtD,MAAM,SAAS,GAAY,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QACjD,MAAM,MAAM,GAAY,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAC/C,MAAM,IAAI,GAAY,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAE3C,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,2BAA2B,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;aACrG;iBAAM,IAAI,MAAM,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,2BAA2B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;aACpG;iBAAM,IAAI,IAAI,EAAE;gBACf,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,2BAA2B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;aAClG;SACF;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,MAAM,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,2BAA2B,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC;aACtG;SACF;QAED,IAAI,MAAM,IAAI,IAAI,CAAC,iCAAiC,EAAE;YACpD,MAAM,KAAK,CAAC,kBAAkB,EAAE,CAAC;SAClC;aAAM;YACL,MAAM,SAAS,GAAc,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YACnD,MAAM,gBAAgB,GAAsB;gBAC1C,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK;aACjC,CAAC;YACF,MAAM,SAAS,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAElD,IAAI,WAAW,EAAE;gBACf,MAAM,KAAK,CAAC,kBAAkB,EAAE,CAAC;gBAEjC,IACE,IAAI,CAAC,cAAc,CAAC,qBAAqB;oBACzC,CAAC,SAAS,CAAC,iCAAiC;kBAC5C;oBACA,OAAO;iBACR;gBAED,MAAM,iBAAO,CAAC,iCAAiC,CAC7C,IAAI,CAAC,QAAQ,EACb,MAAM,EACN,KAAK,IAAI,EAAE,CAAC,MAAM,SAAS,CAAC,YAAY,EAAE,CAC3C,CAAC;aACH;iBAAM;gBACL,MAAM,SAAS,CAAC,YAAY,EAAE,CAAC;aAChC;SACF;IACH,CAAC;CACF;AAlFD,gCAkFC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { CommandLineFlagParameter } from '@rushstack/ts-command-line';\n\nimport { BuildAction } from './BuildAction';\nimport { IHeftActionBaseOptions } from './HeftActionBase';\nimport { TestStage, ITestStageOptions } from '../../stages/TestStage';\nimport { Logging } from '../../utilities/Logging';\n\nexport class TestAction extends BuildAction {\n  private _noTestFlag!: CommandLineFlagParameter;\n  private _noBuildFlag!: CommandLineFlagParameter;\n  /*\n  // Temporary workaround for https://github.com/microsoft/rushstack/issues/2759\n  private _passWithNoTests!: CommandLineFlagParameter;\n  */\n\n  public constructor(heftActionOptions: IHeftActionBaseOptions) {\n    super(heftActionOptions, {\n      actionName: 'test',\n      summary: 'Build the project and run tests.',\n      documentation: ''\n    });\n  }\n\n  public onDefineParameters(): void {\n    super.onDefineParameters();\n\n    this._noTestFlag = this.defineFlagParameter({\n      parameterLongName: '--no-test',\n      description: 'If specified, run the build without testing.',\n      undocumentedSynonyms: ['--notest'] // To be removed\n    });\n\n    this._noBuildFlag = this.defineFlagParameter({\n      parameterLongName: '--no-build',\n      description: 'If provided, only run tests. Do not build first.'\n    });\n  }\n\n  protected async actionExecuteAsync(): Promise<void> {\n    const shouldBuild: boolean = !this._noBuildFlag.value;\n    const watchMode: boolean = this._watchFlag.value;\n    const noTest: boolean = this._noTestFlag.value;\n    const lite: boolean = this._liteFlag.value;\n\n    if (watchMode) {\n      if (!shouldBuild) {\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._noBuildFlag.longName}`);\n      } else if (noTest) {\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._noTestFlag.longName}`);\n      } else if (lite) {\n        throw new Error(`${this._watchFlag.longName} is not compatible with ${this._liteFlag.longName}`);\n      }\n    }\n\n    if (!shouldBuild) {\n      if (noTest) {\n        throw new Error(`${this._noTestFlag.longName} is not compatible with ${this._noBuildFlag.longName}`);\n      }\n    }\n\n    if (noTest || lite /* \"&& shouldBuild\" is implied */) {\n      await super.actionExecuteAsync();\n    } else {\n      const testStage: TestStage = this.stages.testStage;\n      const testStageOptions: ITestStageOptions = {\n        watchMode: this._watchFlag.value\n      };\n      await testStage.initializeAsync(testStageOptions);\n\n      if (shouldBuild) {\n        await super.actionExecuteAsync();\n\n        if (\n          this.loggingManager.errorsHaveBeenEmitted &&\n          !watchMode // Kick off tests in --watch mode\n        ) {\n          return;\n        }\n\n        await Logging.runFunctionWithLoggingBoundsAsync(\n          this.terminal,\n          'Test',\n          async () => await testStage.executeAsync()\n        );\n      } else {\n        await testStage.executeAsync();\n      }\n    }\n  }\n}\n"]}