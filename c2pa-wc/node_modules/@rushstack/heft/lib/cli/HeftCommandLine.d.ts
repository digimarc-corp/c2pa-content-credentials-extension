import { IBaseCommandLineDefinition, ICommandLineFlagDefinition, ICommandLineIntegerDefinition, ICommandLineStringDefinition, ICommandLineStringListDefinition, ICommandLineChoiceDefinition, ICommandLineChoiceListDefinition, CommandLineParser } from '@rushstack/ts-command-line';
import { ITerminal } from '@rushstack/node-core-library';
/**
 * @beta
 * The base set of utility values provided in every object returned when registering a parameter.
 */
export interface IHeftBaseParameter<TValue, TCommandLineDefinition extends IBaseCommandLineDefinition> {
    /**
     * The value specified on the command line for this parameter.
     */
    readonly value?: TValue;
    /**
     * If true, then the user has invoked Heft with a command line action that supports this parameter
     * (as defined by the {@link IParameterAssociatedActionNames.associatedActionNames} option).
     *
     * @remarks
     * For example, if `build` is one of the associated action names for `--my-integer-parameter`,
     * then `actionAssociated` will be true if the user invokes `heft build`.
     *
     * To test whether the parameter was actually included (e.g. `heft build --my-integer-parameter 123`),
     * verify the {@link IHeftBaseParameter.value} property is not `undefined`.
     */
    readonly actionAssociated: boolean;
    /**
     * The options {@link IHeftRegisterParameterOptions} used to create and register the parameter with
     * a Heft command line action.
     */
    readonly definition: IHeftRegisterParameterOptions<TCommandLineDefinition>;
}
/**
 * @beta
 * The object returned when registering a choice type parameter.
 */
export declare type IHeftChoiceParameter = IHeftBaseParameter<string, ICommandLineChoiceDefinition>;
/**
 * @beta
 * The object returned when registering a choiceList type parameter.
 */
export declare type IHeftChoiceListParameter = IHeftBaseParameter<readonly string[], ICommandLineChoiceListDefinition>;
/**
 * @beta
 * The object returned when registering a flag type parameter.
 */
export declare type IHeftFlagParameter = IHeftBaseParameter<boolean, ICommandLineFlagDefinition>;
/**
 * @beta
 * The object returned when registering an integer type parameter.
 */
export declare type IHeftIntegerParameter = IHeftBaseParameter<number, ICommandLineIntegerDefinition>;
/**
 * @beta
 * The object returned when registering a string type parameter.
 */
export declare type IHeftStringParameter = IHeftBaseParameter<string, ICommandLineStringDefinition>;
/**
 * @beta
 * The object returned when registering a stringList type parameter.
 */
export declare type IHeftStringListParameter = IHeftBaseParameter<readonly string[], ICommandLineStringListDefinition>;
/**
 * @beta
 * The configuration interface for associating a parameter definition with a Heft
 * command line action in {@link IHeftRegisterParameterOptions}.
 */
export interface IParameterAssociatedActionNames {
    /**
     * A string list of one or more action names to associate the parameter with.
     */
    associatedActionNames: string[];
}
/**
 * @beta
 * The options object provided to the command line parser when registering a parameter
 * in addition to the action names used to associate the parameter with.
 */
export declare type IHeftRegisterParameterOptions<TCommandLineDefinition extends IBaseCommandLineDefinition> = TCommandLineDefinition & IParameterAssociatedActionNames;
/**
 * @beta
 * Command line utilities provided for Heft plugin developers.
 */
export declare class HeftCommandLine {
    private readonly _commandLineParser;
    private readonly _terminal;
    /**
     * @internal
     */
    constructor(commandLineParser: CommandLineParser, terminal: ITerminal);
    /**
     * Utility method used by Heft plugins to register a choice type parameter.
     */
    registerChoiceParameter(options: IHeftRegisterParameterOptions<ICommandLineChoiceDefinition>): IHeftChoiceParameter;
    /**
     * Utility method used by Heft plugins to register a choiceList type parameter.
     */
    registerChoiceListParameter(options: IHeftRegisterParameterOptions<ICommandLineChoiceListDefinition>): IHeftChoiceListParameter;
    /**
     * Utility method used by Heft plugins to register a flag type parameter.
     */
    registerFlagParameter(options: IHeftRegisterParameterOptions<ICommandLineFlagDefinition>): IHeftFlagParameter;
    /**
     * Utility method used by Heft plugins to register an integer type parameter.
     */
    registerIntegerParameter(options: IHeftRegisterParameterOptions<ICommandLineIntegerDefinition>): IHeftIntegerParameter;
    /**
     * Utility method used by Heft plugins to register a string type parameter.
     */
    registerStringParameter(options: IHeftRegisterParameterOptions<ICommandLineStringDefinition>): IHeftStringParameter;
    /**
     * Utility method used by Heft plugins to register a stringList type parameter.
     */
    registerStringListParameter(options: IHeftRegisterParameterOptions<ICommandLineStringListDefinition>): IHeftStringListParameter;
    private _registerParameter;
    private _getActions;
    private _verifyUniqueParameterName;
    private _verifyParametersProcessed;
}
//# sourceMappingURL=HeftCommandLine.d.ts.map