{"version":3,"file":"StageBase.js","sourceRoot":"","sources":["../../src/stages/StageBase.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAG3D,qCAAyE;AAgBzE;;GAEG;AACH,MAAsB,cAAc;IAApC;QACE;;;;;WAKG;QACa,kBAAa,GAA0C,IAAI,6BAAmB,CAAC;YAC7F,iBAAiB;SAClB,CAAC,CAAC;QAEa,2BAAsB,GAAoB,IAAI,yBAAe,EAAE,CAAC;QAEhE,gCAA2B,GAAoB,IAAI,yBAAe,EAAE,CAAC;IACvF,CAAC;CAAA;AAdD,wCAcC;AAED,MAAsB,SAAS;IAc7B,YACE,iBAAoC,EACpC,cAA8B,EAC9B,cAAqC;QAErC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,iBAAiB,CAAC,cAAc,CAAC;QACvD,IAAI,CAAC,uBAAuB,GAAG,IAAI,kBAAQ,CAA+C;YACxF,cAAc;SACf,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,YAA2B;QACtD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpF,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;QAC7C,MAAM,YAAY,GAAiD;YACjE,KAAK,EAAE,IAAI,CAAC,UAAU;YACtB,UAAU,EAAE,IAAI,CAAC,eAAe;SACjC,CAAC;QAEF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEhD,MAAM,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,OAAO,EAAE,CAAC;QACvD,MAAM,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,OAAO,EAAE,CAAC;IAC9D,CAAC;IAEM,KAAK,CAAC,YAAY;QACvB,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE,EAAE;YAC1C,MAAM,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACnE;aAAM;YACL,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAChC;IACH,CAAC;CAKF;AAtDD,8BAsDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { ITerminal } from '@rushstack/node-core-library';\nimport { AsyncSeriesBailHook, SyncHook, AsyncSeriesHook } from 'tapable';\n\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { LoggingManager } from '../pluginFramework/logging/LoggingManager';\n\n/**\n * @public\n */\nexport interface IStageContext<\n  TStageHooks extends StageHooksBase<TStageProperties>,\n  TStageProperties extends object\n> {\n  hooks: TStageHooks;\n  properties: TStageProperties;\n}\n\n/**\n * @public\n */\nexport abstract class StageHooksBase<TStageProperties extends object> {\n  /**\n   * This hook allows the stage's execution to be completely overridden. Only the last-registered plugin\n   * with an override hook provided applies.\n   *\n   * @beta\n   */\n  public readonly overrideStage: AsyncSeriesBailHook<TStageProperties> = new AsyncSeriesBailHook([\n    'stageProperties'\n  ]);\n\n  public readonly loadStageConfiguration: AsyncSeriesHook = new AsyncSeriesHook();\n\n  public readonly afterLoadStageConfiguration: AsyncSeriesHook = new AsyncSeriesHook();\n}\n\nexport abstract class StageBase<\n  TStageHooks extends StageHooksBase<TStageProperties>,\n  TStageProperties extends object,\n  TStageOptions\n> {\n  public readonly stageInitializationHook: SyncHook<IStageContext<TStageHooks, TStageProperties>>;\n  protected readonly heftConfiguration: HeftConfiguration;\n  protected readonly loggingManager: LoggingManager;\n  protected readonly globalTerminal: ITerminal;\n  protected stageOptions!: TStageOptions;\n  protected stageProperties!: TStageProperties;\n  protected stageHooks!: TStageHooks;\n  private readonly _innerHooksType: new () => TStageHooks;\n\n  public constructor(\n    heftConfiguration: HeftConfiguration,\n    loggingManager: LoggingManager,\n    innerHooksType: new () => TStageHooks\n  ) {\n    this.heftConfiguration = heftConfiguration;\n    this.loggingManager = loggingManager;\n    this.globalTerminal = heftConfiguration.globalTerminal;\n    this.stageInitializationHook = new SyncHook<IStageContext<TStageHooks, TStageProperties>>([\n      'stageContext'\n    ]);\n    this._innerHooksType = innerHooksType;\n  }\n\n  public async initializeAsync(stageOptions: TStageOptions): Promise<void> {\n    this.stageOptions = stageOptions;\n    this.stageProperties = await this.getDefaultStagePropertiesAsync(this.stageOptions);\n    this.stageHooks = new this._innerHooksType();\n    const stageContext: IStageContext<TStageHooks, TStageProperties> = {\n      hooks: this.stageHooks,\n      properties: this.stageProperties\n    };\n\n    this.stageInitializationHook.call(stageContext);\n\n    await this.stageHooks.loadStageConfiguration.promise();\n    await this.stageHooks.afterLoadStageConfiguration.promise();\n  }\n\n  public async executeAsync(): Promise<void> {\n    if (this.stageHooks.overrideStage.isUsed()) {\n      await this.stageHooks.overrideStage.promise(this.stageProperties);\n    } else {\n      await this.executeInnerAsync();\n    }\n  }\n\n  protected abstract getDefaultStagePropertiesAsync(options: TStageOptions): Promise<TStageProperties>;\n\n  protected abstract executeInnerAsync(): Promise<void>;\n}\n"]}