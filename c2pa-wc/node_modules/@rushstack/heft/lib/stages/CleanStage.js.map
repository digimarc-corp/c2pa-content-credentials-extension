{"version":3,"file":"CleanStage.js","sourceRoot":"","sources":["../../src/stages/CleanStage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,qCAA4C;AAC5C,oEAA0D;AAE1D,2CAAuE;AAIvE;;GAEG;AACH,MAAa,eAAgB,SAAQ,0BAAqC;IAA1E;;QACkB,QAAG,GAAsB,IAAI,2BAAiB,EAAE,CAAC;IACnE,CAAC;CAAA;AAFD,0CAEC;AAmBD,MAAa,UAAW,SAAQ,qBAAqE;IACnG,YAAmB,iBAAoC,EAAE,cAA8B;QACrF,KAAK,CAAC,iBAAiB,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;IAC5D,CAAC;IAES,KAAK,CAAC,8BAA8B,CAC5C,OAA2B;QAE3B,qCACE,WAAW,EAAE,KAAK,IACf,OAAO,KACV,aAAa,EAAE,IAAI,GAAG,EAAU,IAChC;IACJ,CAAC;IAES,KAAK,CAAC,iBAAiB;QAC/B,MAAM,QAAQ,GAAoB,EAAE,CAAC;QAErC,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE;YACpC,QAAQ,CAAC,IAAI,CAAC,8BAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACtF;QAED,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAE7C,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;CACF;AA1BD,gCA0BC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { AsyncParallelHook } from 'tapable';\nimport { FileSystem } from '@rushstack/node-core-library';\n\nimport { StageBase, StageHooksBase, IStageContext } from './StageBase';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { LoggingManager } from '../pluginFramework/logging/LoggingManager';\n\n/**\n * @public\n */\nexport class CleanStageHooks extends StageHooksBase<ICleanStageProperties> {\n  public readonly run: AsyncParallelHook = new AsyncParallelHook();\n}\n\n/**\n * @public\n */\nexport interface ICleanStageProperties {\n  deleteCache: boolean;\n  pathsToDelete: Set<string>;\n}\n\nexport interface ICleanStageOptions {\n  deleteCache?: boolean;\n}\n\n/**\n * @public\n */\nexport interface ICleanStageContext extends IStageContext<CleanStageHooks, ICleanStageProperties> {}\n\nexport class CleanStage extends StageBase<CleanStageHooks, ICleanStageProperties, ICleanStageOptions> {\n  public constructor(heftConfiguration: HeftConfiguration, loggingManager: LoggingManager) {\n    super(heftConfiguration, loggingManager, CleanStageHooks);\n  }\n\n  protected async getDefaultStagePropertiesAsync(\n    options: ICleanStageOptions\n  ): Promise<ICleanStageProperties> {\n    return {\n      deleteCache: false,\n      ...options,\n      pathsToDelete: new Set<string>()\n    };\n  }\n\n  protected async executeInnerAsync(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    if (this.stageProperties.deleteCache) {\n      promises.push(FileSystem.deleteFolderAsync(this.heftConfiguration.buildCacheFolder));\n    }\n\n    promises.push(this.stageHooks.run.promise());\n\n    await Promise.all(promises);\n  }\n}\n"]}