{"version":3,"file":"TypeScriptBuilder.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/TypeScriptBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as crypto from 'crypto';\nimport * as path from 'path';\nimport * as semver from 'semver';\nimport {\n  FileSystemStats,\n  ITerminal,\n  JsonFile,\n  IPackageJson,\n  ITerminalProvider,\n  FileSystem,\n  Path,\n  Async,\n  FileError\n} from '@rushstack/node-core-library';\nimport type * as TTypescript from 'typescript';\nimport {\n  ExtendedTypeScript,\n  IExtendedProgram,\n  IExtendedSourceFile\n} from './internalTypings/TypeScriptInternals';\n\nimport {\n  ISubprocessRunnerBaseConfiguration,\n  SubprocessRunnerBase\n} from '../../utilities/subprocess/SubprocessRunnerBase';\nimport { PerformanceMeasurer, PerformanceMeasurerAsync } from '../../utilities/Performance';\nimport { Tslint } from './Tslint';\nimport { Eslint } from './Eslint';\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\n\nimport { EmitFilesPatch, ICachedEmitModuleKind } from './EmitFilesPatch';\nimport { HeftSession } from '../../pluginFramework/HeftSession';\nimport { EmitCompletedCallbackManager } from './EmitCompletedCallbackManager';\nimport { ISharedTypeScriptConfiguration } from './TypeScriptPlugin';\nimport { TypeScriptCachedFileSystem } from '../../utilities/fileSystem/TypeScriptCachedFileSystem';\nimport { LinterBase } from './LinterBase';\n\ninterface ILinterWrapper {\n  ts: ExtendedTypeScript;\n  logger: IScopedLogger;\n  measureTsPerformance: PerformanceMeasurer;\n  measureTsPerformanceAsync: PerformanceMeasurerAsync;\n}\n\nexport interface ITypeScriptBuilderConfiguration\n  extends ISharedTypeScriptConfiguration,\n    ISubprocessRunnerBaseConfiguration {\n  /**\n   * The folder to write build metadata.\n   */\n  buildMetadataFolder: string;\n  typeScriptToolPath: string;\n  tslintToolPath: string | undefined;\n  eslintToolPath: string | undefined;\n\n  lintingEnabled: boolean;\n\n  watchMode: boolean;\n\n  /**\n   * The path to the tsconfig file being built.\n   */\n  tsconfigPath: string;\n\n  /**\n   * Set this to change the maximum number of file handles that will be opened concurrently for writing.\n   * The default is 50.\n   */\n  maxWriteParallelism: number;\n}\n\ntype TWatchCompilerHost =\n  TTypescript.WatchCompilerHostOfFilesAndCompilerOptions<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram>;\ntype TSolutionHost = TTypescript.SolutionBuilderHost<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram>;\ntype TWatchSolutionHost =\n  TTypescript.SolutionBuilderWithWatchHost<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram>;\n\nconst EMPTY_JSON: object = {};\n\ninterface ICompilerCapabilities {\n  /**\n   * Support for incremental compilation via `ts.createIncrementalProgram()`.\n   * Introduced with TypeScript 3.6.\n   */\n  incrementalProgram: boolean;\n\n  /**\n   * Support for composite projects via `ts.createSolutionBuilder()`.\n   * Introduced with TypeScript 3.0.\n   */\n  solutionBuilder: boolean;\n}\n\ninterface IFileToWrite {\n  filePath: string;\n  data: string;\n}\n\ninterface IModuleKindReason {\n  kind: keyof typeof TTypescript.ModuleKind;\n  outDir: string;\n  extension: '.js' | '.cjs' | '.mjs';\n  reason: string;\n}\n\ninterface IExtendedEmitResult extends TTypescript.EmitResult {\n  changedSourceFiles: Set<IExtendedSourceFile>;\n  filesToWrite: IFileToWrite[];\n}\n\nconst OLDEST_SUPPORTED_TS_MAJOR_VERSION: number = 2;\nconst OLDEST_SUPPORTED_TS_MINOR_VERSION: number = 9;\n\nconst NEWEST_SUPPORTED_TS_MAJOR_VERSION: number = 4;\nconst NEWEST_SUPPORTED_TS_MINOR_VERSION: number = 7;\n\nexport class TypeScriptBuilder extends SubprocessRunnerBase<ITypeScriptBuilderConfiguration> {\n  private _typescriptVersion!: string;\n  private _typescriptParsedVersion!: semver.SemVer;\n\n  private _capabilities!: ICompilerCapabilities;\n  private _useSolutionBuilder!: boolean;\n\n  private _eslintEnabled!: boolean;\n  private _tslintEnabled!: boolean;\n  private _moduleKindsToEmit!: ICachedEmitModuleKind[];\n  private _eslintConfigFilePath!: string;\n  private _tslintConfigFilePath!: string;\n  private _typescriptLogger!: IScopedLogger;\n  private _typescriptTerminal!: ITerminal;\n  private _emitCompletedCallbackManager: EmitCompletedCallbackManager;\n\n  private __tsCacheFilePath: string | undefined;\n  private _tsReadJsonCache: Map<string, object> = new Map<string, object>();\n  private _cachedFileSystem: TypeScriptCachedFileSystem = new TypeScriptCachedFileSystem();\n\n  public get filename(): string {\n    return __filename;\n  }\n\n  private get _tsCacheFilePath(): string {\n    if (!this.__tsCacheFilePath) {\n      // TypeScript internally handles if the tsconfig options have changed from when the tsbuildinfo file was created.\n      // We only need to hash our additional Heft configuration.\n      const configHash: crypto.Hash = crypto.createHash('sha1');\n\n      configHash.update(JSON.stringify(this._configuration.additionalModuleKindsToEmit || {}));\n      const serializedConfigHash: string = configHash\n        .digest('base64')\n        .slice(0, 8)\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_');\n\n      // This conversion is theoretically redundant, but it is here to make absolutely sure that the path is formatted\n      // using only '/' as the directory separator so that incremental builds don't break on Windows.\n      // TypeScript will normalize to '/' when serializing, but not on the direct input, and uses exact string equality.\n      const normalizedCacheFolder: string = Path.convertToSlashes(this._configuration.buildMetadataFolder);\n      this.__tsCacheFilePath = `${normalizedCacheFolder}/ts_${serializedConfigHash}.json`;\n    }\n\n    return this.__tsCacheFilePath;\n  }\n\n  public constructor(\n    parentGlobalTerminalProvider: ITerminalProvider,\n    configuration: ITypeScriptBuilderConfiguration,\n    heftSession: HeftSession,\n    emitCallback: () => void\n  ) {\n    super(parentGlobalTerminalProvider, configuration, heftSession);\n\n    this._emitCompletedCallbackManager = new EmitCompletedCallbackManager(emitCallback);\n    this.registerSubprocessCommunicationManager(this._emitCompletedCallbackManager);\n  }\n\n  public async invokeAsync(): Promise<void> {\n    this._typescriptLogger = await this.requestScopedLoggerAsync('typescript');\n    this._typescriptTerminal = this._typescriptLogger.terminal;\n\n    // Determine the compiler version\n    const compilerPackageJsonFilename: string = path.join(\n      this._configuration.typeScriptToolPath,\n      'package.json'\n    );\n    const packageJson: IPackageJson = JsonFile.load(compilerPackageJsonFilename);\n    this._typescriptVersion = packageJson.version;\n    const parsedVersion: semver.SemVer | null = semver.parse(this._typescriptVersion);\n    if (!parsedVersion) {\n      throw new Error(\n        `Unable to parse version \"${this._typescriptVersion}\" for TypeScript compiler package in: ` +\n          compilerPackageJsonFilename\n      );\n    }\n    this._typescriptParsedVersion = parsedVersion;\n\n    // Detect what features this compiler supports.  Note that manually comparing major/minor numbers\n    // loosens the matching to accept prereleases such as \"3.6.0-dev.20190530\"\n    this._capabilities = {\n      incrementalProgram: false,\n      solutionBuilder: this._typescriptParsedVersion.major >= 3\n    };\n\n    if (\n      this._typescriptParsedVersion.major > 3 ||\n      (this._typescriptParsedVersion.major === 3 && this._typescriptParsedVersion.minor >= 6)\n    ) {\n      this._capabilities.incrementalProgram = true;\n    }\n\n    this._useSolutionBuilder = !!this._configuration.buildProjectReferences;\n    if (this._useSolutionBuilder && !this._capabilities.solutionBuilder) {\n      throw new Error(\n        `Building project references requires TypeScript@>=3.0, but the current version is ${this._typescriptVersion}`\n      );\n    }\n\n    this._tslintConfigFilePath = path.resolve(this._configuration.buildFolder, 'tslint.json');\n    this._eslintEnabled = this._tslintEnabled =\n      this._configuration.lintingEnabled && !this._configuration.watchMode; // Don't run lint in watch mode\n\n    if (this._tslintEnabled) {\n      this._tslintEnabled = this._cachedFileSystem.exists(this._tslintConfigFilePath);\n    }\n\n    this._eslintConfigFilePath = this._resolveEslintConfigFilePath(this._eslintEnabled);\n    if (this._eslintEnabled) {\n      this._eslintEnabled = this._cachedFileSystem.exists(this._eslintConfigFilePath);\n    }\n\n    // Report a warning if the TypeScript version is too old/new.  The current oldest supported version is\n    // TypeScript 2.9. Prior to that the \"ts.getConfigFileParsingDiagnostics()\" API is missing; more fixups\n    // would be required to deal with that.  We won't do that work unless someone requests it.\n    if (\n      this._typescriptParsedVersion.major < OLDEST_SUPPORTED_TS_MAJOR_VERSION ||\n      (this._typescriptParsedVersion.major === OLDEST_SUPPORTED_TS_MAJOR_VERSION &&\n        this._typescriptParsedVersion.minor < OLDEST_SUPPORTED_TS_MINOR_VERSION)\n    ) {\n      // We don't use writeWarningLine() here because, if the person wants to take their chances with\n      // a seemingly unsupported compiler, their build should be allowed to succeed.\n      this._typescriptTerminal.writeLine(\n        `The TypeScript compiler version ${this._typescriptVersion} is very old` +\n          ` and has not been tested with Heft; it may not work correctly.`\n      );\n    } else if (\n      this._typescriptParsedVersion.major > NEWEST_SUPPORTED_TS_MAJOR_VERSION ||\n      (this._typescriptParsedVersion.major === NEWEST_SUPPORTED_TS_MAJOR_VERSION &&\n        this._typescriptParsedVersion.minor > NEWEST_SUPPORTED_TS_MINOR_VERSION)\n    ) {\n      this._typescriptTerminal.writeLine(\n        `The TypeScript compiler version ${this._typescriptVersion} is newer` +\n          ' than the latest version that was tested with Heft ' +\n          `(${NEWEST_SUPPORTED_TS_MAJOR_VERSION}.${NEWEST_SUPPORTED_TS_MINOR_VERSION}); it may not work correctly.`\n      );\n    }\n\n    const ts: ExtendedTypeScript = require(this._configuration.typeScriptToolPath);\n\n    ts.performance.enable();\n\n    const measureTsPerformance: PerformanceMeasurer = <TResult extends object | void>(\n      measurementName: string,\n      fn: () => TResult\n    ) => {\n      const beforeName: string = `before${measurementName}`;\n      ts.performance.mark(beforeName);\n      const result: TResult = fn();\n      const afterName: string = `after${measurementName}`;\n      ts.performance.mark(afterName);\n      ts.performance.measure(measurementName, beforeName, afterName);\n      return {\n        ...result,\n        duration: ts.performance.getDuration(measurementName),\n        count: ts.performance.getCount(beforeName)\n      };\n    };\n\n    const measureTsPerformanceAsync: PerformanceMeasurerAsync = async <TResult extends object | void>(\n      measurementName: string,\n      fn: () => Promise<TResult>\n    ) => {\n      const beforeName: string = `before${measurementName}`;\n      ts.performance.mark(beforeName);\n      const resultPromise: Promise<TResult> = fn();\n      const result: TResult = await resultPromise;\n      const afterName: string = `after${measurementName}`;\n      ts.performance.mark(afterName);\n      ts.performance.measure(measurementName, beforeName, afterName);\n      return {\n        ...result,\n        duration: ts.performance.getDuration(measurementName)\n      };\n    };\n\n    this._typescriptTerminal.writeLine(`Using TypeScript version ${ts.version}`);\n\n    if (this._configuration.watchMode) {\n      await this._runWatch(ts, measureTsPerformance);\n    } else if (this._useSolutionBuilder) {\n      await this._runSolutionBuildAsync(ts, measureTsPerformance, measureTsPerformanceAsync);\n    } else {\n      await this._runBuildAsync(ts, measureTsPerformance, measureTsPerformanceAsync);\n    }\n  }\n\n  private _resolveEslintConfigFilePath(eslintEnabled: boolean): string {\n    const defaultPath: string = path.resolve(this._configuration.buildFolder, '.eslintrc.js');\n    if (!eslintEnabled) {\n      return defaultPath; // No need to check the filesystem\n    }\n    // When project is configured with \"type\": \"module\" in package.json, the config file must have a .cjs extension\n    // so use it if it exists\n    const alternativePathPath: string = path.resolve(this._configuration.buildFolder, '.eslintrc.cjs');\n    if (this._cachedFileSystem.exists(alternativePathPath)) {\n      return alternativePathPath;\n    }\n    return defaultPath;\n  }\n\n  public async _runWatch(ts: ExtendedTypeScript, measureTsPerformance: PerformanceMeasurer): Promise<void> {\n    //#region CONFIGURE\n    const { duration: configureDurationMs, tsconfig } = measureTsPerformance('Configure', () => {\n      const _tsconfig: TTypescript.ParsedCommandLine = this._loadTsconfig(ts);\n      this._validateTsconfig(ts, _tsconfig);\n      EmitFilesPatch.install(ts, _tsconfig, this._moduleKindsToEmit);\n\n      return {\n        tsconfig: _tsconfig\n      };\n    });\n    this._typescriptTerminal.writeVerboseLine(`Configure: ${configureDurationMs}ms`);\n    //#endregion\n\n    if (this._useSolutionBuilder) {\n      const solutionHost: TWatchSolutionHost = this._buildWatchSolutionBuilderHost(ts);\n      const watchBuilder: TTypescript.SolutionBuilder<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram> =\n        ts.createSolutionBuilderWithWatch(solutionHost, [this._configuration.tsconfigPath], {});\n\n      watchBuilder.build();\n    } else {\n      const compilerHost: TWatchCompilerHost = this._buildWatchCompilerHost(ts, tsconfig);\n      ts.createWatchProgram(compilerHost);\n    }\n\n    return new Promise(() => {\n      /* never terminate */\n    });\n  }\n\n  public async _runBuildAsync(\n    ts: ExtendedTypeScript,\n    measureTsPerformance: PerformanceMeasurer,\n    measureTsPerformanceAsync: PerformanceMeasurerAsync\n  ): Promise<void> {\n    //#region CONFIGURE\n    const {\n      duration: configureDurationMs,\n      tsconfig,\n      compilerHost\n    } = measureTsPerformance('Configure', () => {\n      this._overrideTypeScriptReadJson(ts);\n      const _tsconfig: TTypescript.ParsedCommandLine = this._loadTsconfig(ts);\n      this._validateTsconfig(ts, _tsconfig);\n\n      const _compilerHost: TTypescript.CompilerHost = this._buildIncrementalCompilerHost(ts, _tsconfig);\n\n      return {\n        tsconfig: _tsconfig,\n        compilerHost: _compilerHost\n      };\n    });\n    this._typescriptTerminal.writeVerboseLine(`Configure: ${configureDurationMs}ms`);\n    //#endregion\n\n    //#region PROGRAM\n    // There will be only one program here; emit will get a bit abused if we produce multiple outputs\n    let builderProgram: TTypescript.BuilderProgram | undefined = undefined;\n    let tsProgram: TTypescript.Program;\n\n    if (tsconfig.options.incremental) {\n      builderProgram = ts.createIncrementalProgram({\n        rootNames: tsconfig.fileNames,\n        options: tsconfig.options,\n        projectReferences: tsconfig.projectReferences,\n        host: compilerHost,\n        configFileParsingDiagnostics: ts.getConfigFileParsingDiagnostics(tsconfig)\n      });\n      tsProgram = builderProgram.getProgram();\n    } else {\n      tsProgram = ts.createProgram({\n        rootNames: tsconfig.fileNames,\n        options: tsconfig.options,\n        projectReferences: tsconfig.projectReferences,\n        host: compilerHost,\n        configFileParsingDiagnostics: ts.getConfigFileParsingDiagnostics(tsconfig)\n      });\n    }\n\n    // Prefer the builder program, since it is what gives us incremental builds\n    const genericProgram: TTypescript.BuilderProgram | TTypescript.Program = builderProgram || tsProgram;\n\n    this._logReadPerformance(ts);\n    //#endregion\n\n    //#region ANALYSIS\n    const { duration: diagnosticsDurationMs, diagnostics: preDiagnostics } = measureTsPerformance(\n      'Analyze',\n      () => {\n        const rawDiagnostics: TTypescript.Diagnostic[] = [\n          ...genericProgram.getConfigFileParsingDiagnostics(),\n          ...genericProgram.getOptionsDiagnostics(),\n          ...genericProgram.getSyntacticDiagnostics(),\n          ...genericProgram.getGlobalDiagnostics(),\n          ...genericProgram.getSemanticDiagnostics()\n        ];\n        return { diagnostics: rawDiagnostics };\n      }\n    );\n    this._typescriptTerminal.writeVerboseLine(`Analyze: ${diagnosticsDurationMs}ms`);\n    //#endregion\n\n    //#region EMIT\n    const emitResult: IExtendedEmitResult = this._emit(ts, tsconfig, genericProgram);\n    //#endregion\n\n    this._logEmitPerformance(ts);\n\n    //#region FINAL_ANALYSIS\n    // Need to ensure that we include emit diagnostics, since they might not be part of the other sets\n    const rawDiagnostics: TTypescript.Diagnostic[] = [...preDiagnostics, ...emitResult.diagnostics];\n    //#endregion\n\n    //#region WRITE\n    // Using async file system I/O for theoretically better peak performance\n    // Also allows to run concurrently with linting\n    const writePromise: Promise<{ duration: number }> = measureTsPerformanceAsync('Write', () =>\n      Async.forEachAsync(\n        emitResult.filesToWrite,\n        async ({ filePath, data }: { filePath: string; data: string }) =>\n          this._cachedFileSystem.writeFile(filePath, data, { ensureFolderExists: true }),\n        { concurrency: this._configuration.maxWriteParallelism }\n      )\n    );\n    //#endregion\n\n    const [eslint, tslint] = await Promise.all([\n      this._initESlintAsync(ts, measureTsPerformance, measureTsPerformanceAsync),\n      this._initTSlintAsync(ts, measureTsPerformance, measureTsPerformanceAsync)\n    ]);\n    const lintPromises: Promise<LinterBase<unknown>>[] = [];\n\n    const extendedProgram: IExtendedProgram = tsProgram as IExtendedProgram;\n    //#region ESLINT\n    if (eslint) {\n      lintPromises.push(this._runESlintAsync(eslint, extendedProgram, emitResult.changedSourceFiles));\n    }\n    //#endregion\n\n    //#region TSLINT\n    if (tslint) {\n      lintPromises.push(this._runTSlintAsync(tslint, extendedProgram, emitResult.changedSourceFiles));\n    }\n    //#endregion\n\n    const { duration: writeDuration } = await writePromise;\n    this._typescriptTerminal.writeVerboseLine(\n      `I/O Write: ${writeDuration}ms (${emitResult.filesToWrite.length} files)`\n    );\n\n    // In non-watch mode, notify EmitCompletedCallbackManager once after we complete the compile step\n    this._emitCompletedCallbackManager.callback();\n\n    const linters: LinterBase<unknown>[] = await Promise.all(lintPromises);\n\n    this._logDiagnostics(ts, rawDiagnostics, linters);\n  }\n\n  public async _runSolutionBuildAsync(\n    ts: ExtendedTypeScript,\n    measureTsPerformance: PerformanceMeasurer,\n    measureTsPerformanceAsync: PerformanceMeasurerAsync\n  ): Promise<void> {\n    this._typescriptTerminal.writeVerboseLine(`Using solution mode`);\n\n    const lintPromises: Promise<LinterBase<unknown>>[] = [];\n\n    //#region CONFIGURE\n    const {\n      duration: configureDurationMs,\n      rawDiagnostics,\n      solutionBuilderHost\n    } = await measureTsPerformanceAsync('Configure', async () => {\n      this._overrideTypeScriptReadJson(ts);\n      const _tsconfig: TTypescript.ParsedCommandLine = this._loadTsconfig(ts);\n      this._validateTsconfig(ts, _tsconfig);\n\n      const _rawDiagnostics: TTypescript.Diagnostic[] = [];\n      const reportDiagnostic: TTypescript.DiagnosticReporter = (diagnostic: TTypescript.Diagnostic) => {\n        _rawDiagnostics.push(diagnostic);\n      };\n\n      const [eslint, tslint] = await Promise.all([\n        this._initESlintAsync(ts, measureTsPerformance, measureTsPerformanceAsync),\n        this._initTSlintAsync(ts, measureTsPerformance, measureTsPerformanceAsync)\n      ]);\n\n      // TypeScript doesn't have a\n      EmitFilesPatch.install(ts, _tsconfig, this._moduleKindsToEmit);\n\n      const _solutionBuilderHost: TSolutionHost = this._buildSolutionBuilderHost(ts, reportDiagnostic);\n\n      _solutionBuilderHost.afterProgramEmitAndDiagnostics = (\n        program: TTypescript.EmitAndSemanticDiagnosticsBuilderProgram\n      ) => {\n        const tsProgram: TTypescript.Program | undefined = program.getProgram();\n\n        if (tsProgram) {\n          const extendedProgram: IExtendedProgram = tsProgram as IExtendedProgram;\n          if (eslint) {\n            lintPromises.push(this._runESlintAsync(eslint, extendedProgram));\n          }\n\n          if (tslint) {\n            lintPromises.push(this._runTSlintAsync(tslint, extendedProgram));\n          }\n        }\n      };\n\n      return {\n        rawDiagnostics: _rawDiagnostics,\n        solutionBuilderHost: _solutionBuilderHost\n      };\n    });\n    this._typescriptTerminal.writeVerboseLine(`Configure: ${configureDurationMs}ms`);\n    //#endregion\n\n    const solutionBuilder: TTypescript.SolutionBuilder<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram> =\n      ts.createSolutionBuilder(solutionBuilderHost, [this._configuration.tsconfigPath], {});\n\n    //#region EMIT\n    // Ignoring the exit status because we only care about presence of diagnostics\n    solutionBuilder.build();\n    //#endregion\n\n    this._logReadPerformance(ts);\n    this._logEmitPerformance(ts);\n    // Use the native metric since we aren't overwriting the writer\n    this._typescriptTerminal.writeVerboseLine(\n      `I/O Write: ${ts.performance.getDuration('I/O Write')}ms (${ts.performance.getCount(\n        'beforeIOWrite'\n      )} files)`\n    );\n\n    // In non-watch mode, notify EmitCompletedCallbackManager once after we complete the compile step\n    this._emitCompletedCallbackManager.callback();\n\n    const linters: LinterBase<unknown>[] = await Promise.all(lintPromises);\n\n    this._logDiagnostics(ts, rawDiagnostics, linters);\n\n    EmitFilesPatch.uninstall(ts);\n  }\n\n  private _logDiagnostics(\n    ts: ExtendedTypeScript,\n    rawDiagnostics: readonly TTypescript.Diagnostic[],\n    linters: LinterBase<unknown>[]\n  ): void {\n    const diagnostics: readonly TTypescript.Diagnostic[] = ts.sortAndDeduplicateDiagnostics(rawDiagnostics);\n\n    let typeScriptErrorCount: number = 0;\n    if (diagnostics.length > 0) {\n      this._typescriptTerminal.writeLine(\n        `Encountered ${diagnostics.length} TypeScript issue${diagnostics.length > 1 ? 's' : ''}:`\n      );\n      for (const diagnostic of diagnostics) {\n        const diagnosticCategory: TTypescript.DiagnosticCategory = this._getAdjustedDiagnosticCategory(\n          diagnostic,\n          ts\n        );\n\n        if (diagnosticCategory === ts.DiagnosticCategory.Error) {\n          typeScriptErrorCount++;\n        }\n\n        this._printDiagnosticMessage(ts, diagnostic, diagnosticCategory);\n      }\n    }\n\n    for (const linter of linters) {\n      linter.reportFailures();\n    }\n\n    if (typeScriptErrorCount > 0) {\n      throw new Error(`Encountered TypeScript error${typeScriptErrorCount > 1 ? 's' : ''}`);\n    }\n  }\n\n  private _logEmitPerformance(ts: ExtendedTypeScript): void {\n    this._typescriptTerminal.writeVerboseLine(`Bind: ${ts.performance.getDuration('Bind')}ms`);\n    this._typescriptTerminal.writeVerboseLine(`Check: ${ts.performance.getDuration('Check')}ms`);\n    this._typescriptTerminal.writeVerboseLine(\n      `Transform: ${ts.performance.getDuration('transformTime')}ms ` +\n        `(${ts.performance.getCount('beforeTransform')} files)`\n    );\n    this._typescriptTerminal.writeVerboseLine(\n      `Print: ${ts.performance.getDuration('printTime')}ms ` +\n        `(${ts.performance.getCount('beforePrint')} files) (Includes Transform)`\n    );\n    this._typescriptTerminal.writeVerboseLine(\n      `Emit: ${ts.performance.getDuration('Emit')}ms (Includes Print)`\n    );\n  }\n\n  private _logReadPerformance(ts: ExtendedTypeScript): void {\n    this._typescriptTerminal.writeVerboseLine(\n      `I/O Read: ${ts.performance.getDuration('I/O Read')}ms (${ts.performance.getCount(\n        'beforeIORead'\n      )} files)`\n    );\n    this._typescriptTerminal.writeVerboseLine(\n      `Parse: ${ts.performance.getDuration('Parse')}ms (${ts.performance.getCount('beforeParse')} files)`\n    );\n    this._typescriptTerminal.writeVerboseLine(\n      `Program (includes Read + Parse): ${ts.performance.getDuration('Program')}ms`\n    );\n  }\n\n  private async _initTSlintAsync(\n    ts: ExtendedTypeScript,\n    measureTsPerformance: PerformanceMeasurer,\n    measureTsPerformanceAsync: PerformanceMeasurerAsync\n  ): Promise<ILinterWrapper | undefined> {\n    if (this._tslintEnabled) {\n      if (!this._configuration.tslintToolPath) {\n        throw new Error('Unable to resolve \"tslint\" package');\n      }\n\n      const logger: IScopedLogger = await this.requestScopedLoggerAsync('tslint');\n      return {\n        logger,\n        ts,\n        measureTsPerformance,\n        measureTsPerformanceAsync\n      };\n    }\n  }\n\n  private async _initESlintAsync(\n    ts: ExtendedTypeScript,\n    measureTsPerformance: PerformanceMeasurer,\n    measureTsPerformanceAsync: PerformanceMeasurerAsync\n  ): Promise<ILinterWrapper | undefined> {\n    if (this._eslintEnabled) {\n      if (!this._configuration.eslintToolPath) {\n        throw new Error('Unable to resolve \"eslint\" package');\n      }\n\n      const logger: IScopedLogger = await this.requestScopedLoggerAsync('eslint');\n      return {\n        logger,\n        ts,\n        measureTsPerformance,\n        measureTsPerformanceAsync\n      };\n    }\n  }\n\n  private async _runESlintAsync(\n    linter: ILinterWrapper,\n    tsProgram: IExtendedProgram,\n    changedFiles?: Set<IExtendedSourceFile> | undefined\n  ): Promise<Eslint> {\n    const eslint: Eslint = new Eslint({\n      ts: linter.ts,\n      scopedLogger: linter.logger,\n      buildFolderPath: this._configuration.buildFolder,\n      buildMetadataFolderPath: this._configuration.buildMetadataFolder,\n      linterConfigFilePath: this._eslintConfigFilePath,\n      measurePerformance: linter.measureTsPerformance,\n      measurePerformanceAsync: linter.measureTsPerformanceAsync,\n      eslintPackagePath: this._configuration.eslintToolPath!\n    });\n\n    eslint.printVersionHeader();\n\n    const typeScriptFilenames: Set<string> = new Set(tsProgram.getRootFileNames());\n    await eslint.performLintingAsync({\n      tsProgram,\n      typeScriptFilenames,\n      changedFiles: changedFiles || new Set(tsProgram.getSourceFiles())\n    });\n\n    return eslint;\n  }\n\n  private async _runTSlintAsync(\n    linter: ILinterWrapper,\n    tsProgram: IExtendedProgram,\n    changedFiles?: Set<IExtendedSourceFile> | undefined\n  ): Promise<Tslint> {\n    const tslint: Tslint = new Tslint({\n      ts: linter.ts,\n      scopedLogger: linter.logger,\n      buildFolderPath: this._configuration.buildFolder,\n      buildMetadataFolderPath: this._configuration.buildMetadataFolder,\n      linterConfigFilePath: this._tslintConfigFilePath,\n      measurePerformance: linter.measureTsPerformance,\n      measurePerformanceAsync: linter.measureTsPerformanceAsync,\n      cachedFileSystem: this._cachedFileSystem,\n      tslintPackagePath: this._configuration.tslintToolPath!\n    });\n\n    tslint.printVersionHeader();\n\n    const typeScriptFilenames: Set<string> = new Set(tsProgram.getRootFileNames());\n    await tslint.performLintingAsync({\n      tsProgram,\n      typeScriptFilenames,\n      changedFiles: changedFiles || new Set(tsProgram.getSourceFiles())\n    });\n\n    return tslint;\n  }\n\n  private _printDiagnosticMessage(\n    ts: ExtendedTypeScript,\n    diagnostic: TTypescript.Diagnostic,\n    diagnosticCategory: TTypescript.DiagnosticCategory = this._getAdjustedDiagnosticCategory(diagnostic, ts)\n  ): void {\n    // Code taken from reference example\n    let diagnosticMessage: string;\n    let errorObject: Error;\n    if (diagnostic.file) {\n      const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!);\n      const message: string = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n      const formattedMessage: string = `(TS${diagnostic.code}) ${message}`;\n      errorObject = new FileError(formattedMessage, {\n        absolutePath: diagnostic.file.fileName,\n        projectFolder: this._configuration.buildFolder,\n        line: line + 1,\n        column: character + 1\n      });\n      diagnosticMessage = errorObject.toString();\n    } else {\n      diagnosticMessage = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n      errorObject = new Error(diagnosticMessage);\n    }\n\n    switch (diagnosticCategory) {\n      case ts.DiagnosticCategory.Error: {\n        this._typescriptLogger.emitError(errorObject);\n        break;\n      }\n\n      case ts.DiagnosticCategory.Warning: {\n        this._typescriptLogger.emitWarning(errorObject);\n        break;\n      }\n\n      default: {\n        this._typescriptTerminal.writeLine(...diagnosticMessage);\n        break;\n      }\n    }\n  }\n\n  private _getAdjustedDiagnosticCategory(\n    diagnostic: TTypescript.Diagnostic,\n    ts: ExtendedTypeScript\n  ): TTypescript.DiagnosticCategory {\n    // Workaround for https://github.com/microsoft/TypeScript/issues/40058\n    // The compiler reports a hard error for issues such as this:\n    //\n    //    error TS6133: 'x' is declared but its value is never read.\n    //\n    // These should properly be treated as warnings, because they are purely cosmetic issues.\n    // TODO: Maybe heft should provide a config file for managing DiagnosticCategory mappings.\n    if (diagnostic.reportsUnnecessary && diagnostic.category === ts.DiagnosticCategory.Error) {\n      return ts.DiagnosticCategory.Warning;\n    }\n\n    // These pedantic checks also should not be treated as hard errors\n    switch (diagnostic.code) {\n      case ts.Diagnostics.Property_0_has_no_initializer_and_is_not_definitely_assigned_in_the_constructor\n        .code:\n      case ts.Diagnostics\n        .Element_implicitly_has_an_any_type_because_expression_of_type_0_can_t_be_used_to_index_type_1.code:\n        return ts.DiagnosticCategory.Warning;\n    }\n\n    return diagnostic.category;\n  }\n\n  private _emit(\n    ts: ExtendedTypeScript,\n    tsconfig: TTypescript.ParsedCommandLine,\n    genericProgram: TTypescript.BuilderProgram | TTypescript.Program\n  ): IExtendedEmitResult {\n    const filesToWrite: IFileToWrite[] = [];\n\n    const changedFiles: Set<IExtendedSourceFile> = new Set<IExtendedSourceFile>();\n    EmitFilesPatch.install(ts, tsconfig, this._moduleKindsToEmit, changedFiles);\n\n    const writeFileCallback: TTypescript.WriteFileCallback = (filePath: string, data: string) => {\n      filesToWrite.push({ filePath, data });\n    };\n\n    const result: TTypescript.EmitResult = genericProgram.emit(\n      undefined, // Target source file\n      writeFileCallback\n    );\n\n    EmitFilesPatch.uninstall(ts);\n\n    return {\n      ...result,\n      changedSourceFiles: changedFiles,\n      filesToWrite\n    };\n  }\n\n  private _validateTsconfig(ts: ExtendedTypeScript, tsconfig: TTypescript.ParsedCommandLine): void {\n    if (\n      (tsconfig.options.module && !tsconfig.options.outDir) ||\n      (!tsconfig.options.module && tsconfig.options.outDir)\n    ) {\n      throw new Error(\n        'If either the module or the outDir option is provided in the tsconfig compilerOptions, both must be provided'\n      );\n    }\n\n    this._moduleKindsToEmit = [];\n    const specifiedKinds: Map<TTypescript.ModuleKind, IModuleKindReason> = new Map();\n    const specifiedOutDirs: Map<string, IModuleKindReason> = new Map();\n\n    if (!tsconfig.options.module) {\n      throw new Error(\n        'If the module tsconfig compilerOption is not provided, the builder must be provided with the ' +\n          'additionalModuleKindsToEmit configuration option.'\n      );\n    }\n\n    if (this._configuration.emitCjsExtensionForCommonJS) {\n      this._addModuleKindToEmit(\n        ts.ModuleKind.CommonJS,\n        tsconfig.options.outDir!,\n        /* isPrimary */ tsconfig.options.module === ts.ModuleKind.CommonJS,\n        '.cjs'\n      );\n\n      const cjsReason: IModuleKindReason = {\n        outDir: tsconfig.options.outDir!,\n        kind: 'CommonJS',\n        extension: '.cjs',\n        reason: 'emitCjsExtensionForCommonJS'\n      };\n\n      specifiedKinds.set(ts.ModuleKind.CommonJS, cjsReason);\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.cjs`, cjsReason);\n    }\n\n    if (this._configuration.emitMjsExtensionForESModule) {\n      this._addModuleKindToEmit(\n        ts.ModuleKind.ESNext,\n        tsconfig.options.outDir!,\n        /* isPrimary */ tsconfig.options.module === ts.ModuleKind.ESNext,\n        '.mjs'\n      );\n\n      const mjsReason: IModuleKindReason = {\n        outDir: tsconfig.options.outDir!,\n        kind: 'ESNext',\n        extension: '.mjs',\n        reason: 'emitMjsExtensionForESModule'\n      };\n\n      specifiedKinds.set(ts.ModuleKind.ESNext, mjsReason);\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.mjs`, mjsReason);\n    }\n\n    if (!specifiedKinds.has(tsconfig.options.module)) {\n      this._addModuleKindToEmit(\n        tsconfig.options.module,\n        tsconfig.options.outDir!,\n        /* isPrimary */ true,\n        /* jsExtensionOverride */ undefined\n      );\n\n      const tsConfigReason: IModuleKindReason = {\n        outDir: tsconfig.options.outDir!,\n        kind: ts.ModuleKind[tsconfig.options.module] as keyof typeof TTypescript.ModuleKind,\n        extension: '.js',\n        reason: 'tsconfig.json'\n      };\n\n      specifiedKinds.set(tsconfig.options.module, tsConfigReason);\n      specifiedOutDirs.set(`${tsconfig.options.outDir!}:.js`, tsConfigReason);\n    }\n\n    if (this._configuration.additionalModuleKindsToEmit) {\n      for (const additionalModuleKindToEmit of this._configuration.additionalModuleKindsToEmit) {\n        const moduleKind: TTypescript.ModuleKind = this._parseModuleKind(\n          ts,\n          additionalModuleKindToEmit.moduleKind\n        );\n\n        const outDirKey: string = `${additionalModuleKindToEmit.outFolderName}:.js`;\n        const moduleKindReason: IModuleKindReason = {\n          kind: ts.ModuleKind[moduleKind] as keyof typeof TTypescript.ModuleKind,\n          outDir: additionalModuleKindToEmit.outFolderName,\n          extension: '.js',\n          reason: `additionalModuleKindsToEmit`\n        };\n\n        const existingKind: IModuleKindReason | undefined = specifiedKinds.get(moduleKind);\n        const existingDir: IModuleKindReason | undefined = specifiedOutDirs.get(outDirKey);\n\n        if (existingKind) {\n          throw new Error(\n            `Module kind \"${additionalModuleKindToEmit.moduleKind}\" is already emitted at ${existingKind.outDir} with extension '${existingKind.extension}' by option ${existingKind.reason}.`\n          );\n        } else if (existingDir) {\n          throw new Error(\n            `Output folder \"${additionalModuleKindToEmit.outFolderName}\" already contains module kind ${existingDir.kind} with extension '${existingDir.extension}', specified by option ${existingDir.reason}.`\n          );\n        } else {\n          const outFolderKey: string | undefined = this._addModuleKindToEmit(\n            moduleKind,\n            additionalModuleKindToEmit.outFolderName,\n            /* isPrimary */ false,\n            undefined\n          );\n\n          if (outFolderKey) {\n            specifiedKinds.set(moduleKind, moduleKindReason);\n            specifiedOutDirs.set(outFolderKey, moduleKindReason);\n          }\n        }\n      }\n    }\n  }\n\n  private _addModuleKindToEmit(\n    moduleKind: TTypescript.ModuleKind,\n    outFolderPath: string,\n    isPrimary: boolean,\n    jsExtensionOverride: string | undefined\n  ): string | undefined {\n    let outFolderName: string;\n    if (path.isAbsolute(outFolderPath)) {\n      outFolderName = path.relative(this._configuration.buildFolder, outFolderPath);\n    } else {\n      outFolderName = outFolderPath;\n      outFolderPath = path.resolve(this._configuration.buildFolder, outFolderPath);\n    }\n\n    outFolderPath = Path.convertToSlashes(outFolderPath);\n    outFolderPath = outFolderPath.replace(/\\/*$/, '/'); // Ensure the outFolderPath ends with a slash\n\n    for (const existingModuleKindToEmit of this._moduleKindsToEmit) {\n      let errorText: string | undefined;\n\n      if (existingModuleKindToEmit.outFolderPath === outFolderPath) {\n        if (existingModuleKindToEmit.jsExtensionOverride === jsExtensionOverride) {\n          errorText =\n            'Unable to output two different module kinds with the same ' +\n            `module extension (${jsExtensionOverride || '.js'}) to the same ` +\n            `folder (\"${outFolderPath}\").`;\n        }\n      } else {\n        let parentFolder: string | undefined;\n        let childFolder: string | undefined;\n        if (outFolderPath.startsWith(existingModuleKindToEmit.outFolderPath)) {\n          parentFolder = outFolderPath;\n          childFolder = existingModuleKindToEmit.outFolderPath;\n        } else if (existingModuleKindToEmit.outFolderPath.startsWith(outFolderPath)) {\n          parentFolder = existingModuleKindToEmit.outFolderPath;\n          childFolder = outFolderPath;\n        }\n\n        if (parentFolder) {\n          errorText =\n            'Unable to output two different module kinds to nested folders ' +\n            `(\"${parentFolder}\" and \"${childFolder}\").`;\n        }\n      }\n\n      if (errorText) {\n        this._typescriptLogger.emitError(new Error(errorText));\n        return undefined;\n      }\n    }\n\n    this._moduleKindsToEmit.push({\n      outFolderPath,\n      moduleKind,\n      jsExtensionOverride,\n\n      isPrimary\n    });\n\n    return `${outFolderName}:${jsExtensionOverride || '.js'}`;\n  }\n\n  private _loadTsconfig(ts: ExtendedTypeScript): TTypescript.ParsedCommandLine {\n    const parsedConfigFile: ReturnType<typeof ts.readConfigFile> = ts.readConfigFile(\n      this._configuration.tsconfigPath,\n      this._cachedFileSystem.readFile\n    );\n\n    const currentFolder: string = path.dirname(this._configuration.tsconfigPath);\n    const tsconfig: TTypescript.ParsedCommandLine = ts.parseJsonConfigFileContent(\n      parsedConfigFile.config,\n      {\n        fileExists: this._cachedFileSystem.exists,\n        readFile: this._cachedFileSystem.readFile,\n        readDirectory: (\n          folderPath: string,\n          extensions?: ReadonlyArray<string>,\n          excludes?: ReadonlyArray<string>,\n          includes?: ReadonlyArray<string>,\n          depth?: number\n        ) =>\n          ts.matchFiles(\n            folderPath,\n            extensions,\n            excludes,\n            includes,\n            /* useCaseSensitiveFileNames */ true,\n            currentFolder,\n            depth,\n            this._cachedFileSystem.readFolderFilesAndDirectories.bind(this._cachedFileSystem),\n            this._cachedFileSystem.getRealPath.bind(this._cachedFileSystem),\n            this._cachedFileSystem.directoryExists.bind(this._cachedFileSystem)\n          ),\n        useCaseSensitiveFileNames: true\n      },\n      currentFolder,\n      /*existingOptions:*/ undefined,\n      this._configuration.tsconfigPath\n    );\n\n    if (tsconfig.options.incremental) {\n      tsconfig.options.tsBuildInfoFile = this._tsCacheFilePath;\n    }\n\n    return tsconfig;\n  }\n\n  private _buildSolutionBuilderHost(\n    ts: ExtendedTypeScript,\n    reportDiagnostic: TTypescript.DiagnosticReporter\n  ): TSolutionHost {\n    const reportSolutionBuilderStatus: TTypescript.DiagnosticReporter = reportDiagnostic;\n    const reportEmitErrorSummary: TTypescript.ReportEmitErrorSummary = (errorCount: number): void => {\n      // Do nothing\n    };\n\n    const compilerHost: TTypescript.SolutionBuilderHost<TTypescript.EmitAndSemanticDiagnosticsBuilderProgram> =\n      ts.createSolutionBuilderHost(\n        this._getCachingTypeScriptSystem(ts),\n        ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n        reportDiagnostic,\n        reportSolutionBuilderStatus,\n        reportEmitErrorSummary\n      );\n\n    return compilerHost;\n  }\n\n  private _buildIncrementalCompilerHost(\n    ts: ExtendedTypeScript,\n    tsconfig: TTypescript.ParsedCommandLine\n  ): TTypescript.CompilerHost {\n    if (tsconfig.options.incremental) {\n      return ts.createIncrementalCompilerHost(tsconfig.options, this._getCachingTypeScriptSystem(ts));\n    } else {\n      return ts.createCompilerHost(tsconfig.options);\n    }\n  }\n\n  private _getCachingTypeScriptSystem(ts: ExtendedTypeScript): TTypescript.System {\n    const sys: TTypescript.System = {\n      ...ts.sys,\n      deleteFile: this._cachedFileSystem.deleteFile.bind(this._cachedFileSystem),\n      /** Check if the path exists and is a directory */\n      directoryExists: (directoryPath: string) => {\n        try {\n          const stats: FileSystemStats = this._cachedFileSystem.getStatistics(directoryPath);\n          return stats.isDirectory() || stats.isSymbolicLink();\n        } catch (error) {\n          if (FileSystem.isNotExistError(error as Error)) {\n            return false;\n          } else {\n            throw error;\n          }\n        }\n      },\n      /** Check if the path exists and is a file */\n      fileExists: (filePath: string) => {\n        try {\n          const stats: FileSystemStats = this._cachedFileSystem.getStatistics(filePath);\n          return stats.isFile();\n        } catch (error) {\n          if (FileSystem.isNotExistError(error as Error)) {\n            return false;\n          } else {\n            throw error;\n          }\n        }\n      },\n      /* Use the Heft config's build folder because it has corrected casing */\n      getCurrentDirectory: () => this._configuration.buildFolder,\n      getDirectories: (folderPath: string) => {\n        return this._cachedFileSystem.readFolderFilesAndDirectories(folderPath).directories;\n      },\n      realpath: this._cachedFileSystem.getRealPath.bind(this._cachedFileSystem)\n    };\n\n    return sys;\n  }\n\n  private _buildWatchCompilerHost(\n    ts: ExtendedTypeScript,\n    tsconfig: TTypescript.ParsedCommandLine\n  ): TWatchCompilerHost {\n    const reportDiagnostic: TTypescript.DiagnosticReporter = (diagnostic: TTypescript.Diagnostic): void => {\n      this._printDiagnosticMessage(ts, diagnostic);\n    };\n    const reportWatchStatus: TTypescript.DiagnosticReporter = (diagnostic: TTypescript.Diagnostic) => {\n      this._printDiagnosticMessage(ts, diagnostic);\n\n      // In watch mode, notify EmitCompletedCallbackManager every time we finish recompiling.\n      if (\n        diagnostic.code === ts.Diagnostics.Found_0_errors_Watching_for_file_changes.code ||\n        diagnostic.code === ts.Diagnostics.Found_1_error_Watching_for_file_changes.code\n      ) {\n        this._emitCompletedCallbackManager.callback();\n      }\n    };\n\n    return ts.createWatchCompilerHost(\n      tsconfig.fileNames,\n      tsconfig.options,\n      this._getCachingTypeScriptSystem(ts),\n      ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n      reportDiagnostic,\n      reportWatchStatus,\n      tsconfig.projectReferences\n    );\n  }\n\n  private _buildWatchSolutionBuilderHost(ts: ExtendedTypeScript): TWatchSolutionHost {\n    const reportDiagnostic: TTypescript.DiagnosticReporter = (diagnostic: TTypescript.Diagnostic): void => {\n      this._printDiagnosticMessage(ts, diagnostic);\n    };\n    const reportSolutionBuilderStatus: TTypescript.DiagnosticReporter = reportDiagnostic;\n    const reportWatchStatus: TTypescript.DiagnosticReporter = (diagnostic: TTypescript.Diagnostic) => {\n      this._printDiagnosticMessage(ts, diagnostic);\n\n      // In watch mode, notify EmitCompletedCallbackManager every time we finish recompiling.\n      if (\n        diagnostic.code === ts.Diagnostics.Found_0_errors_Watching_for_file_changes.code ||\n        diagnostic.code === ts.Diagnostics.Found_1_error_Watching_for_file_changes.code\n      ) {\n        this._emitCompletedCallbackManager.callback();\n      }\n    };\n\n    return ts.createSolutionBuilderWithWatchHost(\n      this._getCachingTypeScriptSystem(ts),\n      ts.createEmitAndSemanticDiagnosticsBuilderProgram,\n      reportDiagnostic,\n      reportSolutionBuilderStatus,\n      reportWatchStatus\n    );\n  }\n\n  private _overrideTypeScriptReadJson(ts: ExtendedTypeScript): void {\n    ts.readJson = (filePath: string) => {\n      let jsonData: object | undefined = this._tsReadJsonCache.get(filePath);\n      if (jsonData) {\n        return jsonData;\n      } else {\n        try {\n          const fileContents: string = this._cachedFileSystem.readFile(filePath);\n          if (!fileContents) {\n            jsonData = EMPTY_JSON;\n          } else {\n            const parsedFile: ReturnType<typeof ts.parseConfigFileTextToJson> = ts.parseConfigFileTextToJson(\n              filePath,\n              fileContents\n            );\n            if (parsedFile.error) {\n              jsonData = EMPTY_JSON;\n            } else {\n              jsonData = parsedFile.config as object;\n            }\n          }\n        } catch (error) {\n          jsonData = EMPTY_JSON;\n        }\n\n        this._tsReadJsonCache.set(filePath, jsonData);\n        return jsonData;\n      }\n    };\n  }\n\n  private _parseModuleKind(ts: ExtendedTypeScript, moduleKindName: string): TTypescript.ModuleKind {\n    switch (moduleKindName.toLowerCase()) {\n      case 'commonjs':\n        return ts.ModuleKind.CommonJS;\n\n      case 'amd':\n        return ts.ModuleKind.AMD;\n\n      case 'umd':\n        return ts.ModuleKind.UMD;\n\n      case 'system':\n        return ts.ModuleKind.System;\n\n      case 'es2015':\n        return ts.ModuleKind.ES2015;\n\n      case 'esnext':\n        return ts.ModuleKind.ESNext;\n\n      default:\n        throw new Error(`\"${moduleKindName}\" is not a valid module kind name.`);\n    }\n  }\n}\n"]}