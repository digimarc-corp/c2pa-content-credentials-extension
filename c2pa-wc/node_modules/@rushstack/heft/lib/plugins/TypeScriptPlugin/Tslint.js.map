{"version":3,"file":"Tslint.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/Tslint.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport type * as TTslint from 'tslint';\nimport * as crypto from 'crypto';\nimport { Import, ITerminal, JsonFile, FileError } from '@rushstack/node-core-library';\n\nimport { LinterBase, ILinterBaseOptions } from './LinterBase';\nimport { IExtendedSourceFile, IExtendedProgram } from './internalTypings/TypeScriptInternals';\nimport { IExtendedLinter } from './internalTypings/TslintInternals';\nimport { TypeScriptCachedFileSystem } from '../../utilities/fileSystem/TypeScriptCachedFileSystem';\n\ninterface ITslintOptions extends ILinterBaseOptions {\n  tslintPackagePath: string;\n\n  cachedFileSystem: TypeScriptCachedFileSystem;\n}\n\nexport class Tslint extends LinterBase<TTslint.RuleFailure> {\n  private readonly _tslint: typeof TTslint;\n  private readonly _cachedFileSystem: TypeScriptCachedFileSystem;\n\n  private _tslintConfiguration!: TTslint.Configuration.IConfigurationFile;\n  private _linter!: IExtendedLinter;\n  private _enabledRules!: TTslint.IRule[];\n  private _ruleSeverityMap!: Map<string, TTslint.RuleSeverity>;\n  protected _lintResult!: TTslint.LintResult;\n\n  public constructor(options: ITslintOptions) {\n    super('tslint', options);\n\n    this._tslint = require(options.tslintPackagePath);\n    this._cachedFileSystem = options.cachedFileSystem;\n  }\n\n  /**\n   * Returns the sha1 hash of the contents of the config file at the provided path and the\n   * the configs files that the referenced file extends.\n   *\n   * @param previousHash - If supplied, the hash is updated with the contents of the\n   * file's extended configs and itself before being returned. Passing a digested hash to\n   * this parameter will result in an error.\n   */\n  public static getConfigHash(\n    configFilePath: string,\n    terminal: ITerminal,\n    cachedFileSystem: TypeScriptCachedFileSystem,\n    previousHash?: crypto.Hash\n  ): crypto.Hash {\n    interface IMinimalConfig {\n      extends?: string | string[];\n    }\n\n    terminal.writeVerboseLine(`Examining config file \"${configFilePath}\"`);\n    // if configFilePath is not a json file, assume that it is a package whose package.json\n    // specifies a \"main\" file which is a config file, per the \"extends\" spec of tslint.json, found at\n    //  https://palantir.github.io/tslint/usage/configuration/\n    if (!configFilePath.endsWith('.json')) {\n      configFilePath = Import.resolveModule({\n        modulePath: configFilePath,\n        baseFolderPath: path.dirname(configFilePath)\n      });\n    }\n    const rawConfig: string = cachedFileSystem.readFile(configFilePath);\n    const parsedConfig: IMinimalConfig = JsonFile.parseString(rawConfig);\n    const extendsProperty: string | string[] | undefined = parsedConfig.extends;\n    let hash: crypto.Hash = previousHash || crypto.createHash('sha1');\n\n    if (extendsProperty instanceof Array) {\n      for (const extendFile of extendsProperty) {\n        const extendFilePath: string = Import.resolveModule({\n          modulePath: extendFile,\n          baseFolderPath: path.dirname(configFilePath)\n        });\n        hash = Tslint.getConfigHash(extendFilePath, terminal, cachedFileSystem, hash);\n      }\n    } else if (extendsProperty) {\n      // note that if we get here, extendsProperty is a string\n      const extendsFullPath: string = Import.resolveModule({\n        modulePath: extendsProperty,\n        baseFolderPath: path.dirname(configFilePath)\n      });\n      hash = Tslint.getConfigHash(extendsFullPath, terminal, cachedFileSystem, hash);\n    }\n\n    return hash.update(rawConfig);\n  }\n\n  public printVersionHeader(): void {\n    this._terminal.writeLine(`Using TSLint version ${this._tslint.Linter.VERSION}`);\n  }\n\n  public reportFailures(): void {\n    if (this._lintResult.failures?.length) {\n      this._terminal.writeWarningLine(\n        `Encountered ${this._lintResult.failures.length} TSLint issues${\n          this._lintResult.failures.length > 1 ? 's' : ''\n        }:`\n      );\n\n      for (const tslintFailure of this._lintResult.failures) {\n        const { line, character } = tslintFailure.getStartPosition().getLineAndCharacter();\n        const formattedFailure: string = `(${tslintFailure.getRuleName()}) ${tslintFailure.getFailure()}`;\n        const errorObject: FileError = new FileError(formattedFailure, {\n          absolutePath: tslintFailure.getFileName(),\n          projectFolder: this._buildFolderPath,\n          line: line + 1,\n          column: character + 1\n        });\n        switch (tslintFailure.getRuleSeverity()) {\n          case 'error': {\n            this._scopedLogger.emitError(errorObject);\n            break;\n          }\n\n          case 'warning': {\n            this._scopedLogger.emitWarning(errorObject);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  protected get cacheVersion(): string {\n    const tslintConfigHash: crypto.Hash = Tslint.getConfigHash(\n      this._linterConfigFilePath,\n      this._terminal,\n      this._cachedFileSystem\n    );\n    const tslintConfigVersion: string = `${this._tslint.Linter.VERSION}_${tslintConfigHash.digest('hex')}`;\n\n    return tslintConfigVersion;\n  }\n\n  protected async initializeAsync(tsProgram: IExtendedProgram): Promise<void> {\n    this._tslintConfiguration = this._tslint.Configuration.loadConfigurationFromPath(\n      this._linterConfigFilePath\n    );\n    this._linter = new this._tslint.Linter(\n      {\n        fix: false,\n        rulesDirectory: this._tslintConfiguration.rulesDirectory\n      },\n      tsProgram\n    ) as unknown as IExtendedLinter;\n\n    this._enabledRules = this._linter.getEnabledRules(this._tslintConfiguration, false);\n\n    this._ruleSeverityMap = new Map<string, TTslint.RuleSeverity>(\n      this._enabledRules.map((rule): [string, TTslint.RuleSeverity] => [\n        rule.getOptions().ruleName,\n        rule.getOptions().ruleSeverity\n      ])\n    );\n  }\n\n  protected async lintFileAsync(sourceFile: IExtendedSourceFile): Promise<TTslint.RuleFailure[]> {\n    // Some of this code comes from here:\n    // https://github.com/palantir/tslint/blob/24d29e421828348f616bf761adb3892bcdf51662/src/linter.ts#L161-L179\n    // Modified to only lint files that have changed and that we care about\n    const failures: TTslint.RuleFailure[] = this._linter.getAllFailures(sourceFile, this._enabledRules);\n\n    for (const failure of failures) {\n      const severity: TTslint.RuleSeverity | undefined = this._ruleSeverityMap.get(failure.getRuleName());\n      if (severity === undefined) {\n        throw new Error(`Severity for rule '${failure.getRuleName()}' not found`);\n      }\n\n      failure.setRuleSeverity(severity);\n    }\n\n    return failures;\n  }\n\n  protected lintingFinished(failures: TTslint.RuleFailure[]): void {\n    this._linter.failures = failures;\n    this._lintResult = this._linter.getResult();\n  }\n\n  protected async isFileExcludedAsync(filePath: string): Promise<boolean> {\n    return this._tslint.Configuration.isFileExcluded(filePath, this._tslintConfiguration);\n  }\n}\n"]}