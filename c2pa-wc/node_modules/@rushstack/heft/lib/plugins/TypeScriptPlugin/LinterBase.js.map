{"version":3,"file":"LinterBase.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/LinterBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { ITerminal, FileSystem, JsonFile, Path } from '@rushstack/node-core-library';\n\nimport {\n  IExtendedSourceFile,\n  IExtendedProgram,\n  IExtendedTypeScript\n} from './internalTypings/TypeScriptInternals';\nimport { PerformanceMeasurer, PerformanceMeasurerAsync } from '../../utilities/Performance';\nimport { IScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\nimport { createHash, Hash } from 'crypto';\n\nexport interface ILinterBaseOptions {\n  ts: IExtendedTypeScript;\n  scopedLogger: IScopedLogger;\n  buildFolderPath: string;\n  /**\n   * The path where the linter state will be written to.\n   */\n  buildMetadataFolderPath: string;\n  linterConfigFilePath: string;\n\n  /**\n   * A performance measurer for the lint run.\n   */\n  measurePerformance: PerformanceMeasurer;\n\n  /**\n   * An asynchronous performance measurer for the lint run.\n   */\n  measurePerformanceAsync: PerformanceMeasurerAsync;\n}\n\nexport interface IRunLinterOptions {\n  tsProgram: IExtendedProgram;\n\n  /**\n   * All of the files that the TypeScript compiler processed.\n   */\n  typeScriptFilenames: Set<string>;\n\n  /**\n   * The set of files that TypeScript has compiled since the last compilation.\n   */\n  changedFiles: Set<IExtendedSourceFile>;\n}\n\nexport interface ITiming {\n  duration: number;\n  hitCount: number;\n}\n\ninterface ITsLintCacheData {\n  /**\n   * The TSLint version and a hash of the TSLint config files. If either changes,\n   * the cache is invalidated.\n   */\n  cacheVersion: string;\n\n  /**\n   * This is the result of `Array.from(Map<string, string>)`. The first element of\n   * each array item is the file's path and the second element is the file's hash.\n   */\n  fileVersions: [string, string][];\n}\n\nexport abstract class LinterBase<TLintResult> {\n  protected readonly _scopedLogger: IScopedLogger;\n  protected readonly _terminal: ITerminal;\n  protected readonly _buildFolderPath: string;\n  protected readonly _buildMetadataFolderPath: string;\n  protected readonly _linterConfigFilePath: string;\n  protected readonly _measurePerformance: PerformanceMeasurer;\n  protected readonly _measurePerformanceAsync: PerformanceMeasurerAsync;\n\n  private readonly _ts: IExtendedTypeScript;\n  private readonly _linterName: string;\n\n  public constructor(linterName: string, options: ILinterBaseOptions) {\n    this._scopedLogger = options.scopedLogger;\n    this._terminal = this._scopedLogger.terminal;\n    this._ts = options.ts;\n    this._buildFolderPath = options.buildFolderPath;\n    this._buildMetadataFolderPath = options.buildMetadataFolderPath;\n    this._linterConfigFilePath = options.linterConfigFilePath;\n    this._linterName = linterName;\n    this._measurePerformance = options.measurePerformance;\n    this._measurePerformanceAsync = options.measurePerformanceAsync;\n  }\n\n  protected abstract get cacheVersion(): string;\n\n  public abstract printVersionHeader(): void;\n\n  public async performLintingAsync(options: IRunLinterOptions): Promise<void> {\n    await this.initializeAsync(options.tsProgram);\n\n    const commonDirectory: string = options.tsProgram.getCommonSourceDirectory();\n\n    const relativePaths: Map<string, string> = new Map();\n\n    const fileHash: Hash = createHash('md5');\n    for (const file of options.typeScriptFilenames) {\n      // Need to use relative paths to ensure portability.\n      const relative: string = Path.convertToSlashes(path.relative(commonDirectory, file));\n      relativePaths.set(file, relative);\n      fileHash.update(relative);\n    }\n    const hashSuffix: string = fileHash.digest('base64').replace(/\\+/g, '-').replace(/\\//g, '_').slice(0, 8);\n\n    const tslintConfigVersion: string = this.cacheVersion;\n    const cacheFilePath: string = path.resolve(\n      this._buildMetadataFolderPath,\n      `_${this._linterName}-${hashSuffix}.json`\n    );\n\n    let tslintCacheData: ITsLintCacheData | undefined;\n    try {\n      tslintCacheData = await JsonFile.loadAsync(cacheFilePath);\n    } catch (e) {\n      if (FileSystem.isNotExistError(e as Error)) {\n        tslintCacheData = undefined;\n      } else {\n        throw e;\n      }\n    }\n\n    const cachedNoFailureFileVersions: Map<string, string> = new Map<string, string>(\n      tslintCacheData?.cacheVersion === tslintConfigVersion ? tslintCacheData.fileVersions : []\n    );\n\n    const newNoFailureFileVersions: Map<string, string> = new Map<string, string>();\n\n    //#region Code from TSLint\n    // Some of this code comes from here:\n    // https://github.com/palantir/tslint/blob/24d29e421828348f616bf761adb3892bcdf51662/src/linter.ts#L161-L179\n    // Modified to only lint files that have changed and that we care about\n    const lintFailures: TLintResult[] = [];\n    for (const sourceFile of options.tsProgram.getSourceFiles()) {\n      const filePath: string = sourceFile.fileName;\n      const relative: string | undefined = relativePaths.get(filePath);\n\n      if (relative === undefined || (await this.isFileExcludedAsync(filePath))) {\n        continue;\n      }\n\n      // Older compilers don't compute the ts.SourceFile.version.  If it is missing, then we can't skip processing\n      const version: string = sourceFile.version || '';\n      const cachedVersion: string = cachedNoFailureFileVersions.get(relative) || '';\n      if (\n        cachedVersion === '' ||\n        version === '' ||\n        cachedVersion !== version ||\n        options.changedFiles.has(sourceFile)\n      ) {\n        await this._measurePerformanceAsync(this._linterName, async () => {\n          const failures: TLintResult[] = await this.lintFileAsync(sourceFile);\n          if (failures.length === 0) {\n            newNoFailureFileVersions.set(relative, version);\n          } else {\n            lintFailures.push(...failures);\n          }\n        });\n      } else {\n        newNoFailureFileVersions.set(relative, version);\n      }\n    }\n    //#endregion\n\n    this.lintingFinished(lintFailures);\n\n    const updatedTslintCacheData: ITsLintCacheData = {\n      cacheVersion: tslintConfigVersion,\n      fileVersions: Array.from(newNoFailureFileVersions)\n    };\n    await JsonFile.saveAsync(updatedTslintCacheData, cacheFilePath, { ensureFolderExists: true });\n\n    const lintTiming: ITiming = this.getTiming(this._linterName);\n    this._terminal.writeVerboseLine(`Lint: ${lintTiming.duration}ms (${lintTiming.hitCount} files)`);\n  }\n\n  public abstract reportFailures(): void;\n\n  protected getTiming(timingName: string): ITiming {\n    return {\n      duration: this._ts.performance.getDuration(timingName),\n      hitCount: this._ts.performance.getCount(`before${timingName}`)\n    };\n  }\n\n  protected abstract initializeAsync(tsProgram: IExtendedProgram): void;\n\n  protected abstract lintFileAsync(sourceFile: IExtendedSourceFile): Promise<TLintResult[]>;\n\n  protected abstract lintingFinished(lintFailures: TLintResult[]): void;\n\n  protected abstract isFileExcludedAsync(filePath: string): Promise<boolean>;\n}\n"]}