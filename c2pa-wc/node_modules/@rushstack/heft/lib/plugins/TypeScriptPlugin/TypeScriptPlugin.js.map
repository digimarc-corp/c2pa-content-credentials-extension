{"version":3,"file":"TypeScriptPlugin.js","sourceRoot":"","sources":["../../../src/plugins/TypeScriptPlugin/TypeScriptPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { ITerminal, FileSystem, Path } from '@rushstack/node-core-library';\n\nimport { TypeScriptBuilder, ITypeScriptBuilderConfiguration } from './TypeScriptBuilder';\nimport { HeftSession } from '../../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\nimport { IHeftPlugin } from '../../pluginFramework/IHeftPlugin';\nimport { IBuildStageContext, ICompileSubstage, IBuildStageProperties } from '../../stages/BuildStage';\nimport { ToolPackageResolver, IToolPackageResolution } from '../../utilities/ToolPackageResolver';\nimport { ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\nimport { ICleanStageContext, ICleanStageProperties } from '../../stages/CleanStage';\nimport { CoreConfigFiles, ISharedCopyConfiguration } from '../../utilities/CoreConfigFiles';\n\nconst PLUGIN_NAME: string = 'typescript';\n\ninterface IRunTypeScriptOptions {\n  heftSession: HeftSession;\n  heftConfiguration: HeftConfiguration;\n  buildProperties: IBuildStageProperties;\n  watchMode: boolean;\n\n  /**\n   * Fired whenever the compiler emits an output.  In watch mode, this event occurs after each recompile.\n   */\n  emitCallback: () => void;\n}\n\ninterface IEmitModuleKind {\n  moduleKind: 'commonjs' | 'amd' | 'umd' | 'system' | 'es2015' | 'esnext';\n  outFolderName: string;\n  jsExtensionOverride?: string;\n}\n\nexport interface ISharedTypeScriptConfiguration {\n  /**\n   * If provided, emit these module kinds in addition to the modules specified in the tsconfig.\n   * Note that this option only applies to the main tsconfig.json configuration.\n   */\n  additionalModuleKindsToEmit?: IEmitModuleKind[] | undefined;\n\n  /**\n   * If 'true', emit CommonJS output into the TSConfig outDir with the file extension '.cjs'\n   */\n  emitCjsExtensionForCommonJS?: boolean | undefined;\n\n  /**\n   * If 'true', emit ESModule output into the TSConfig outDir with the file extension '.mjs'\n   */\n  emitMjsExtensionForESModule?: boolean | undefined;\n\n  /**\n   * If true, enable behavior analogous to the \"tsc --build\" command. Will build projects referenced by the main project in dependency order.\n   * Note that this will effectively enable \\\"noEmitOnError\\\".\n   */\n  buildProjectReferences?: boolean;\n\n  /*\n   * Specifies the tsconfig.json file that will be used for compilation. Equivalent to the \"project\" argument for the 'tsc' and 'tslint' command line tools.\n   *\n   * The default value is \"./tsconfig.json\"\n   */\n  project?: string;\n\n  /**\n   * Specifies the intermediary folder that tests will use.  Because Jest uses the\n   * Node.js runtime to execute tests, the module format must be CommonJS.\n   *\n   * The default value is \"lib\".\n   */\n  emitFolderNameForTests?: string;\n\n  /**\n   * Configures additional file types that should be copied into the TypeScript compiler's emit folders, for example\n   * so that these files can be resolved by import statements.\n   */\n  staticAssetsToCopy?: ISharedCopyConfiguration;\n}\n\nexport interface ITypeScriptConfigurationJson extends ISharedTypeScriptConfiguration {\n  disableTslint?: boolean;\n  maxWriteParallelism: number | undefined;\n}\n\ninterface ITypeScriptConfiguration extends ISharedTypeScriptConfiguration {\n  /**\n   * Set this to change the maximum number of file handles that will be opened concurrently for writing.\n   * The default is 50.\n   */\n  maxWriteParallelism: number;\n\n  isLintingEnabled: boolean | undefined;\n}\n\ninterface ITypeScriptConfigurationFileCacheEntry {\n  configurationFile: ITypeScriptConfigurationJson | undefined;\n}\n\nexport class TypeScriptPlugin implements IHeftPlugin {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  private readonly _taskPackageResolver: ToolPackageResolver;\n  private _typeScriptConfigurationFileCache: Map<string, ITypeScriptConfigurationFileCacheEntry> = new Map<\n    string,\n    ITypeScriptConfigurationFileCacheEntry\n  >();\n\n  public constructor(taskPackageResolver: ToolPackageResolver) {\n    this._taskPackageResolver = taskPackageResolver;\n  }\n\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    const logger: ScopedLogger = heftSession.requestScopedLogger('TypeScript Plugin');\n\n    heftSession.hooks.clean.tap(PLUGIN_NAME, (clean: ICleanStageContext) => {\n      clean.hooks.loadStageConfiguration.tapPromise(PLUGIN_NAME, async () => {\n        await this._updateCleanOptions(logger, heftConfiguration, clean.properties);\n      });\n    });\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      build.hooks.compile.tap(PLUGIN_NAME, (compile: ICompileSubstage) => {\n        compile.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n          await new Promise<void>((resolve: () => void, reject: (error: Error) => void) => {\n            let isFirstEmit: boolean = true;\n            this._runTypeScriptAsync(logger, {\n              heftSession,\n              heftConfiguration,\n              buildProperties: build.properties,\n              watchMode: build.properties.watchMode,\n              emitCallback: () => {\n                if (isFirstEmit) {\n                  isFirstEmit = false;\n\n                  // In watch mode, `_runTypeScriptAsync` will never resolve so we need to resolve the promise here\n                  // to allow the build to move on to the `afterCompile` substage.\n                  if (build.properties.watchMode) {\n                    resolve();\n                  }\n                } else {\n                  compile.hooks.afterRecompile.promise().catch((error) => {\n                    heftConfiguration.globalTerminal.writeErrorLine(\n                      `An error occurred in an afterRecompile hook: ${error}`\n                    );\n                  });\n                }\n              }\n            })\n              .then(resolve)\n              .catch(reject);\n          });\n        });\n      });\n    });\n  }\n\n  private async _ensureConfigFileLoadedAsync(\n    terminal: ITerminal,\n    heftConfiguration: HeftConfiguration\n  ): Promise<ITypeScriptConfigurationJson | undefined> {\n    const buildFolder: string = heftConfiguration.buildFolder;\n    let typescriptConfigurationFileCacheEntry: ITypeScriptConfigurationFileCacheEntry | undefined =\n      this._typeScriptConfigurationFileCache.get(buildFolder);\n\n    if (!typescriptConfigurationFileCacheEntry) {\n      typescriptConfigurationFileCacheEntry = {\n        configurationFile:\n          await CoreConfigFiles.typeScriptConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(\n            terminal,\n            buildFolder,\n            heftConfiguration.rigConfig\n          )\n      };\n\n      this._typeScriptConfigurationFileCache.set(buildFolder, typescriptConfigurationFileCacheEntry);\n    }\n\n    return typescriptConfigurationFileCacheEntry.configurationFile;\n  }\n\n  private async _updateCleanOptions(\n    logger: ScopedLogger,\n    heftConfiguration: HeftConfiguration,\n    cleanProperties: ICleanStageProperties\n  ): Promise<void> {\n    const configurationFile: ITypeScriptConfigurationJson | undefined =\n      await this._ensureConfigFileLoadedAsync(logger.terminal, heftConfiguration);\n\n    if (configurationFile?.additionalModuleKindsToEmit) {\n      for (const additionalModuleKindToEmit of configurationFile.additionalModuleKindsToEmit) {\n        cleanProperties.pathsToDelete.add(\n          path.resolve(heftConfiguration.buildFolder, additionalModuleKindToEmit.outFolderName)\n        );\n      }\n    }\n  }\n\n  private async _runTypeScriptAsync(logger: ScopedLogger, options: IRunTypeScriptOptions): Promise<void> {\n    const { heftSession, heftConfiguration, buildProperties, watchMode } = options;\n\n    const typescriptConfigurationJson: ITypeScriptConfigurationJson | undefined =\n      await this._ensureConfigFileLoadedAsync(logger.terminal, heftConfiguration);\n\n    const { project = './tsconfig.json' } = typescriptConfigurationJson || {};\n\n    const tsconfigFilePath: string = Path.convertToSlashes(\n      path.resolve(heftConfiguration.buildFolder, project)\n    );\n    logger.terminal.writeVerboseLine(`Looking for tsconfig at ${tsconfigFilePath}`);\n    buildProperties.isTypeScriptProject = await FileSystem.existsAsync(tsconfigFilePath);\n    if (!buildProperties.isTypeScriptProject) {\n      // If there are no TSConfig, we have nothing to do\n      return;\n    }\n\n    const typeScriptConfiguration: ITypeScriptConfiguration = {\n      additionalModuleKindsToEmit: typescriptConfigurationJson?.additionalModuleKindsToEmit,\n      buildProjectReferences: typescriptConfigurationJson?.buildProjectReferences,\n      emitCjsExtensionForCommonJS: typescriptConfigurationJson?.emitCjsExtensionForCommonJS,\n      emitMjsExtensionForESModule: typescriptConfigurationJson?.emitMjsExtensionForESModule,\n      emitFolderNameForTests: typescriptConfigurationJson?.emitFolderNameForTests,\n      maxWriteParallelism: typescriptConfigurationJson?.maxWriteParallelism || 50,\n      isLintingEnabled: !(buildProperties.lite || typescriptConfigurationJson?.disableTslint)\n    };\n\n    const toolPackageResolution: IToolPackageResolution =\n      await this._taskPackageResolver.resolveToolPackagesAsync(heftConfiguration, logger.terminal);\n    if (!toolPackageResolution.typeScriptPackagePath) {\n      throw new Error('Unable to resolve a TypeScript compiler package');\n    }\n\n    // Set some properties used by the Jest plugin\n    buildProperties.emitFolderNameForTests = typeScriptConfiguration.emitFolderNameForTests || 'lib';\n    buildProperties.emitExtensionForTests = typeScriptConfiguration.emitCjsExtensionForCommonJS\n      ? '.cjs'\n      : '.js';\n\n    const typeScriptBuilderConfiguration: ITypeScriptBuilderConfiguration = {\n      buildFolder: heftConfiguration.buildFolder,\n      buildMetadataFolder: Path.convertToSlashes(`${heftConfiguration.buildFolder}/temp`),\n      typeScriptToolPath: toolPackageResolution.typeScriptPackagePath!,\n      tslintToolPath: toolPackageResolution.tslintPackagePath,\n      eslintToolPath: toolPackageResolution.eslintPackagePath,\n\n      buildProjectReferences: typescriptConfigurationJson?.buildProjectReferences,\n\n      tsconfigPath: tsconfigFilePath,\n      lintingEnabled: !!typeScriptConfiguration.isLintingEnabled,\n      additionalModuleKindsToEmit: typeScriptConfiguration.additionalModuleKindsToEmit,\n      emitCjsExtensionForCommonJS: !!typeScriptConfiguration.emitCjsExtensionForCommonJS,\n      emitMjsExtensionForESModule: !!typeScriptConfiguration.emitMjsExtensionForESModule,\n      watchMode: watchMode,\n      maxWriteParallelism: typeScriptConfiguration.maxWriteParallelism\n    };\n    const typeScriptBuilder: TypeScriptBuilder = new TypeScriptBuilder(\n      heftConfiguration.terminalProvider,\n      typeScriptBuilderConfiguration,\n      heftSession,\n      options.emitCallback\n    );\n\n    if (heftSession.debugMode) {\n      await typeScriptBuilder.invokeAsync();\n    } else {\n      await typeScriptBuilder.invokeAsSubprocessAsync();\n    }\n  }\n}\n"]}