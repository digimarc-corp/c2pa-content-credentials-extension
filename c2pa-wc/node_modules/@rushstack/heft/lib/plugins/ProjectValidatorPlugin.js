"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectValidatorPlugin = void 0;
const node_core_library_1 = require("@rushstack/node-core-library");
const Constants_1 = require("../utilities/Constants");
const ALLOWED_HEFT_DATA_FOLDER_FILES = new Set();
const ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS = new Set([Constants_1.Constants.buildCacheFolderName]);
const PLUGIN_NAME = 'ProjectValidatorPlugin';
/**
 * This plugin is a place to do generic project-level validation. For example, ensuring that only expected
 * files are in the ".heft" folder (i.e. - legacy config files aren't still there)
 */
class ProjectValidatorPlugin {
    constructor() {
        this.pluginName = PLUGIN_NAME;
    }
    apply(heftSession, heftConfiguration) {
        const logger = heftSession.requestScopedLogger('project-validation');
        heftSession.hooks.heftLifecycle.tap(PLUGIN_NAME, (heftLifecycle) => {
            heftLifecycle.hooks.toolStart.tapPromise(PLUGIN_NAME, async () => {
                await this._scanHeftDataFolderAsync(logger, heftConfiguration);
            });
        });
        heftSession.hooks.build.tap(PLUGIN_NAME, (build) => {
            build.hooks.bundle.tap(PLUGIN_NAME, (bundle) => {
                bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {
                    const missingPluginCandidatePackageNames = [
                        '@rushstack/heft-webpack4-plugin',
                        '@rushstack/heft-webpack5-plugin'
                    ];
                    const missingPluginDocumentationUrl = 'https://rushstack.io/pages/heft_tasks/webpack/';
                    const missingPlugin = await this._checkPluginIsMissingAsync('WebpackPlugin', node_core_library_1.Path.convertToSlashes(`${heftConfiguration.buildFolder}/webpack.config.js`), missingPluginCandidatePackageNames, missingPluginDocumentationUrl, bundle.hooks.run, logger);
                    if (missingPlugin && !!bundle.properties.webpackConfiguration) {
                        logger.emitWarning(new Error('Your project appears to have a Webpack configuration generated by a plugin, ' +
                            'but the associated Heft plugin is not enabled. To fix this, you can add ' +
                            `${missingPluginCandidatePackageNames
                                .map((packageName) => `"${packageName}"`)
                                .join(' or ')} ` +
                            'to your package.json "devDependencies" and use "config/heft.json" to load it. For details, ' +
                            `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`));
                    }
                });
            });
        });
        heftSession.hooks.test.tap(PLUGIN_NAME, (test) => {
            test.hooks.run.tapPromise(PLUGIN_NAME, async () => {
                await this._checkPluginIsMissingAsync('JestPlugin', node_core_library_1.Path.convertToSlashes(`${heftConfiguration.buildFolder}/config/jest.config.json`), ['@rushstack/heft-jest-plugin'], 'https://rushstack.io/pages/heft_tasks/jest/', test.hooks.run, logger);
            });
        });
        heftSession.hooks.build.tap(PLUGIN_NAME, (build) => {
            build.hooks.preCompile.tap(PLUGIN_NAME, async () => {
                await this._checkPluginIsMissingAsync('SassTypingsPlugin', node_core_library_1.Path.convertToSlashes(`${heftConfiguration.buildFolder}/config/sass.json`), ['@rushstack/heft-sass-plugin'], 'https://rushstack.io/pages/heft_tasks/sass-typings/', build.hooks.preCompile, logger);
            });
        });
    }
    async _scanHeftDataFolderAsync(logger, heftConfiguration) {
        let heftDataFolderContents;
        try {
            heftDataFolderContents = await node_core_library_1.FileSystem.readFolderItemsAsync(heftConfiguration.projectHeftDataFolder);
        }
        catch (e) {
            if (!node_core_library_1.FileSystem.isNotExistError(e)) {
                throw e;
            }
            else {
                return;
            }
        }
        const disallowedItemNames = [];
        for (const folderItem of heftDataFolderContents) {
            const itemName = folderItem.name;
            if (folderItem.isDirectory()) {
                if (!ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS.has(itemName)) {
                    disallowedItemNames.push(`"${itemName}/"`);
                }
            }
            else {
                if (!ALLOWED_HEFT_DATA_FOLDER_FILES.has(itemName)) {
                    disallowedItemNames.push(`"${itemName}"`);
                }
            }
        }
        if (disallowedItemNames.length > 0) {
            logger.emitWarning(new Error(`Found unexpected items in the "${Constants_1.Constants.projectHeftFolderName}" ` +
                `folder: ${disallowedItemNames.join(', ')}. If any of these are config files, they ` +
                `should go in the project's "${Constants_1.Constants.projectConfigFolderName}" folder.`));
        }
    }
    /**
     * A utility method to use as the tap function to the provided hook. Determines if the
     * requested plugin is installed and warns otherwise if related configuration files were
     * found. Returns false if the plugin was found, otherwise true.
     */
    async _checkPluginIsMissingAsync(missingPluginName, configFilePath, missingPluginCandidatePackageNames, missingPluginDocumentationUrl, hookToTap, logger) {
        // If we have the plugin, we don't need to check anything else
        for (const tap of hookToTap.taps) {
            if (tap.name === missingPluginName) {
                return false;
            }
        }
        // Warn if any were found
        if (await node_core_library_1.FileSystem.existsAsync(configFilePath)) {
            logger.emitWarning(new Error(`The configuration file "${configFilePath}" exists in your project, but the associated Heft plugin ` +
                'is not enabled. To fix this, you can add ' +
                `${missingPluginCandidatePackageNames.map((packageName) => `"${packageName}"`).join(' or ')} ` +
                'to your package.json "devDependencies" and use "config/heft.json" to load it. For details, ' +
                `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`));
        }
        return true;
    }
}
exports.ProjectValidatorPlugin = ProjectValidatorPlugin;
//# sourceMappingURL=ProjectValidatorPlugin.js.map