{"version":3,"file":"RunScriptPlugin.js","sourceRoot":"","sources":["../../src/plugins/RunScriptPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;AAE3D,oEAAqD;AAErD,gFAA6E;AAW7E,sDAAmD;AAuBnD,MAAa,eAAgB,SAAQ,yCAA2D;IAAhG;;QACkB,eAAU,GAAW,iBAAiB,CAAC;QACpC,oBAAe,GAA4B,WAAW,CAAC;QACvD,eAAU,GAAW,YAAY,CAAC;IA2FvD,CAAC;IAzFC;;OAEG;IACO,KAAK,CAAC,4BAA4B,CAC1C,SAAoB,EACpB,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAAiC;QAEjC,MAAM,IAAI,CAAC,8BAA8B,CACvC,qBAAqB,EACrB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,UAAU,CACX,CAAC;IACJ,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,2BAA2B,CACzC,SAAoB,EACpB,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAAgC;QAEhC,MAAM,IAAI,CAAC,8BAA8B,CACvC,qBAAqB,EACrB,MAAM,EACN,WAAW,EACX,iBAAiB,EACjB,UAAU,CACX,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,8BAA8B,CAC1C,qBAA+D,EAC/D,MAAoB,EACpB,WAAwB,EACxB,iBAAoC,EACpC,UAA4B;QAE5B,MAAM,yBAAK,CAAC,YAAY,CACtB,qBAAqB,EACrB,KAAK,EAAE,oBAAoB,EAAE,EAAE;YAC7B,wGAAwG;YACxG,oBAAoB;YACpB,MAAM,kBAAkB,GAAW,oBAAoB,CAAC,UAAU,CAAC;YAEnE,oGAAoG;YACpG,mGAAmG;YACnG,sGAAsG;YACtG,sDAAsD;YACtD,MAAM,YAAY,GAAiB,WAAW,CAAC,mBAAmB,CAChE,GAAG,MAAM,CAAC,UAAU,IAAI,oBAAoB,CAAC,QAAQ,EAAE,CACxD,CAAC;YAEF,MAAM,SAAS,GAAiC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC5E,IAAI,SAAS,CAAC,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE;gBACvC,MAAM,IAAI,KAAK,CACb,kBAAkB,kBAAkB,kDAAkD,CACvF,CAAC;aACH;iBAAM,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;gBAChD,MAAM,IAAI,KAAK,CACb,kBAAkB,kBAAkB,oDAAoD,CACzF,CAAC;aACH;YAED,MAAM,gBAAgB,GAAwC;gBAC5D,YAAY,EAAE,YAAY;gBAC1B,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,aAAa,EAAE,oBAAoB,CAAC,aAAa;gBACjD,iBAAiB;gBACjB,UAAU;aACX,CAAC;YACF,IAAI,SAAS,CAAC,GAAG,EAAE;gBACjB,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;aACjC;iBAAM,IAAI,SAAS,CAAC,QAAQ,EAAE;gBAC7B,MAAM,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;aAC5C;QACH,CAAC,EACD,EAAE,WAAW,EAAE,qBAAS,CAAC,cAAc,EAAE,CAC1C,CAAC;IACJ,CAAC;CACF;AA9FD,0CA8FC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { Async } from '@rushstack/node-core-library';\n\nimport { HeftEventPluginBase } from '../pluginFramework/HeftEventPluginBase';\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\nimport { HeftSession } from '../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport {\n  IHeftEventActions,\n  IHeftConfigurationRunScriptEventAction,\n  HeftEvent\n} from '../utilities/CoreConfigFiles';\nimport { IBuildStageProperties } from '../stages/BuildStage';\nimport { ITestStageProperties } from '../stages/TestStage';\nimport { Constants } from '../utilities/Constants';\n\n/**\n * Interface used by scripts that are run by the RunScriptPlugin.\n */\ninterface IRunScript<TStageProperties> {\n  run?: (options: IRunScriptOptions<TStageProperties>) => void;\n  runAsync?: (options: IRunScriptOptions<TStageProperties>) => Promise<void>;\n}\n\n/**\n * Options provided to scripts that are run using the RunScriptPlugin.\n *\n * @beta\n */\nexport interface IRunScriptOptions<TStageProperties> {\n  scopedLogger: ScopedLogger;\n  heftConfiguration: HeftConfiguration;\n  debugMode: boolean;\n  properties: TStageProperties;\n  scriptOptions: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n}\n\nexport class RunScriptPlugin extends HeftEventPluginBase<IHeftConfigurationRunScriptEventAction> {\n  public readonly pluginName: string = 'RunScriptPlugin';\n  protected readonly eventActionName: keyof IHeftEventActions = 'runScript';\n  protected readonly loggerName: string = 'run-script';\n\n  /**\n   * @override\n   */\n  protected async handleBuildEventActionsAsync(\n    heftEvent: HeftEvent,\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: IBuildStageProperties\n  ): Promise<void> {\n    await this._runScriptsForHeftEventActions(\n      runScriptEventActions,\n      logger,\n      heftSession,\n      heftConfiguration,\n      properties\n    );\n  }\n\n  /**\n   * @override\n   */\n  protected async handleTestEventActionsAsync(\n    heftEvent: HeftEvent,\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: ITestStageProperties\n  ): Promise<void> {\n    await this._runScriptsForHeftEventActions(\n      runScriptEventActions,\n      logger,\n      heftSession,\n      heftConfiguration,\n      properties\n    );\n  }\n\n  private async _runScriptsForHeftEventActions<TStageProperties>(\n    runScriptEventActions: IHeftConfigurationRunScriptEventAction[],\n    logger: ScopedLogger,\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    properties: TStageProperties\n  ): Promise<void> {\n    await Async.forEachAsync(\n      runScriptEventActions,\n      async (runScriptEventAction) => {\n        // The scriptPath property should be fully resolved since it is included in the resolution logic used by\n        // HeftConfiguration\n        const resolvedModulePath: string = runScriptEventAction.scriptPath;\n\n        // Use the HeftEvent.actionId field for the logger since this should identify the HeftEvent that the\n        // script is sourced from. This is also a bit more user-friendly and customizable than simply using\n        // the script name for the logger. We will also prefix the logger name with the plugin name to clarify\n        // that the output is coming from the RunScriptPlugin.\n        const scriptLogger: ScopedLogger = heftSession.requestScopedLogger(\n          `${logger.loggerName}:${runScriptEventAction.actionId}`\n        );\n\n        const runScript: IRunScript<TStageProperties> = require(resolvedModulePath);\n        if (runScript.run && runScript.runAsync) {\n          throw new Error(\n            `The script at \"${resolvedModulePath}\" exports both a \"run\" and a \"runAsync\" function`\n          );\n        } else if (!runScript.run && !runScript.runAsync) {\n          throw new Error(\n            `The script at \"${resolvedModulePath}\" doesn\\'t export a \"run\" or a \"runAsync\" function`\n          );\n        }\n\n        const runScriptOptions: IRunScriptOptions<TStageProperties> = {\n          scopedLogger: scriptLogger,\n          debugMode: heftSession.debugMode,\n          scriptOptions: runScriptEventAction.scriptOptions,\n          heftConfiguration,\n          properties\n        };\n        if (runScript.run) {\n          runScript.run(runScriptOptions);\n        } else if (runScript.runAsync) {\n          await runScript.runAsync(runScriptOptions);\n        }\n      },\n      { concurrency: Constants.maxParallelism }\n    );\n  }\n}\n"]}