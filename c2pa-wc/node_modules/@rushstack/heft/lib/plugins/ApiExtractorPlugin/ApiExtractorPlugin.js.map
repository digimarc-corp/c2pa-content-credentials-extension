{"version":3,"file":"ApiExtractorPlugin.js","sourceRoot":"","sources":["../../../src/plugins/ApiExtractorPlugin/ApiExtractorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { IHeftPlugin } from '../../pluginFramework/IHeftPlugin';\nimport { HeftSession } from '../../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../../configuration/HeftConfiguration';\nimport { ApiExtractorRunner } from './ApiExtractorRunner';\nimport { IBuildStageContext, IBundleSubstage } from '../../stages/BuildStage';\nimport { CoreConfigFiles } from '../../utilities/CoreConfigFiles';\nimport { ScopedLogger } from '../../pluginFramework/logging/ScopedLogger';\nimport { IToolPackageResolution, ToolPackageResolver } from '../../utilities/ToolPackageResolver';\n\nconst PLUGIN_NAME: string = 'ApiExtractorPlugin';\nconst CONFIG_FILE_LOCATION: string = './config/api-extractor.json';\n\nexport interface IApiExtractorPluginConfiguration {\n  /**\n   * If set to true, use the project's TypeScript compiler version for API Extractor's\n   * analysis. API Extractor's included TypeScript compiler can generally correctly\n   * analyze typings generated by older compilers, and referencing the project's compiler\n   * can cause issues. If issues are encountered with API Extractor's included compiler,\n   * set this option to true.\n   *\n   * This corresponds to API Extractor's `--typescript-compiler-folder` CLI option and\n   * `IExtractorInvokeOptions.typescriptCompilerFolder` API option. This option defaults to false.\n   */\n  useProjectTypescriptVersion?: boolean;\n}\n\ninterface IRunApiExtractorOptions {\n  heftConfiguration: HeftConfiguration;\n  buildFolder: string;\n  debugMode: boolean;\n  watchMode: boolean;\n  production: boolean;\n  apiExtractorJsonFilePath: string;\n}\n\nexport class ApiExtractorPlugin implements IHeftPlugin {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  private readonly _toolPackageResolver: ToolPackageResolver;\n\n  public constructor(taskPackageResolver: ToolPackageResolver) {\n    this._toolPackageResolver = taskPackageResolver;\n  }\n\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    const { buildFolder } = heftConfiguration;\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, async (build: IBuildStageContext) => {\n      build.hooks.bundle.tap(PLUGIN_NAME, (bundle: IBundleSubstage) => {\n        bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n          // API Extractor provides an ExtractorConfig.tryLoadForFolder() API that will probe for api-extractor.json\n          // including support for rig.json.  However, Heft does not load the @microsoft/api-extractor package at all\n          // unless it sees a config/api-extractor.json file.  Thus we need to do our own lookup here.\n          const apiExtractorJsonFilePath: string | undefined =\n            await heftConfiguration.rigConfig.tryResolveConfigFilePathAsync(CONFIG_FILE_LOCATION);\n\n          if (apiExtractorJsonFilePath !== undefined) {\n            await this._runApiExtractorAsync(heftSession, {\n              heftConfiguration,\n              buildFolder,\n              debugMode: heftSession.debugMode,\n              watchMode: build.properties.watchMode,\n              production: build.properties.production,\n              apiExtractorJsonFilePath: apiExtractorJsonFilePath\n            });\n          }\n        });\n      });\n    });\n  }\n\n  private async _runApiExtractorAsync(\n    heftSession: HeftSession,\n    options: IRunApiExtractorOptions\n  ): Promise<void> {\n    const { heftConfiguration, buildFolder, debugMode, watchMode, production } = options;\n\n    const logger: ScopedLogger = heftSession.requestScopedLogger('API Extractor Plugin');\n\n    const apiExtractorTaskConfiguration: IApiExtractorPluginConfiguration | undefined =\n      await CoreConfigFiles.apiExtractorTaskConfigurationLoader.tryLoadConfigurationFileForProjectAsync(\n        logger.terminal,\n        heftConfiguration.buildFolder,\n        heftConfiguration.rigConfig\n      );\n\n    if (watchMode) {\n      logger.terminal.writeWarningLine(\"API Extractor isn't currently supported in --watch mode.\");\n      return;\n    }\n\n    const resolution: IToolPackageResolution | undefined =\n      await this._toolPackageResolver.resolveToolPackagesAsync(options.heftConfiguration, logger.terminal);\n\n    if (!resolution) {\n      logger.emitError(new Error('Unable to resolve a compiler package for tsconfig.json'));\n      return;\n    }\n\n    if (!resolution.apiExtractorPackagePath) {\n      logger.emitError(\n        new Error('Unable to resolve the \"@microsoft/api-extractor\" package for this project')\n      );\n      return;\n    }\n\n    const apiExtractorRunner: ApiExtractorRunner = new ApiExtractorRunner(\n      heftConfiguration.terminalProvider,\n      {\n        apiExtractorJsonFilePath: options.apiExtractorJsonFilePath,\n        apiExtractorPackagePath: resolution.apiExtractorPackagePath,\n        typescriptPackagePath: apiExtractorTaskConfiguration?.useProjectTypescriptVersion\n          ? resolution.typeScriptPackagePath\n          : undefined,\n        buildFolder: buildFolder,\n        production: production\n      },\n      heftSession\n    );\n    if (debugMode) {\n      await apiExtractorRunner.invokeAsync();\n    } else {\n      await apiExtractorRunner.invokeAsSubprocessAsync();\n    }\n  }\n}\n"]}