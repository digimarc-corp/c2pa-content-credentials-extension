{"version":3,"file":"CopyStaticAssetsPlugin.js","sourceRoot":"","sources":["../../src/plugins/CopyStaticAssetsPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport { ITerminal } from '@rushstack/node-core-library';\nimport { ConfigurationFile, InheritanceType, PathResolutionMethod } from '@rushstack/heft-config-file';\n\nimport { HeftSession } from '../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { IBuildStageContext, ICompileSubstage } from '../stages/BuildStage';\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\nimport { CoreConfigFiles } from '../utilities/CoreConfigFiles';\nimport { ITypeScriptConfigurationJson } from './TypeScriptPlugin/TypeScriptPlugin';\nimport { CopyFilesPlugin, IResolvedDestinationCopyConfiguration } from './CopyFilesPlugin';\n\nconst PLUGIN_NAME: string = 'CopyStaticAssetsPlugin';\n\ninterface IPartialTsconfigCompilerOptions {\n  outDir?: string;\n}\n\ninterface IPartialTsconfig {\n  compilerOptions?: IPartialTsconfigCompilerOptions;\n}\n\nexport class CopyStaticAssetsPlugin extends CopyFilesPlugin {\n  private static __partialTsconfigFileLoader: ConfigurationFile<IPartialTsconfig> | undefined;\n\n  private static get _partialTsconfigFileLoader(): ConfigurationFile<IPartialTsconfig> {\n    if (!CopyStaticAssetsPlugin.__partialTsconfigFileLoader) {\n      const schemaPath: string = path.resolve(__dirname, '..', 'schemas', 'anything.schema.json');\n      CopyStaticAssetsPlugin.__partialTsconfigFileLoader = new ConfigurationFile<IPartialTsconfig>({\n        projectRelativeFilePath: 'tsconfig.json',\n        jsonSchemaPath: schemaPath,\n        propertyInheritance: {\n          compilerOptions: {\n            inheritanceType: InheritanceType.custom,\n            inheritanceFunction: (\n              currentObject: IPartialTsconfigCompilerOptions | undefined,\n              parentObject: IPartialTsconfigCompilerOptions | undefined\n            ) => {\n              if (currentObject && !parentObject) {\n                return currentObject;\n              } else if (!currentObject && parentObject) {\n                return parentObject;\n              } else if (parentObject && currentObject) {\n                return {\n                  ...parentObject,\n                  ...currentObject\n                };\n              } else {\n                return undefined;\n              }\n            }\n          }\n        },\n        jsonPathMetadata: {\n          '$.compilerOptions.outDir': {\n            pathResolutionMethod: PathResolutionMethod.resolvePathRelativeToConfigurationFile\n          }\n        }\n      });\n    }\n\n    return CopyStaticAssetsPlugin.__partialTsconfigFileLoader;\n  }\n\n  /**\n   * @override\n   */\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  /**\n   * @override\n   */\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      build.hooks.compile.tap(PLUGIN_NAME, (compile: ICompileSubstage) => {\n        compile.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n          const logger: ScopedLogger = heftSession.requestScopedLogger('copy-static-assets');\n\n          const copyStaticAssetsConfiguration: IResolvedDestinationCopyConfiguration =\n            await this._loadCopyStaticAssetsConfigurationAsync(logger.terminal, heftConfiguration);\n\n          await this.runCopyAsync({\n            logger,\n            copyConfigurations: [copyStaticAssetsConfiguration],\n            buildFolder: heftConfiguration.buildFolder,\n            watchMode: build.properties.watchMode\n          });\n        });\n      });\n    });\n  }\n\n  private async _loadCopyStaticAssetsConfigurationAsync(\n    terminal: ITerminal,\n    heftConfiguration: HeftConfiguration\n  ): Promise<IResolvedDestinationCopyConfiguration> {\n    const typescriptConfiguration: ITypeScriptConfigurationJson | undefined =\n      await CoreConfigFiles.typeScriptConfigurationFileLoader.tryLoadConfigurationFileForProjectAsync(\n        terminal,\n        heftConfiguration.buildFolder,\n        heftConfiguration.rigConfig\n      );\n\n    const resolvedDestinationFolderPaths: Set<string> = new Set<string>();\n    const destinationFolderNames: Set<string> = new Set<string>();\n\n    const tsconfigDestinationFolderPath: string | undefined = await this._tryGetTsconfigOutDirPathAsync(\n      heftConfiguration.buildFolder,\n      terminal\n    );\n    if (tsconfigDestinationFolderPath) {\n      resolvedDestinationFolderPaths.add(tsconfigDestinationFolderPath);\n      destinationFolderNames.add(path.relative(heftConfiguration.buildFolder, tsconfigDestinationFolderPath));\n    }\n\n    for (const emitModule of typescriptConfiguration?.additionalModuleKindsToEmit || []) {\n      resolvedDestinationFolderPaths.add(\n        path.resolve(heftConfiguration.buildFolder, emitModule.outFolderName)\n      );\n      destinationFolderNames.add(emitModule.outFolderName);\n    }\n\n    return {\n      ...typescriptConfiguration?.staticAssetsToCopy,\n\n      // For now - these may need to be revised later\n      sourceFolder: 'src',\n      destinationFolders: Array.from(destinationFolderNames),\n      resolvedDestinationFolderPaths: Array.from(resolvedDestinationFolderPaths),\n      flatten: false,\n      hardlink: false\n    };\n  }\n\n  private async _tryGetTsconfigOutDirPathAsync(\n    projectFolder: string,\n    terminal: ITerminal\n  ): Promise<string | undefined> {\n    const partialTsconfig: IPartialTsconfig | undefined =\n      await CopyStaticAssetsPlugin._partialTsconfigFileLoader.tryLoadConfigurationFileForProjectAsync(\n        terminal,\n        projectFolder\n      );\n    return partialTsconfig?.compilerOptions?.outDir;\n  }\n}\n"]}