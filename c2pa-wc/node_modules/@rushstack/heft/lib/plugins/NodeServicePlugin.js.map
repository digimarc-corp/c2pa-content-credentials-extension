{"version":3,"file":"NodeServicePlugin.js","sourceRoot":"","sources":["../../src/plugins/NodeServicePlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,6DAA+C;AAC/C,iDAAmC;AACnC,2CAAyC;AACzC,oEAAmF;AAOnF,kEAA+D;AAE/D,MAAM,WAAW,GAAW,mBAAmB,CAAC;AAYhD,IAAK,KA0BJ;AA1BD,WAAK,KAAK;IACR;;;;OAIG;IACH,uCAAO,CAAA;IAEP;;OAEG;IACH,uCAAO,CAAA;IAEP;;;;;OAKG;IACH,yCAAQ,CAAA;IAER;;;OAGG;IACH,uCAAO,CAAA;AACT,CAAC,EA1BI,KAAK,KAAL,KAAK,QA0BT;AAED,MAAa,iBAAiB;IAA9B;QACkB,eAAU,GAAW,WAAW,CAAC;QAQzC,WAAM,GAAU,KAAK,CAAC,OAAO,CAAC;QAEtC;;;;;;WAMG;QACK,aAAQ,GAA+B,SAAS,CAAC;QAEzD;;;WAGG;QACK,iBAAY,GAAuB,SAAS,CAAC;QAErD;;WAEG;QACK,sBAAiB,GAAgD,SAAS,CAAC;QAYnF;;;;;WAKG;QACK,wBAAmB,GAAY,KAAK,CAAC;QAErC,mBAAc,GAAY,KAAK,CAAC;QAsGhC,mCAA8B,GAAG,GAAS,EAAE;YAClD,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAChC,2CAA2C;gBAC3C,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;gBAEjC,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;oBACjC,qDAAqD;oBACrD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;iBAChE;qBAAM;oBACL,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IA8NJ,CAAC;IA9UQ,KAAK,CAAC,WAAwB,EAAE,iBAAoC;QACzE,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;QAE/D,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,EAAE;gBAC/B,6CAA6C;gBAC7C,OAAO;aACR;YAED,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;gBACpE,MAAM,IAAI,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;gBAEtD,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAA0B,EAAE,EAAE;wBACpE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;4BAClD,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;wBAC9D,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,OAAyB,EAAE,EAAE;wBACjE,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;wBACjF,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;oBACrF,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,uBAAuB,CAAC,iBAAoC;QACxE,IAAI,CAAC,iBAAiB;YACpB,MAAM,iCAAe,CAAC,8BAA8B,CAAC,uCAAuC,CAC1F,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,iBAAiB,CAAC,WAAW,EAC7B,iBAAiB,CAAC,SAAS,CAC5B,CAAC;QAEJ,WAAW;QACX,IAAI,CAAC,cAAc,GAAG;YACpB,WAAW,EAAE,OAAO;YACpB,mBAAmB,EAAE,KAAK;YAC1B,mBAAmB,EAAE,IAAI;YACzB,kBAAkB,EAAE,IAAI;YACxB,aAAa,EAAE,IAAI;SACpB,CAAC;QAEF,kFAAkF;QAClF,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAE3B,IAAI,IAAI,CAAC,iBAAiB,CAAC,WAAW,KAAK,SAAS,EAAE;gBACpD,IAAI,CAAC,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;aACtE;YACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,KAAK,SAAS,EAAE;gBAC5D,IAAI,CAAC,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;aACtF;YACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,KAAK,SAAS,EAAE;gBAC5D,IAAI,CAAC,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;aACtF;YACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,KAAK,SAAS,EAAE;gBAC3D,IAAI,CAAC,cAAc,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;aACpF;YACD,IAAI,IAAI,CAAC,iBAAiB,CAAC,aAAa,KAAK,SAAS,EAAE;gBACtD,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC;aAC1E;YAED,IAAI,CAAC,aAAa,GAAG,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,IAAI,EAAE,CAAC,CACvE,IAAI,CAAC,cAAc,CAAC,WAAW,CAChC,CAAC;YAEF,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE;gBACpC,IAAI,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;oBAC3C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAC7B,2DAA2D;wBACzD,qBAAqB,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CACjE,CAAC;iBACH;qBAAM;oBACL,MAAM,IAAI,KAAK,CACb,wEAAwE;wBACtE,oBAAoB,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAChE,CAAC;iBACH;gBACD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;aAC7B;SACF;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,gEAAgE;gBAC9D,iCAAe,CAAC,8BAA8B,CAAC,uBAAuB,CACzE,CAAC;SACH;IACH,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAC5B,WAAwB,EACxB,iBAAoC;QAEpC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;QAE5D,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAgBO,aAAa;QACnB,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;YACjC,MAAM,IAAI,iCAAa,CAAC,eAAe,CAAC,CAAC;SAC1C;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAc,CAAC,CAAC,CAAC;QAE5F,IAAI,CAAC,mBAAmB,GAAG,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,aAAc,kBAChE,KAAK,EAAE,IAAI,EACX,KAAK,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,IACrC,wCAAoB,CAAC,mBAAmB,EAC3C,CAAC;QACH,wCAAoB,CAAC,qBAAqB,CACxC,IAAI,CAAC,mBAAmB,EACxB,wCAAoB,CAAC,mBAAmB,CACzC,CAAC;QAEF,MAAM,QAAQ,GAAW,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,4BAA4B,QAAQ,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,MAAc,EAAQ,EAAE;YAC1E,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAChC,kGAAkG;gBAClG,qGAAqG;gBACrG,2FAA2F;gBAC3F,2CAA2C;gBAE3C,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;oBACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,wBAAwB,QAAQ,0BAA0B;wBACxD,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CACzC,CAAC;oBACF,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;oBAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,OAAO;iBACR;gBAED,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;oBACnE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,wBAAwB,QAAQ,0BAA0B;wBACxD,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CACzC,CAAC;oBACF,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,OAAO;iBACR;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,+CAA+C;QAC/C,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACxC,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAChC,sEAAsE;gBACtE,OAAO,CAAC,GAAG,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAmB,EAAE,MAAqB,EAAE,EAAE;YACjF,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,4CAA4C,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CACtF,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,EAAE,EAAE;YAClD,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBAChC,0CAA0C;gBAC1C,0CAA0C;gBAC1C,yCAAyC;gBACzC,oDAAoD;gBACpD,EAAE;gBACF,sGAAsG;gBACtG,6FAA6F;gBAE7F,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;oBACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3E,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;oBAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,OAAO;iBACR;gBAED,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,QAAQ,EAAE;oBAClC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,wBAAwB,QAAQ,iCAAiC,GAAG,GAAG,CAAC,QAAQ,EAAE,CACnF,CAAC;oBACF,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,OAAO;iBACR;gBAED,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;oBACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAClC,wBAAwB,QAAQ,wBAAwB,GAAG,GAAG,CAAC,QAAQ,EAAE,CAC1E,CAAC;oBACF,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,OAAO;iBACR;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mBAAmB,CAAC,IAA+B,EAAE,MAAiC;QAC5F,IAAI,MAAM,EAAE;YACV,OAAO,YAAY,IAAI,GAAG,CAAC;SAC5B;QACD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAO,eAAe,IAAI,GAAG,CAAC;SAC/B;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,UAAU;QAChB,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,OAAO,EAAE;YACjC,OAAO;SACR;QAED,IAAI,iBAAiB,CAAC,UAAU,EAAE;YAChC,wFAAwF;YACxF,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,gGAAgG;gBAChG,MAAM,IAAI,iCAAa,CAAC,6CAA6C,CAAC,CAAC;aACxE;YAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC;YAC7B,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,6DAA6D,CAAC,CAAC;YAEtG,sFAAsF;YACtF,oEAAoE;YACpE,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAEvD,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;gBAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,qDAAqD,CAAC,CAAC;gBAC9F,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC9B,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;SAC5C;IACH,CAAC;IAEO,oBAAoB;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,gGAAgG;YAChG,MAAM,IAAI,iCAAa,CAAC,6CAA6C,CAAC,CAAC;SACxE;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,2CAA2C,CAAC,CAAC;QAEpF,wCAAoB,CAAC,eAAe,CAAC,IAAI,CAAC,mBAAmB,EAAE,wCAAoB,CAAC,mBAAmB,CAAC,CAAC;QAEzG,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,+DAA+D,CAAC,CAAC;YACtG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC9B,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;IAEO,oBAAoB;QAC1B,kBAAkB;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;QAErC,2CAA2C;QAC3C,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;SAChE;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAC7B,2FAA2F,CAC5F,CAAC;SACH;IACH,CAAC;IAEO,gBAAgB,CAAC,SAAiB;QACxC,MAAM,OAAO,GAAW,wBAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QACtD,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE;YAClE,OAAO;SACR;QAED,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,SAAS,eAAe,CAAC,CAAC;QAEjF,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAE9B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAC1D,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,GAAG,wBAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAEO,aAAa;QACnB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;SAC3B;IACH,CAAC;IAEO,uBAAuB,CAAC,MAAkB;QAChD,IAAI;YACF,MAAM,EAAE,CAAC;SACV;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAc,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAErE,yCAAyC;YACzC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;IACH,CAAC;;AAhYH,8CAiYC;AA9XyB,4BAAU,GAAY,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as child_process from 'child_process';\nimport * as process from 'process';\nimport { performance } from 'perf_hooks';\nimport { InternalError, SubprocessTerminator } from '@rushstack/node-core-library';\n\nimport { HeftSession } from '../pluginFramework/HeftSession';\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { IBuildStageContext, ICompileSubstage, IPostBuildSubstage } from '../stages/BuildStage';\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\nimport { IHeftPlugin } from '../pluginFramework/IHeftPlugin';\nimport { CoreConfigFiles } from '../utilities/CoreConfigFiles';\n\nconst PLUGIN_NAME: string = 'NodeServicePlugin';\n\nexport interface INodeServicePluginCompleteConfiguration {\n  commandName: string;\n  ignoreMissingScript: boolean;\n  waitBeforeRestartMs: number;\n  waitForTerminateMs: number;\n  waitForKillMs: number;\n}\n\nexport interface INodeServicePluginConfiguration extends Partial<INodeServicePluginCompleteConfiguration> {}\n\nenum State {\n  /**\n   * The service process is not running, and _activeChildProcess is undefined.\n   *\n   * In this state, there may or may not be a timeout scheduled that will later restart the service.\n   */\n  Stopped,\n\n  /**\n   * The service process is running normally.\n   */\n  Running,\n\n  /**\n   * The SIGTERM signal has been sent to the service process, and we are waiting for it\n   * to shut down gracefully.\n   *\n   * NOTE: On Windows OS, SIGTERM is skipped and we proceed directly to SIGKILL.\n   */\n  Stopping,\n\n  /**\n   * The SIGKILL signal has been sent to forcibly terminate the service process, and we are waiting\n   * to confirm that the operation has completed.\n   */\n  Killing\n}\n\nexport class NodeServicePlugin implements IHeftPlugin {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  private static readonly _isWindows: boolean = process.platform === 'win32';\n\n  private _logger!: ScopedLogger;\n\n  private _activeChildProcess: child_process.ChildProcess | undefined;\n\n  private _state: State = State.Stopped;\n\n  /**\n   * The state machine schedules at most one setInterval() timeout at any given time.  It is for:\n   *\n   * - waitBeforeRestartMs in State.Stopped\n   * - waitForTerminateMs in State.Stopping\n   * - waitForKillMs in State.Killing\n   */\n  private _timeout: NodeJS.Timeout | undefined = undefined;\n\n  /**\n   * Used by _scheduleRestart().  The process will be automatically restarted when performance.now()\n   * exceeds this time.\n   */\n  private _restartTime: number | undefined = undefined;\n\n  /**\n   * The data read from the node-service.json config file, or \"undefined\" if the file is missing.\n   */\n  private _rawConfiguration: INodeServicePluginConfiguration | undefined = undefined;\n\n  /**\n   * The effective configuration, with defaults applied.\n   */\n  private _configuration!: INodeServicePluginCompleteConfiguration;\n\n  /**\n   * The script body obtained from the \"scripts\" section in the project's package.json.\n   */\n  private _shellCommand: string | undefined;\n\n  /**\n   * This is set to true when the child process terminates unexpectedly (for example, something like\n   * \"the service listening port is already in use\" or \"unable to authenticate to the database\").\n   * Rather than attempting to restart in a potentially endless loop, instead we will wait until \"watch mode\"\n   * recompiles the project.\n   */\n  private _childProcessFailed: boolean = false;\n\n  private _pluginEnabled: boolean = false;\n\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    this._logger = heftSession.requestScopedLogger('node-service');\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      if (!build.properties.serveMode) {\n        // This plugin is only used with \"heft start\"\n        return;\n      }\n\n      build.hooks.loadStageConfiguration.tapPromise(PLUGIN_NAME, async () => {\n        await this._loadStageConfiguration(heftConfiguration);\n\n        if (this._pluginEnabled) {\n          build.hooks.postBuild.tap(PLUGIN_NAME, (bundle: IPostBuildSubstage) => {\n            bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n              await this._runCommandAsync(heftSession, heftConfiguration);\n            });\n          });\n\n          build.hooks.compile.tap(PLUGIN_NAME, (compile: ICompileSubstage) => {\n            compile.hooks.afterCompile.tap(PLUGIN_NAME, this._compileHooks_afterEachCompile);\n            compile.hooks.afterRecompile.tap(PLUGIN_NAME, this._compileHooks_afterEachCompile);\n          });\n        }\n      });\n    });\n  }\n\n  private async _loadStageConfiguration(heftConfiguration: HeftConfiguration): Promise<void> {\n    this._rawConfiguration =\n      await CoreConfigFiles.nodeServiceConfigurationLoader.tryLoadConfigurationFileForProjectAsync(\n        this._logger.terminal,\n        heftConfiguration.buildFolder,\n        heftConfiguration.rigConfig\n      );\n\n    // defaults\n    this._configuration = {\n      commandName: 'serve',\n      ignoreMissingScript: false,\n      waitBeforeRestartMs: 2000,\n      waitForTerminateMs: 2000,\n      waitForKillMs: 2000\n    };\n\n    // TODO: @rushstack/heft-config-file should be able to read a *.defaults.json file\n    if (this._rawConfiguration) {\n      this._pluginEnabled = true;\n\n      if (this._rawConfiguration.commandName !== undefined) {\n        this._configuration.commandName = this._rawConfiguration.commandName;\n      }\n      if (this._rawConfiguration.ignoreMissingScript !== undefined) {\n        this._configuration.ignoreMissingScript = this._rawConfiguration.ignoreMissingScript;\n      }\n      if (this._rawConfiguration.waitBeforeRestartMs !== undefined) {\n        this._configuration.waitBeforeRestartMs = this._rawConfiguration.waitBeforeRestartMs;\n      }\n      if (this._rawConfiguration.waitForTerminateMs !== undefined) {\n        this._configuration.waitForTerminateMs = this._rawConfiguration.waitForTerminateMs;\n      }\n      if (this._rawConfiguration.waitForKillMs !== undefined) {\n        this._configuration.waitForKillMs = this._rawConfiguration.waitForKillMs;\n      }\n\n      this._shellCommand = (heftConfiguration.projectPackageJson.scripts || {})[\n        this._configuration.commandName\n      ];\n\n      if (this._shellCommand === undefined) {\n        if (this._configuration.ignoreMissingScript) {\n          this._logger.terminal.writeLine(\n            `The plugin is disabled because the project's package.json` +\n              ` does not have a \"${this._configuration.commandName}\" script`\n          );\n        } else {\n          throw new Error(\n            `The node-service task cannot start because the project's package.json ` +\n              `does not have a \"${this._configuration.commandName}\" script`\n          );\n        }\n        this._pluginEnabled = false;\n      }\n    } else {\n      this._logger.terminal.writeVerboseLine(\n        'The plugin is disabled because its config file was not found: ' +\n          CoreConfigFiles.nodeServiceConfigurationLoader.projectRelativeFilePath\n      );\n    }\n  }\n\n  private async _runCommandAsync(\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration\n  ): Promise<void> {\n    this._logger.terminal.writeLine(`Starting Node service...`);\n\n    this._restartChild();\n  }\n\n  private _compileHooks_afterEachCompile = (): void => {\n    this._trapUnhandledException(() => {\n      // We've recompiled, so try launching again\n      this._childProcessFailed = false;\n\n      if (this._state === State.Stopped) {\n        // If we are already stopped, then extend the timeout\n        this._scheduleRestart(this._configuration.waitBeforeRestartMs);\n      } else {\n        this._stopChild();\n      }\n    });\n  };\n\n  private _restartChild(): void {\n    if (this._state !== State.Stopped) {\n      throw new InternalError('Invalid state');\n    }\n\n    this._state = State.Running;\n    this._clearTimeout();\n\n    this._logger.terminal.writeLine('Invoking command: ' + JSON.stringify(this._shellCommand!));\n\n    this._activeChildProcess = child_process.spawn(this._shellCommand!, {\n      shell: true,\n      stdio: ['inherit', 'inherit', 'inherit'],\n      ...SubprocessTerminator.RECOMMENDED_OPTIONS\n    });\n    SubprocessTerminator.killProcessTreeOnExit(\n      this._activeChildProcess,\n      SubprocessTerminator.RECOMMENDED_OPTIONS\n    );\n\n    const childPid: number = this._activeChildProcess.pid;\n    this._logger.terminal.writeVerboseLine(`Started service process #${childPid}`);\n\n    this._activeChildProcess.on('close', (code: number, signal: string): void => {\n      this._trapUnhandledException(() => {\n        // The 'close' event is emitted after a process has ended and the stdio streams of a child process\n        // have been closed. This is distinct from the 'exit' event, since multiple processes might share the\n        // same stdio streams. The 'close' event will always emit after 'exit' was already emitted,\n        // or 'error' if the child failed to spawn.\n\n        if (this._state === State.Running) {\n          this._logger.terminal.writeWarningLine(\n            `The service process #${childPid} terminated unexpectedly` +\n              this._formatCodeOrSignal(code, signal)\n          );\n          this._childProcessFailed = true;\n          this._transitionToStopped();\n          return;\n        }\n\n        if (this._state === State.Stopping || this._state === State.Killing) {\n          this._logger.terminal.writeVerboseLine(\n            `The service process #${childPid} terminated successfully` +\n              this._formatCodeOrSignal(code, signal)\n          );\n          this._transitionToStopped();\n          return;\n        }\n      });\n    });\n\n    // This is event only fires for Node.js >= 15.x\n    this._activeChildProcess.on('spawn', () => {\n      this._trapUnhandledException(() => {\n        // Print a newline to separate the service's STDOUT from Heft's output\n        console.log();\n      });\n    });\n\n    this._activeChildProcess.on('exit', (code: number | null, signal: string | null) => {\n      this._trapUnhandledException(() => {\n        this._logger.terminal.writeVerboseLine(\n          `The service process fired its \"exit\" event` + this._formatCodeOrSignal(code, signal)\n        );\n      });\n    });\n\n    this._activeChildProcess.on('error', (err: Error) => {\n      this._trapUnhandledException(() => {\n        // \"The 'error' event is emitted whenever:\n        // 1. The process could not be spawned, or\n        // 2. The process could not be killed, or\n        // 3. Sending a message to the child process failed.\n        //\n        // The 'exit' event may or may not fire after an error has occurred. When listening to both the 'exit'\n        // and 'error' events, guard against accidentally invoking handler functions multiple times.\"\n\n        if (this._state === State.Running) {\n          this._logger.terminal.writeErrorLine(`Failed to start: ` + err.toString());\n          this._childProcessFailed = true;\n          this._transitionToStopped();\n          return;\n        }\n\n        if (this._state === State.Stopping) {\n          this._logger.terminal.writeWarningLine(\n            `The service process #${childPid} rejected the shutdown signal: ` + err.toString()\n          );\n          this._transitionToKilling();\n          return;\n        }\n\n        if (this._state === State.Killing) {\n          this._logger.terminal.writeErrorLine(\n            `The service process #${childPid} could not be killed: ` + err.toString()\n          );\n          this._transitionToStopped();\n          return;\n        }\n      });\n    });\n  }\n\n  private _formatCodeOrSignal(code: number | null | undefined, signal: string | null | undefined): string {\n    if (signal) {\n      return ` (signal=${code})`;\n    }\n    if (typeof code === 'number') {\n      return ` (exit code ${code})`;\n    }\n    return '';\n  }\n\n  private _stopChild(): void {\n    if (this._state !== State.Running) {\n      return;\n    }\n\n    if (NodeServicePlugin._isWindows) {\n      // On Windows, SIGTERM can kill Cmd.exe and leave its children running in the background\n      this._transitionToKilling();\n    } else {\n      if (!this._activeChildProcess) {\n        // All the code paths that set _activeChildProcess=undefined should also leave the Running state\n        throw new InternalError('_activeChildProcess should not be undefined');\n      }\n\n      this._state = State.Stopping;\n      this._clearTimeout();\n\n      this._logger.terminal.writeVerboseLine('Sending SIGTERM to gracefully shut down the service process');\n\n      // Passing a negative PID terminates the entire group instead of just the one process.\n      // This works because we set detached=true for child_process.spawn()\n      process.kill(-this._activeChildProcess.pid, 'SIGTERM');\n\n      this._clearTimeout();\n      this._timeout = setTimeout(() => {\n        this._timeout = undefined;\n        this._logger.terminal.writeWarningLine('The service process is taking too long to terminate');\n        this._transitionToKilling();\n      }, this._configuration.waitForTerminateMs);\n    }\n  }\n\n  private _transitionToKilling(): void {\n    this._state = State.Killing;\n    this._clearTimeout();\n\n    if (!this._activeChildProcess) {\n      // All the code paths that set _activeChildProcess=undefined should also leave the Running state\n      throw new InternalError('_activeChildProcess should not be undefined');\n    }\n\n    this._logger.terminal.writeVerboseLine('Attempting to killing the service process');\n\n    SubprocessTerminator.killProcessTree(this._activeChildProcess, SubprocessTerminator.RECOMMENDED_OPTIONS);\n\n    this._clearTimeout();\n    this._timeout = setTimeout(() => {\n      this._timeout = undefined;\n      this._logger.terminal.writeErrorLine('Abandoning the service process because it could not be killed');\n      this._transitionToStopped();\n    }, this._configuration.waitForKillMs);\n  }\n\n  private _transitionToStopped(): void {\n    // Failed to start\n    this._state = State.Stopped;\n    this._clearTimeout();\n\n    this._activeChildProcess = undefined;\n\n    // Once we have stopped, schedule a restart\n    if (!this._childProcessFailed) {\n      this._scheduleRestart(this._configuration.waitBeforeRestartMs);\n    } else {\n      this._logger.terminal.writeLine(\n        'The service process has failed.  Waiting for watch mode to recompile before restarting...'\n      );\n    }\n  }\n\n  private _scheduleRestart(msFromNow: number): void {\n    const newTime: number = performance.now() + msFromNow;\n    if (this._restartTime !== undefined && newTime < this._restartTime) {\n      return;\n    }\n\n    this._restartTime = newTime;\n    this._logger.terminal.writeVerboseLine(`Sleeping for ${msFromNow} milliseconds`);\n\n    this._clearTimeout();\n    this._timeout = setTimeout(() => {\n      this._timeout = undefined;\n      this._restartTime = undefined;\n\n      this._logger.terminal.writeVerboseLine('Time to restart');\n      this._restartChild();\n    }, Math.max(0, this._restartTime - performance.now()));\n  }\n\n  private _clearTimeout(): void {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = undefined;\n    }\n  }\n\n  private _trapUnhandledException(action: () => void): void {\n    try {\n      action();\n    } catch (error) {\n      this._logger.emitError(error as Error);\n      this._logger.terminal.writeErrorLine('An unexpected error occurred');\n\n      // TODO: Provide a Heft facility for this\n      process.exit(1);\n    }\n  }\n}\n"]}