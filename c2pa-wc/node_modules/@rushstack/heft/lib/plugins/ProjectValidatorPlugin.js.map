{"version":3,"file":"ProjectValidatorPlugin.js","sourceRoot":"","sources":["../../src/plugins/ProjectValidatorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport { FileSystem, Path, FolderItem } from '@rushstack/node-core-library';\n\nimport { HeftConfiguration } from '../configuration/HeftConfiguration';\nimport { Constants } from '../utilities/Constants';\nimport { ScopedLogger } from '../pluginFramework/logging/ScopedLogger';\nimport { IHeftPlugin } from '../pluginFramework/IHeftPlugin';\nimport { HeftSession } from '../pluginFramework/HeftSession';\nimport { IHeftLifecycle } from '../pluginFramework/HeftLifecycle';\nimport { Hook } from 'tapable';\nimport { ITestStageContext } from '../stages/TestStage';\nimport { IBuildStageContext, IBundleSubstage } from '../stages/BuildStage';\n\nconst ALLOWED_HEFT_DATA_FOLDER_FILES: Set<string> = new Set<string>();\nconst ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS: Set<string> = new Set<string>([Constants.buildCacheFolderName]);\n\nconst PLUGIN_NAME: string = 'ProjectValidatorPlugin';\n\n/**\n * This plugin is a place to do generic project-level validation. For example, ensuring that only expected\n * files are in the \".heft\" folder (i.e. - legacy config files aren't still there)\n */\nexport class ProjectValidatorPlugin implements IHeftPlugin {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  public apply(heftSession: HeftSession, heftConfiguration: HeftConfiguration): void {\n    const logger: ScopedLogger = heftSession.requestScopedLogger('project-validation');\n\n    heftSession.hooks.heftLifecycle.tap(PLUGIN_NAME, (heftLifecycle: IHeftLifecycle) => {\n      heftLifecycle.hooks.toolStart.tapPromise(PLUGIN_NAME, async () => {\n        await this._scanHeftDataFolderAsync(logger, heftConfiguration);\n      });\n    });\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      build.hooks.bundle.tap(PLUGIN_NAME, (bundle: IBundleSubstage) => {\n        bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n          const missingPluginCandidatePackageNames: string[] = [\n            '@rushstack/heft-webpack4-plugin',\n            '@rushstack/heft-webpack5-plugin'\n          ];\n          const missingPluginDocumentationUrl: string = 'https://rushstack.io/pages/heft_tasks/webpack/';\n          const missingPlugin: boolean = await this._checkPluginIsMissingAsync(\n            'WebpackPlugin',\n            Path.convertToSlashes(`${heftConfiguration.buildFolder}/webpack.config.js`),\n            missingPluginCandidatePackageNames,\n            missingPluginDocumentationUrl,\n            bundle.hooks.run,\n            logger\n          );\n          if (missingPlugin && !!bundle.properties.webpackConfiguration) {\n            logger.emitWarning(\n              new Error(\n                'Your project appears to have a Webpack configuration generated by a plugin, ' +\n                  'but the associated Heft plugin is not enabled. To fix this, you can add ' +\n                  `${missingPluginCandidatePackageNames\n                    .map((packageName) => `\"${packageName}\"`)\n                    .join(' or ')} ` +\n                  'to your package.json \"devDependencies\" and use \"config/heft.json\" to load it. For details, ' +\n                  `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`\n              )\n            );\n          }\n        });\n      });\n    });\n\n    heftSession.hooks.test.tap(PLUGIN_NAME, (test: ITestStageContext) => {\n      test.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n        await this._checkPluginIsMissingAsync(\n          'JestPlugin',\n          Path.convertToSlashes(`${heftConfiguration.buildFolder}/config/jest.config.json`),\n          ['@rushstack/heft-jest-plugin'],\n          'https://rushstack.io/pages/heft_tasks/jest/',\n          test.hooks.run,\n          logger\n        );\n      });\n    });\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      build.hooks.preCompile.tap(PLUGIN_NAME, async () => {\n        await this._checkPluginIsMissingAsync(\n          'SassTypingsPlugin',\n          Path.convertToSlashes(`${heftConfiguration.buildFolder}/config/sass.json`),\n          ['@rushstack/heft-sass-plugin'],\n          'https://rushstack.io/pages/heft_tasks/sass-typings/',\n          build.hooks.preCompile,\n          logger\n        );\n      });\n    });\n  }\n\n  private async _scanHeftDataFolderAsync(\n    logger: ScopedLogger,\n    heftConfiguration: HeftConfiguration\n  ): Promise<void> {\n    let heftDataFolderContents: FolderItem[];\n    try {\n      heftDataFolderContents = await FileSystem.readFolderItemsAsync(heftConfiguration.projectHeftDataFolder);\n    } catch (e) {\n      if (!FileSystem.isNotExistError(e as Error)) {\n        throw e;\n      } else {\n        return;\n      }\n    }\n\n    const disallowedItemNames: string[] = [];\n    for (const folderItem of heftDataFolderContents) {\n      const itemName: string = folderItem.name;\n      if (folderItem.isDirectory()) {\n        if (!ALLOWED_HEFT_DATA_FOLDER_SUBFOLDERS.has(itemName)) {\n          disallowedItemNames.push(`\"${itemName}/\"`);\n        }\n      } else {\n        if (!ALLOWED_HEFT_DATA_FOLDER_FILES.has(itemName)) {\n          disallowedItemNames.push(`\"${itemName}\"`);\n        }\n      }\n    }\n\n    if (disallowedItemNames.length > 0) {\n      logger.emitWarning(\n        new Error(\n          `Found unexpected items in the \"${Constants.projectHeftFolderName}\" ` +\n            `folder: ${disallowedItemNames.join(', ')}. If any of these are config files, they ` +\n            `should go in the project's \"${Constants.projectConfigFolderName}\" folder.`\n        )\n      );\n    }\n  }\n\n  /**\n   * A utility method to use as the tap function to the provided hook. Determines if the\n   * requested plugin is installed and warns otherwise if related configuration files were\n   * found. Returns false if the plugin was found, otherwise true.\n   */\n  private async _checkPluginIsMissingAsync(\n    missingPluginName: string,\n    configFilePath: string,\n    missingPluginCandidatePackageNames: string[],\n    missingPluginDocumentationUrl: string,\n    hookToTap: Hook,\n    logger: ScopedLogger\n  ): Promise<boolean> {\n    // If we have the plugin, we don't need to check anything else\n    for (const tap of hookToTap.taps) {\n      if (tap.name === missingPluginName) {\n        return false;\n      }\n    }\n\n    // Warn if any were found\n    if (await FileSystem.existsAsync(configFilePath)) {\n      logger.emitWarning(\n        new Error(\n          `The configuration file \"${configFilePath}\" exists in your project, but the associated Heft plugin ` +\n            'is not enabled. To fix this, you can add ' +\n            `${missingPluginCandidatePackageNames.map((packageName) => `\"${packageName}\"`).join(' or ')} ` +\n            'to your package.json \"devDependencies\" and use \"config/heft.json\" to load it. For details, ' +\n            `see Heft's UPGRADING.md notes and this article: ${missingPluginDocumentationUrl}`\n        )\n      );\n    }\n\n    return true;\n  }\n}\n"]}