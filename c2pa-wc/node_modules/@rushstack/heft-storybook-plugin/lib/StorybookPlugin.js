"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorybookPlugin = void 0;
const path = __importStar(require("path"));
const node_core_library_1 = require("@rushstack/node-core-library");
const StorybookRunner_1 = require("./StorybookRunner");
const PLUGIN_NAME = 'StorybookPlugin';
const TASK_NAME = 'heft-storybook';
/** @public */
class StorybookPlugin {
    constructor() {
        this.pluginName = PLUGIN_NAME;
    }
    /**
     * Generate typings for Sass files before TypeScript compilation.
     */
    apply(heftSession, heftConfiguration, options) {
        this._logger = heftSession.requestScopedLogger(TASK_NAME);
        if (!options.storykitPackageName) {
            throw new Error(`The ${TASK_NAME} task cannot start because the "storykitPackageName"` +
                ` plugin option was not specified`);
        }
        const parseResult = node_core_library_1.PackageName.tryParse(options.storykitPackageName);
        if (parseResult.error) {
            throw new Error(`The ${TASK_NAME} task cannot start because the "storykitPackageName"` +
                ` plugin option is not a valid package name: ` +
                parseResult.error);
        }
        this._storykitPackageName = options.storykitPackageName;
        if (!options.startupModulePath) {
            throw new Error(`The ${TASK_NAME} task cannot start because the "startupModulePath"` +
                ` plugin option was not specified`);
        }
        this._startupModulePath = options.startupModulePath;
        const storybookParameters = heftSession.commandLine.registerFlagParameter({
            associatedActionNames: ['start'],
            parameterLongName: '--storybook',
            description: '(EXPERIMENTAL) Used by the "@rushstack/heft-storybook-plugin" package to launch Storybook.'
        });
        heftSession.hooks.build.tap(PLUGIN_NAME, (build) => {
            if (!storybookParameters.actionAssociated || !storybookParameters.value) {
                this._logger.terminal.writeVerboseLine('The command line does not include "--storybook", so bundling will proceed without Storybook');
                return;
            }
            this._logger.terminal.writeVerboseLine('The command line includes "--storybook", redirecting Webpack to Storybook');
            build.hooks.preCompile.tap(PLUGIN_NAME, (preCompile) => {
                preCompile.hooks.run.tapPromise(PLUGIN_NAME, () => {
                    return this._onPreCompileAsync(heftConfiguration);
                });
            });
            build.hooks.bundle.tap(PLUGIN_NAME, (bundle) => {
                bundle.hooks.configureWebpack.tap({ name: PLUGIN_NAME, stage: Number.MAX_SAFE_INTEGER }, (webpackConfiguration) => {
                    // Discard Webpack's configuration to prevent Webpack from running
                    return null;
                });
                bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {
                    await this._onBundleRunAsync(heftSession, heftConfiguration);
                });
            });
        });
    }
    async _onPreCompileAsync(heftConfiguration) {
        this._logger.terminal.writeVerboseLine(`Probing for "${this._storykitPackageName}"`);
        // Example: "/path/to/my-project/node_modules/my-storykit"
        let storykitFolder;
        try {
            storykitFolder = node_core_library_1.Import.resolvePackage({
                packageName: this._storykitPackageName,
                baseFolderPath: heftConfiguration.buildFolder
            });
        }
        catch (ex) {
            throw new Error(`The ${TASK_NAME} task cannot start: ` + ex.message);
        }
        this._logger.terminal.writeVerboseLine(`Found "${this._storykitPackageName}" in ` + storykitFolder);
        // Example: "/path/to/my-project/node_modules/my-storykit/node_modules"
        const storykitModuleFolder = path.join(storykitFolder, 'node_modules');
        if (!(await node_core_library_1.FileSystem.existsAsync(storykitModuleFolder))) {
            throw new Error(`The ${TASK_NAME} task cannot start because the storykit module folder does not exist:\n` +
                storykitModuleFolder +
                '\nDid you forget to install it?');
        }
        this._logger.terminal.writeVerboseLine(`Resolving startupModulePath "${this._startupModulePath}"`);
        try {
            this._resolvedStartupModulePath = node_core_library_1.Import.resolveModule({
                modulePath: this._startupModulePath,
                baseFolderPath: storykitModuleFolder
            });
        }
        catch (ex) {
            throw new Error(`The ${TASK_NAME} task cannot start: ` + ex.message);
        }
        this._logger.terminal.writeVerboseLine(`Resolved startupModulePath is "${this._resolvedStartupModulePath}"`);
        // Example: "/path/to/my-project/.storybook"
        const dotStorybookFolder = path.join(heftConfiguration.buildFolder, '.storybook');
        await node_core_library_1.FileSystem.ensureFolderAsync(dotStorybookFolder);
        // Example: "/path/to/my-project/.storybook/node_modules"
        const dotStorybookModuleFolder = path.join(dotStorybookFolder, 'node_modules');
        // Example:
        //   LINK FROM: "/path/to/my-project/.storybook/node_modules"
        //   TARGET:    "/path/to/my-project/node_modules/my-storykit/node_modules"
        //
        // For node_modules links it's standard to use createSymbolicLinkJunction(), which avoids
        // administrator elevation on Windows; on other operating systems it will create a symbolic link.
        await node_core_library_1.FileSystem.createSymbolicLinkJunctionAsync({
            newLinkPath: dotStorybookModuleFolder,
            linkTargetPath: storykitModuleFolder,
            alreadyExistsBehavior: node_core_library_1.AlreadyExistsBehavior.Overwrite
        });
    }
    async _onBundleRunAsync(heftSession, heftConfiguration) {
        this._logger.terminal.writeLine('Starting Storybook runner...');
        const storybookRunner = new StorybookRunner_1.StorybookRunner(heftConfiguration.terminalProvider, {
            buildFolder: heftConfiguration.buildFolder,
            resolvedStartupModulePath: this._resolvedStartupModulePath
        }, 
        // TODO: Extract SubprocessRunnerBase into a public API
        // eslint-disable-next-line
        heftSession);
        if (heftSession.debugMode) {
            await storybookRunner.invokeAsync();
        }
        else {
            await storybookRunner.invokeAsSubprocessAsync();
        }
    }
}
exports.StorybookPlugin = StorybookPlugin;
//# sourceMappingURL=StorybookPlugin.js.map