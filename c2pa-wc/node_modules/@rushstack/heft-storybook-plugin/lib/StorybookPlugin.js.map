{"version":3,"file":"StorybookPlugin.js","sourceRoot":"","sources":["../src/StorybookPlugin.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3D,2CAA6B;AAC7B,oEAMsC;AAWtC,uDAAoD;AAEpD,MAAM,WAAW,GAAW,iBAAiB,CAAC;AAC9C,MAAM,SAAS,GAAW,gBAAgB,CAAC;AA4C3C,cAAc;AACd,MAAa,eAAe;IAA5B;QACkB,eAAU,GAAW,WAAW,CAAC;IAoKnD,CAAC;IA7JC;;OAEG;IACI,KAAK,CACV,WAAwB,EACxB,iBAAoC,EACpC,OAAgC;QAEhC,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QAE1D,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE;YAChC,MAAM,IAAI,KAAK,CACb,OAAO,SAAS,sDAAsD;gBACpE,kCAAkC,CACrC,CAAC;SACH;QAED,MAAM,WAAW,GAA8B,+BAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACjG,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,MAAM,IAAI,KAAK,CACb,OAAO,SAAS,sDAAsD;gBACpE,8CAA8C;gBAC9C,WAAW,CAAC,KAAK,CACpB,CAAC;SACH;QACD,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,mBAAmB,CAAC;QAExD,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;YAC9B,MAAM,IAAI,KAAK,CACb,OAAO,SAAS,oDAAoD;gBAClE,kCAAkC,CACrC,CAAC;SACH;QACD,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,CAAC;QAEpD,MAAM,mBAAmB,GAAuB,WAAW,CAAC,WAAW,CAAC,qBAAqB,CAAC;YAC5F,qBAAqB,EAAE,CAAC,OAAO,CAAC;YAChC,iBAAiB,EAAE,aAAa;YAChC,WAAW,EACT,4FAA4F;SAC/F,CAAC,CAAC;QAEH,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,KAAyB,EAAE,EAAE;YACrE,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE;gBACvE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,6FAA6F,CAC9F,CAAC;gBACF,OAAO;aACR;YAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,2EAA2E,CAC5E,CAAC;YAEF,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,UAA+B,EAAE,EAAE;gBAC1E,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE;oBAChD,OAAO,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAuB,EAAE,EAAE;gBAC9D,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAC/B,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,gBAAgB,EAAE,EACrD,CAAC,oBAA6B,EAAE,EAAE;oBAChC,kEAAkE;oBAClE,OAAO,IAAI,CAAC;gBACd,CAAC,CACF,CAAC;gBAEF,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;oBAClD,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;gBAC/D,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,iBAAoC;QACnE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAErF,0DAA0D;QAC1D,IAAI,cAAsB,CAAC;QAC3B,IAAI;YACF,cAAc,GAAG,0BAAM,CAAC,cAAc,CAAC;gBACrC,WAAW,EAAE,IAAI,CAAC,oBAAoB;gBACtC,cAAc,EAAE,iBAAiB,CAAC,WAAW;aAC9C,CAAC,CAAC;SACJ;QAAC,OAAO,EAAE,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,OAAO,SAAS,sBAAsB,GAAI,EAAY,CAAC,OAAO,CAAC,CAAC;SACjF;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,IAAI,CAAC,oBAAoB,OAAO,GAAG,cAAc,CAAC,CAAC;QAEpG,uEAAuE;QACvE,MAAM,oBAAoB,GAAW,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QAC/E,IAAI,CAAC,CAAC,MAAM,8BAAU,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC,EAAE;YACzD,MAAM,IAAI,KAAK,CACb,OAAO,SAAS,yEAAyE;gBACvF,oBAAoB;gBACpB,iCAAiC,CACpC,CAAC;SACH;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,gCAAgC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;QACnG,IAAI;YACF,IAAI,CAAC,0BAA0B,GAAG,0BAAM,CAAC,aAAa,CAAC;gBACrD,UAAU,EAAE,IAAI,CAAC,kBAAkB;gBACnC,cAAc,EAAE,oBAAoB;aACrC,CAAC,CAAC;SACJ;QAAC,OAAO,EAAE,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,OAAO,SAAS,sBAAsB,GAAI,EAAY,CAAC,OAAO,CAAC,CAAC;SACjF;QACD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CACpC,kCAAkC,IAAI,CAAC,0BAA0B,GAAG,CACrE,CAAC;QAEF,4CAA4C;QAC5C,MAAM,kBAAkB,GAAW,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;QAC1F,MAAM,8BAAU,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;QAEvD,yDAAyD;QACzD,MAAM,wBAAwB,GAAW,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAC;QAEvF,WAAW;QACX,6DAA6D;QAC7D,2EAA2E;QAC3E,EAAE;QACF,yFAAyF;QACzF,iGAAiG;QACjG,MAAM,8BAAU,CAAC,+BAA+B,CAAC;YAC/C,WAAW,EAAE,wBAAwB;YACrC,cAAc,EAAE,oBAAoB;YACpC,qBAAqB,EAAE,yCAAqB,CAAC,SAAS;SACvD,CAAC,CAAC;IACL,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,WAAwB,EACxB,iBAAoC;QAEpC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;QAEhE,MAAM,eAAe,GAAoB,IAAI,iCAAe,CAC1D,iBAAiB,CAAC,gBAAgB,EAClC;YACE,WAAW,EAAE,iBAAiB,CAAC,WAAW;YAC1C,yBAAyB,EAAE,IAAI,CAAC,0BAA0B;SAC3D;QACD,uDAAuD;QACvD,2BAA2B;QAC3B,WAAkB,CACnB,CAAC;QACF,IAAI,WAAW,CAAC,SAAS,EAAE;YACzB,MAAM,eAAe,CAAC,WAAW,EAAE,CAAC;SACrC;aAAM;YACL,MAAM,eAAe,CAAC,uBAAuB,EAAE,CAAC;SACjD;IACH,CAAC;CACF;AArKD,0CAqKC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport * as path from 'path';\nimport {\n  AlreadyExistsBehavior,\n  FileSystem,\n  Import,\n  IParsedPackageNameOrError,\n  PackageName\n} from '@rushstack/node-core-library';\nimport type {\n  HeftConfiguration,\n  HeftSession,\n  IBuildStageContext,\n  IBundleSubstage,\n  IHeftPlugin,\n  IHeftFlagParameter,\n  IPreCompileSubstage,\n  ScopedLogger\n} from '@rushstack/heft';\nimport { StorybookRunner } from './StorybookRunner';\n\nconst PLUGIN_NAME: string = 'StorybookPlugin';\nconst TASK_NAME: string = 'heft-storybook';\n\n/**\n * Options for `StorybookPlugin`.\n *\n * @public\n */\nexport interface IStorybookPluginOptions {\n  /**\n   * Specifies an NPM package that will provide the Storybook dependencies for the project.\n   *\n   * @example\n   * `\"storykitPackageName\": \"my-react-storykit\"`\n   *\n   * @remarks\n   *\n   * Storybook's conventional approach is for your app project to have direct dependencies\n   * on NPM packages such as `@storybook/react` and `@storybook/addon-essentials`.  These packages have\n   * heavyweight dependencies such as Babel, Webpack, and the associated loaders and plugins needed to\n   * build the Storybook app (which is bundled completely independently from Heft).  Naively adding these\n   * dependencies to your app's package.json muddies the waters of two radically different toolchains,\n   * and is likely to lead to dependency conflicts, for example if Heft installs Webpack 5 but\n   * `@storybook/react` installs Webpack 4.\n   *\n   * To solve this problem, `heft-storybook-plugin` introduces the concept of a separate\n   * \"storykit package\".  All of your Storybook NPM packages are moved to be dependencies of the\n   * storykit.  Storybook's browser API unfortunately isn't separated into dedicated NPM packages,\n   * but instead is exported by the Node.js toolchain packages such as `@storybook/react`.  For\n   * an even cleaner separation the storykit package can simply reexport such APIs.\n   */\n  storykitPackageName: string;\n\n  /**\n   * The module entry point that Heft should use to launch the Storybook toolchain.  Typically it\n   * is the path loaded the `start-storybook` shell script.\n   *\n   * @example\n   * If you are using `@storybook/react`, then the startup path would be:\n   *\n   * `\"startupModulePath\": \"@storybook/react/bin/index.js\"`\n   */\n  startupModulePath: string;\n}\n\n/** @public */\nexport class StorybookPlugin implements IHeftPlugin<IStorybookPluginOptions> {\n  public readonly pluginName: string = PLUGIN_NAME;\n\n  private _logger!: ScopedLogger;\n  private _storykitPackageName!: string;\n  private _startupModulePath!: string;\n  private _resolvedStartupModulePath!: string;\n\n  /**\n   * Generate typings for Sass files before TypeScript compilation.\n   */\n  public apply(\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration,\n    options: IStorybookPluginOptions\n  ): void {\n    this._logger = heftSession.requestScopedLogger(TASK_NAME);\n\n    if (!options.storykitPackageName) {\n      throw new Error(\n        `The ${TASK_NAME} task cannot start because the \"storykitPackageName\"` +\n          ` plugin option was not specified`\n      );\n    }\n\n    const parseResult: IParsedPackageNameOrError = PackageName.tryParse(options.storykitPackageName);\n    if (parseResult.error) {\n      throw new Error(\n        `The ${TASK_NAME} task cannot start because the \"storykitPackageName\"` +\n          ` plugin option is not a valid package name: ` +\n          parseResult.error\n      );\n    }\n    this._storykitPackageName = options.storykitPackageName;\n\n    if (!options.startupModulePath) {\n      throw new Error(\n        `The ${TASK_NAME} task cannot start because the \"startupModulePath\"` +\n          ` plugin option was not specified`\n      );\n    }\n    this._startupModulePath = options.startupModulePath;\n\n    const storybookParameters: IHeftFlagParameter = heftSession.commandLine.registerFlagParameter({\n      associatedActionNames: ['start'],\n      parameterLongName: '--storybook',\n      description:\n        '(EXPERIMENTAL) Used by the \"@rushstack/heft-storybook-plugin\" package to launch Storybook.'\n    });\n\n    heftSession.hooks.build.tap(PLUGIN_NAME, (build: IBuildStageContext) => {\n      if (!storybookParameters.actionAssociated || !storybookParameters.value) {\n        this._logger.terminal.writeVerboseLine(\n          'The command line does not include \"--storybook\", so bundling will proceed without Storybook'\n        );\n        return;\n      }\n\n      this._logger.terminal.writeVerboseLine(\n        'The command line includes \"--storybook\", redirecting Webpack to Storybook'\n      );\n\n      build.hooks.preCompile.tap(PLUGIN_NAME, (preCompile: IPreCompileSubstage) => {\n        preCompile.hooks.run.tapPromise(PLUGIN_NAME, () => {\n          return this._onPreCompileAsync(heftConfiguration);\n        });\n      });\n\n      build.hooks.bundle.tap(PLUGIN_NAME, (bundle: IBundleSubstage) => {\n        bundle.hooks.configureWebpack.tap(\n          { name: PLUGIN_NAME, stage: Number.MAX_SAFE_INTEGER },\n          (webpackConfiguration: unknown) => {\n            // Discard Webpack's configuration to prevent Webpack from running\n            return null;\n          }\n        );\n\n        bundle.hooks.run.tapPromise(PLUGIN_NAME, async () => {\n          await this._onBundleRunAsync(heftSession, heftConfiguration);\n        });\n      });\n    });\n  }\n\n  private async _onPreCompileAsync(heftConfiguration: HeftConfiguration): Promise<void> {\n    this._logger.terminal.writeVerboseLine(`Probing for \"${this._storykitPackageName}\"`);\n\n    // Example: \"/path/to/my-project/node_modules/my-storykit\"\n    let storykitFolder: string;\n    try {\n      storykitFolder = Import.resolvePackage({\n        packageName: this._storykitPackageName,\n        baseFolderPath: heftConfiguration.buildFolder\n      });\n    } catch (ex) {\n      throw new Error(`The ${TASK_NAME} task cannot start: ` + (ex as Error).message);\n    }\n\n    this._logger.terminal.writeVerboseLine(`Found \"${this._storykitPackageName}\" in ` + storykitFolder);\n\n    // Example: \"/path/to/my-project/node_modules/my-storykit/node_modules\"\n    const storykitModuleFolder: string = path.join(storykitFolder, 'node_modules');\n    if (!(await FileSystem.existsAsync(storykitModuleFolder))) {\n      throw new Error(\n        `The ${TASK_NAME} task cannot start because the storykit module folder does not exist:\\n` +\n          storykitModuleFolder +\n          '\\nDid you forget to install it?'\n      );\n    }\n\n    this._logger.terminal.writeVerboseLine(`Resolving startupModulePath \"${this._startupModulePath}\"`);\n    try {\n      this._resolvedStartupModulePath = Import.resolveModule({\n        modulePath: this._startupModulePath,\n        baseFolderPath: storykitModuleFolder\n      });\n    } catch (ex) {\n      throw new Error(`The ${TASK_NAME} task cannot start: ` + (ex as Error).message);\n    }\n    this._logger.terminal.writeVerboseLine(\n      `Resolved startupModulePath is \"${this._resolvedStartupModulePath}\"`\n    );\n\n    // Example: \"/path/to/my-project/.storybook\"\n    const dotStorybookFolder: string = path.join(heftConfiguration.buildFolder, '.storybook');\n    await FileSystem.ensureFolderAsync(dotStorybookFolder);\n\n    // Example: \"/path/to/my-project/.storybook/node_modules\"\n    const dotStorybookModuleFolder: string = path.join(dotStorybookFolder, 'node_modules');\n\n    // Example:\n    //   LINK FROM: \"/path/to/my-project/.storybook/node_modules\"\n    //   TARGET:    \"/path/to/my-project/node_modules/my-storykit/node_modules\"\n    //\n    // For node_modules links it's standard to use createSymbolicLinkJunction(), which avoids\n    // administrator elevation on Windows; on other operating systems it will create a symbolic link.\n    await FileSystem.createSymbolicLinkJunctionAsync({\n      newLinkPath: dotStorybookModuleFolder,\n      linkTargetPath: storykitModuleFolder,\n      alreadyExistsBehavior: AlreadyExistsBehavior.Overwrite\n    });\n  }\n\n  private async _onBundleRunAsync(\n    heftSession: HeftSession,\n    heftConfiguration: HeftConfiguration\n  ): Promise<void> {\n    this._logger.terminal.writeLine('Starting Storybook runner...');\n\n    const storybookRunner: StorybookRunner = new StorybookRunner(\n      heftConfiguration.terminalProvider,\n      {\n        buildFolder: heftConfiguration.buildFolder,\n        resolvedStartupModulePath: this._resolvedStartupModulePath\n      },\n      // TODO: Extract SubprocessRunnerBase into a public API\n      // eslint-disable-next-line\n      heftSession as any\n    );\n    if (heftSession.debugMode) {\n      await storybookRunner.invokeAsync();\n    } else {\n      await storybookRunner.invokeAsSubprocessAsync();\n    }\n  }\n}\n"]}