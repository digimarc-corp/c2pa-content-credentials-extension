{
  "name": "@rushstack/eslint-config",
  "version": "2.6.1",
  "description": "A TypeScript ESLint ruleset designed for large teams and projects",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/microsoft/rushstack.git",
    "type": "git",
    "directory": "eslint/eslint-config"
  },
  "homepage": "https://rushstack.io",
  "keywords": [
    "eslint",
    "eslint-config",
    "monorepo",
    "rush",
    "scalable",
    "scale",
    "typescript"
  ],
  "peerDependencies": {
    "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0",
    "typescript": ">=3.0.0"
  },
  "dependencies": {
    "@rushstack/eslint-patch": "1.1.3",
    "@rushstack/eslint-plugin": "0.9.1",
    "@rushstack/eslint-plugin-packlets": "0.4.1",
    "@rushstack/eslint-plugin-security": "0.3.1",
    "@typescript-eslint/eslint-plugin": "~5.20.0",
    "@typescript-eslint/experimental-utils": "~5.20.0",
    "@typescript-eslint/parser": "~5.20.0",
    "@typescript-eslint/typescript-estree": "~5.20.0",
    "eslint-plugin-promise": "~6.0.0",
    "eslint-plugin-react": "~7.27.1",
    "eslint-plugin-tsdoc": "~0.2.16"
  },
  "devDependencies": {
    "eslint": "~8.7.0",
    "typescript": "~4.6.3"
  },
  "scripts": {
    "build": "",
    "_phase:build": ""
  },
  "readme": "# @rushstack/eslint-config\n\nA TypeScript ESLint ruleset designed for large teams and projects.\n\n## Philosophy\n\nWhen you work in a small repo, you spend most of your time writing code.  You know what each file does.  You want lint\nrules that keep things concise and won't slow you down.  That's the situation for the 99% of open source projects\nthat shape popular coding conventions.\n\nBut as your organization scales up, things may change.  People come and go.  Projects frequently get handed off between\nteams.  Every day, you find yourself working with files that you've never seen before, created by strangers whom\nyou may never meet.  It's annoying to constantly come across inconsistent styles.  It can be frustrating to decipher\nexpressions that seem to require a TypeScript Ph.D. -- especially for newcomers and junior contributors.  When\nrefactoring in bulk, you may edit lots of files without reading them very carefully.  In short, the linting needs\nreflect different priorities:\n\n**Small scale:** We can assume developers are _familiar_ with the project.  We want code to be _easy to write_.\n\n**Large scale:** Developers are generally _unfamiliar_ with projects.  Code must be _easy to read_.  If not,\nthere's a risk of fragmentation, duplication of efforts, and costly rewrites.  (Enabling people to churn out\nlots of code really fast is still a goal of course; just not the #1 priority.)\n\nWelcome to the world of [Rush Stack](https://rushstack.io/)!  The `@rushstack/eslint-config` package was specifically\ndesigned around the the requirements of large teams and projects.\n\n\n## Implementation\n\n- **Monorepo friendly:** The `@rushstack/eslint-config` package has direct dependencies on all the ESLint plugins\n  that it needs.  This avoids encumbering each consuming project with the obligation to satisfy a peer dependencies.\n  It also ensures that the installed plugin versions were tested for compatibility together.\n\n- **Battle tested:**  The `@rushstack/eslint-config` rules have been vetted on large production monorepos, across\n  a broad set of projects, teams, and requirements.  These rules embody a way of working that scales.  Quite\n  a lot of discussion and evolution went into them.\n\n- **Designed for Prettier:** The `@rushstack/eslint-config` ruleset is designed to be used together with\n  the [Prettier](https://prettier.io/) code formatter.  This separation of workflows avoids hassling developers with\n  lint \"errors\" for frivolous issues like spaces and commas.  Instead, those issues get fixed automatically whenever\n  you save or commit a file.  Prettier also avoids frivolous debates: its defaults have already been debated\n  at length and adopted by a sizeable community.  No need to reinvent the wheel!\n\n- **Explicit:**  The ruleset does not import any \"recommended\" templates from other ESLint packages.  This avoids\n  worrying about precedence issues due to import order.  It also eliminates confusion caused by files\n  overriding/undoing settings from another file.  Each rule is configured once, in one\n  [easy-to-read file](https://github.com/microsoft/rushstack/blob/main/stack/eslint-config/profile/_common.js).\n\n- **Minimal configuration:**  To use this ruleset, your **.eslintrc.js** will need to choose one **\"profile\"**\n  and possibly one or two **\"mixins\"** that cover special cases.  Beyond that, our goal is to reduce monorepo\n  maintenance by providing a small set of **.eslintrc.js** recipes that can be reused across many different projects.\n  (This sometimes means that rules will be included which have no effect for a particular project, however in practice\n  the installation/execution cost for unused rules turns out to be negligible.)\n\n\n## Getting started in 3 steps\n\nApplying the ruleset to your project is quick and easy. You install the package, then create an **.eslintrc.js** file\nand select an appropriate project profile.  Optionally you can also add some \"mixins\" to enable additional rules.\nLet's walk through those three steps in more detail.\n\n### 1. Install the package\n\nTo install the package, do this:\n\n```sh\n$ cd your-project-folder\n$ npm install --save-dev eslint\n$ npm install --save-dev typescript\n$ npm install --save-dev @rushstack/eslint-config\n```\n\n### 2. Choose one profile\n\nThe ruleset currently supports three different \"profile\" strings, which select lint rules applicable for\nyour project:\n\n- `@rushstack/eslint-config/profile/node` - This profile enables lint rules intended for a general Node.js project,\n  typically a web service.  It enables security rules that assume the service could receive malicious inputs from an\n  untrusted user.\n\n- `@rushstack/eslint-config/profile/node-trusted-tool` - This profile enables lint rules intended for a Node.js project\n  whose inputs will always come from a developer or other trusted source.  Most build system tasks are like this,\n  since they operate exclusively on files prepared by a developer.  This profile disables certain security rules that\n  would otherwise prohibit APIs that could cause a denial-of-service by consuming too many resources, or which might\n  interact with the filesystem in unsafe ways.  Such activities are safe and commonplace for a trusted tool.\n  **DO NOT use this profile for a library project that might also be loaded by a Node.js service.**\n\n- `@rushstack/eslint-config/profile/web-app` - This profile enables lint rules intended for a web application, for\n  example security rules that are relevant to web browser APIs such as DOM.\n  _Also use this profile if you are creating a library that can be consumed by both Node.js and web applications._\n\nAfter choosing a profile, create an **.eslintrc.js** config file that provides the NodeJS `__dirname` context\nfor TypeScript. Add your profile string in the `extends` field, as shown below:\n\n**.eslintrc.js**\n```ts\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\nrequire('@rushstack/eslint-config/patch/modern-module-resolution');\n\nmodule.exports = {\n  extends: [ \"@rushstack/eslint-config/profile/node\" ],  // <---- put your profile string here\n  parserOptions: { tsconfigRootDir: __dirname }\n};\n```\n\nThe `@rushstack/eslint-config` ruleset is intended to be used with the Prettier code formatter.  For general\ninstructions on setting that up, please refer to the [Prettier docs](https://prettier.io/docs/en/index.html).\nFor Rush-specific settings, see the article\n[Rush: Enabling Prettier](https://rushjs.io/pages/maintainer/enabling_prettier/).\n\n\n### 3. Add any relevant mixins\n\nOptionally, you can add some \"mixins\" to your `extends` array to opt-in to some extra behaviors.\n\nImportant: Your **.eslintrc.js** `\"extends\"` field must load mixins after the profile entry.\n\n\n#### `@rushstack/eslint-config/mixins/friendly-locals`\n\nRequires explicit type declarations for local variables.\n\nFor the first 5 years of Rush, our lint rules required explicit types for most declarations\nsuch as function parameters, function return values, and exported variables.  Although more verbose,\ndeclaring types (instead of relying on type inference) encourages engineers to create interfaces\nthat inspire discussions about data structure design.  It also makes source files easier\nto understand for code reviewers who may be unfamiliar with a particular project.  Once developers get\nused to the extra work of declaring types, it turns out to be a surprisingly popular practice.\n\nHowever in 2020, to make adoption easier for existing projects, this rule was relaxed.  Explicit\ntype declarations are now optional for local variables (although still required in other contexts).\nSee [GitHub #2206](https://github.com/microsoft/rushstack/issues/2206) for background.\n\nIf you are onboarding a large existing code base, this new default will make adoption easier:\n\nExample source file without `mixins/friendly-locals`:\n```ts\nexport class MyDataService {\n  . . .\n  public queryResult(provider: IProvider): IResult {\n    // Type inference is concise, but what are \"item\", \"index\", and \"data\"?\n    const item = provider.getItem(provider.title);\n    const index = item.fetchIndex();\n    const data = index.get(provider.state);\n    return data.results.filter(x => x.title === provider.title);\n  }\n}\n```\n\nOn the other hand, if your priority is make source files more friendly for other people to read, you can enable\nthe `\"@rushstack/eslint-config/mixins/friendly-locals\"` mixin.  This restores the requirement that local variables\nshould have explicit type declarations.\n\nExample source file with `mixins/friendly-locals`:\n```ts\nexport class MyDataService {\n  . . .\n  public queryResult(provider: IProvider): IResult {\n    // This is more work for the person writing the code... but definitely easier to understand\n    // for a code reviewer if they are unfamiliar with your project\n    const item: ISalesReport = provider.getItem(provider.title);\n    const index: Map<string, IGeographicData> = item.fetchIndex();\n    const data: IGeographicData | undefined = index.get(provider.state);\n    return data.results.filter(x => x.title === provider.title);\n  }\n}\n```\n\nAdd the mixin to your `\"extends\"` field like this:\n\n**.eslintrc.js**\n```ts\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\nrequire('@rushstack/eslint-config/patch/modern-module-resolution');\n\nmodule.exports = {\n  extends: [\n    \"@rushstack/eslint-config/profile/node\",\n    \"@rushstack/eslint-config/mixins/friendly-locals\" // <----\n  ],\n  parserOptions: { tsconfigRootDir: __dirname }\n};\n```\n\n\n#### `@rushstack/eslint-config/mixins/packlets`\n\nPacklets provide a lightweight alternative to NPM packages for organizing source files within a single project.\nThis system is described in the [@rushstack/eslint-plugin-packlets](https://www.npmjs.com/package/@rushstack/eslint-plugin-packlets)\ndocumentation.\n\nTo use packlets, add the mixin to your `\"extends\"` field like this:\n\n**.eslintrc.js**\n```ts\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\nrequire('@rushstack/eslint-config/patch/modern-module-resolution');\n\nmodule.exports = {\n  extends: [\n    \"@rushstack/eslint-config/profile/node\",\n    \"@rushstack/eslint-config/mixins/packlets\" // <----\n  ],\n  parserOptions: { tsconfigRootDir: __dirname }\n};\n```\n\n\n#### `@rushstack/eslint-config/mixins/tsdoc`\n\nIf your project is using [API Extractor](https://api-extractor.com/) or another tool that uses\nthe [TSDoc](https://github.com/Microsoft/tsdoc) standard for doc comments, it's recommended to use the\n`\"@rushstack/eslint-config/mixins/tsdoc\"` mixin.  It will enable\n[eslint-plugin-tsdoc](https://www.npmjs.com/package/eslint-plugin-tsdoc) validation for TypeScript doc comments.\n\nAdd the mixin to your `\"extends\"` field like this:\n\n**.eslintrc.js**\n```ts\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\nrequire('@rushstack/eslint-config/patch/modern-module-resolution');\n\nmodule.exports = {\n  extends: [\n    \"@rushstack/eslint-config/profile/node\",\n    \"@rushstack/eslint-config/mixins/tsdoc\" // <----\n  ],\n  parserOptions: { tsconfigRootDir: __dirname }\n};\n```\n\n\n#### `@rushstack/eslint-config/mixins/react`\n\nFor projects using the [React](https://reactjs.org/) library, the `\"@rushstack/eslint-config/mixins/react\"` mixin\nenables some recommended additional rules.  These rules are selected via a mixin because they require you to:\n\n- Add `\"jsx\": \"react\"` to your **tsconfig.json**\n- Configure your `settings.react.version` as shown below.  This determines which React APIs will be considered\n  to be deprecated.  (If you omit this, the React version will be detected automatically by\n  [loading the entire React library](https://github.com/yannickcr/eslint-plugin-react/blob/4da74518bd78f11c9c6875a159ffbae7d26be693/lib/util/version.js#L23)\n  into the linter's process, which is costly.)\n\nAdd the mixin to your `\"extends\"` field like this:\n\n**.eslintrc.js**\n```ts\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\nrequire('@rushstack/eslint-config/patch/modern-module-resolution');\n\nmodule.exports = {\n  extends: [\n    \"@rushstack/eslint-config/profile/web-app\",\n    \"@rushstack/eslint-config/mixins/react\" // <----\n  ],\n  parserOptions: { tsconfigRootDir: __dirname },\n\n  settings: {\n    react: {\n      \"version\": \"16.9\" // <----\n    }\n  }\n};\n```\n\n\n## Links\n\n- [CHANGELOG.md](\n  https://github.com/microsoft/rushstack/blob/main/stack/eslint-config/CHANGELOG.md) - Find\n  out what's new in the latest version\n\n`@rushstack/eslint-config` is part of the [Rush Stack](https://rushstack.io/) family of projects.\n"
}