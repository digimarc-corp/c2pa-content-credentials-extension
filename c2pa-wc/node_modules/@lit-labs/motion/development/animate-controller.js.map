{"version":3,"file":"animate-controller.js","sourceRoot":"","sources":["../src/animate-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {ReactiveControllerHost} from 'lit';\nimport {Animate, Options} from './animate.js';\n\nexport const controllerMap: WeakMap<ReactiveControllerHost, AnimateController> =\n  new WeakMap();\n\n/**\n * AnimateController can be used to provide default configuration options to all\n * `animate()` directives in a given component.\n *\n * It also provides control over all the `animate()` animations within a given\n * component, for example, `this.animateController.pause()` pauses all animations.\n */\nexport class AnimateController {\n  host: ReactiveControllerHost;\n  defaultOptions: Options;\n  startPaused = false;\n  disabled = false;\n  onComplete?: () => void;\n\n  constructor(\n    host: ReactiveControllerHost,\n    options: {\n      defaultOptions?: Options;\n      startPaused?: boolean;\n      disabled?: boolean;\n      onComplete?: () => void;\n    }\n  ) {\n    this.host = host;\n    this.defaultOptions = options.defaultOptions || {};\n    this.startPaused = !!options.startPaused;\n    this.disabled = !!options.disabled;\n    this.onComplete = options.onComplete;\n    controllerMap.set(this.host, this);\n  }\n\n  /**\n   * Set of active `animate()` directives in the host component\n   */\n  clients: Set<Animate> = new Set();\n\n  protected pendingComplete = false;\n\n  async add(animate: Animate) {\n    this.clients.add(animate);\n    if (this.startPaused) {\n      animate.webAnimation?.pause();\n    }\n    this.pendingComplete = true;\n    await animate.finished;\n    if (this.pendingComplete && !this.isAnimating) {\n      this.pendingComplete = false;\n      this.onComplete?.();\n    }\n  }\n\n  remove(animate: Animate) {\n    this.clients.delete(animate);\n  }\n\n  /**\n   * Pauses all animations running in the host component.\n   */\n  pause() {\n    this.clients.forEach((f) => f.webAnimation?.pause());\n  }\n\n  /**\n   * Plays all active animations in the host component.\n   */\n  play() {\n    this.clients.forEach((f) => f.webAnimation?.play());\n  }\n\n  cancel() {\n    this.clients.forEach((f) => f.webAnimation?.cancel());\n    this.clients.clear();\n  }\n\n  finish() {\n    this.clients.forEach((f) => f.webAnimation?.finish());\n    this.clients.clear();\n  }\n\n  /**\n   * Toggles the play/pause state of all active `animate()` animations in the host component.\n   */\n  togglePlay() {\n    if (this.isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  /**\n   * Returns true if the host component has any active `animate()` animations.\n   */\n  get isAnimating() {\n    return this.clients.size > 0;\n  }\n\n  /**\n   * Returns true if the host component has any playing `animate()` animations.\n   */\n  get isPlaying() {\n    return Array.from(this.clients).some(\n      (a) => a.webAnimation?.playState === 'running'\n    );\n  }\n\n  async finished() {\n    await Promise.all(Array.from(this.clients).map((f) => f.finished));\n  }\n}\n"]}