"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.previewAnnotations = void 0;
exports.webpack = webpack;

var _coreCommon = require("@storybook/core-common");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function webpack(config, options) {
  var _options$features;

  var babelrcOptions = (_options$features = options.features) !== null && _options$features !== void 0 && _options$features.babelModeV7 ? null : {
    babelrc: false
  };
  config.module.rules.push({
    test: [new RegExp(`src(.*)\\.js$`), new RegExp(`packages(\\/|\\\\)*(\\/|\\\\)src(\\/|\\\\)(.*)\\.js$`), new RegExp(`node_modules(\\/|\\\\)lit-html(.*)\\.js$`), new RegExp(`node_modules(\\/|\\\\)lit-element(.*)\\.js$`), new RegExp(`node_modules(\\/|\\\\)@open-wc(.*)\\.js$`), new RegExp(`node_modules(\\/|\\\\)@polymer(.*)\\.js$`), new RegExp(`node_modules(\\/|\\\\)@vaadin(.*)\\.js$`)],
    use: {
      loader: require.resolve('babel-loader'),
      options: _objectSpread({
        plugins: [require.resolve('@babel/plugin-syntax-dynamic-import'), require.resolve('@babel/plugin-syntax-import-meta'), // webpack does not support import.meta.url yet, so we rewrite them in babel
        [require.resolve('babel-plugin-bundled-import-meta'), {
          importStyle: 'baseURI'
        }]],
        presets: [[require.resolve('@babel/preset-env'), {
          useBuiltIns: 'entry',
          corejs: 3
        }]]
      }, babelrcOptions)
    }
  });
  return config;
}

var previewAnnotations = function (entry = []) {
  return [...entry, (0, _coreCommon.findDistEsm)(__dirname, 'client/preview/config')];
};

exports.previewAnnotations = previewAnnotations;