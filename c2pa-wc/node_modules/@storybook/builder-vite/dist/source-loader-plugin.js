"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sourceLoaderPlugin = void 0;
const source_loader_1 = __importDefault(require("@storybook/source-loader"));
const magic_string_1 = __importDefault(require("magic-string"));
const storyPattern = /\.stories\.[jt]sx?$/;
const storySourcePattern = /var __STORY__ = "(.*)"/;
const storySourceReplacement = '--STORY_SOURCE_REPLACEMENT--';
const mockClassLoader = (id) => ({ emitWarning: (message) => console.warn(message), resourcePath: id });
// HACK: Until we can support only node 15+ and use string.prototype.replaceAll
const replaceAll = (str, search, replacement) => {
    return str.split(search).join(replacement);
};
function sourceLoaderPlugin(config) {
    if (config.configType === 'DEVELOPMENT') {
        return {
            name: 'storybook-vite-source-loader-plugin',
            enforce: 'pre',
            async transform(src, id) {
                if (id.match(storyPattern)) {
                    const code = await source_loader_1.default.call(mockClassLoader(id), src);
                    const s = new magic_string_1.default(src);
                    // Entirely replace with new code
                    s.overwrite(0, src.length, code);
                    return {
                        code: s.toString(),
                        map: s.generateMap({ hires: true, source: id }),
                    };
                }
            },
        };
    }
    // In production, we need to be fancier, to avoid vite:define plugin from replacing values inside the `__STORY__` string
    const storySources = new WeakMap();
    return [
        {
            name: 'storybook-vite-source-loader-plugin',
            enforce: 'pre',
            buildStart() {
                storySources.set(config, new Map());
            },
            async transform(src, id) {
                var _a;
                if (id.match(storyPattern)) {
                    let code = await source_loader_1.default.call(mockClassLoader(id), src);
                    const [_, sourceString] = (_a = code.match(storySourcePattern)) !== null && _a !== void 0 ? _a : [null, null];
                    if (sourceString) {
                        const map = storySources.get(config);
                        map === null || map === void 0 ? void 0 : map.set(id, sourceString);
                        // Remove story source so that it is not processed by vite:define plugin
                        code = replaceAll(code, sourceString, storySourceReplacement);
                    }
                    const s = new magic_string_1.default(src);
                    // Entirely replace with new code
                    s.overwrite(0, src.length, code);
                    return {
                        code: s.toString(),
                        map: s.generateMap(),
                    };
                }
            },
        },
        {
            name: 'storybook-vite-source-loader-plugin-post',
            enforce: 'post',
            buildStart() {
                storySources.set(config, new Map());
            },
            async transform(src, id) {
                if (id.match(storyPattern)) {
                    const s = new magic_string_1.default(src);
                    const map = storySources.get(config);
                    const storySourceStatement = map === null || map === void 0 ? void 0 : map.get(id);
                    // Put the previously-extracted source back in
                    if (storySourceStatement) {
                        const newCode = replaceAll(src, storySourceReplacement, storySourceStatement);
                        s.overwrite(0, src.length, newCode);
                    }
                    return {
                        code: s.toString(),
                        map: s.generateMap(),
                    };
                }
            },
        },
    ];
}
exports.sourceLoaderPlugin = sourceLoaderPlugin;
//# sourceMappingURL=source-loader-plugin.js.map