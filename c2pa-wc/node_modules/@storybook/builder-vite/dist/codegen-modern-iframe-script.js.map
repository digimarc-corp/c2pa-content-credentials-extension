{"version":3,"file":"codegen-modern-iframe-script.js","sourceRoot":"","sources":["../codegen-modern-iframe-script.ts"],"names":[],"mappings":";;;AAAA,wDAAiE;AACjE,6DAAiF;AACjF,mEAA8D;AAGvD,KAAK,UAAU,8BAA8B,CAAC,OAAwB;IAC3E,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAElD,MAAM,mBAAmB,GAAG,IAAA,qCAAuB,EAAC,EAAE,SAAS,EAAE,CAAC,CAAC;IACnE,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,CAAC,GAAG,aAAa,EAAE,mBAAmB,CAAC;SAC1D,MAAM,CAAC,OAAO,CAAC;SACf,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,IAAA,qCAAgB,EAAC,WAAW,CAAC,CAAC,CAAC;IAEvD,MAAM,kBAAkB,GAAG,CAAC,SAAiB,EAAU,EAAE;QACvD,mFAAmF;QACnF,IAAI,SAAS,KAAK,gBAAgB,EAAE;YAClC,OAAO;;;QAGL,CAAC,IAAI,EAAE,CAAC;SACX;QAED,OAAO;;gCAEqB,uCAAkB;;;;;6BAKrB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;;;;;;IAMtD,CAAC,IAAI,EAAE,CAAC;IACV,CAAC,CAAC;IAEF;;;;;OAKG;IACH,MAAM,IAAI,GAAG;;;cAGD,0CAAqB;gCACH,uCAAkB;;;0CAGR,aAAa;SAC9C,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,WAAW,IAAI,CAAC;SAChD,IAAI,CAAC,KAAK,CAAC;;;;;;;;;;MAUd,kBAAkB,CAAC,SAAS,CAAC;KAC9B,CAAC,IAAI,EAAE,CAAC;IACX,OAAO,IAAI,CAAC;AACd,CAAC;AA9DD,wEA8DC","sourcesContent":["import { loadPreviewOrConfigFile } from '@storybook/core-common';\nimport { virtualStoriesFile, virtualAddonSetupFile } from './virtual-file-names';\nimport { transformAbsPath } from './utils/transform-abs-path';\nimport type { ExtendedOptions } from './types';\n\nexport async function generateModernIframeScriptCode(options: ExtendedOptions) {\n  const { presets, configDir, framework } = options;\n\n  const previewOrConfigFile = loadPreviewOrConfigFile({ configDir });\n  const presetEntries = await presets.apply('config', [], options);\n  const configEntries = [...presetEntries, previewOrConfigFile]\n    .filter(Boolean)\n    .map((configEntry) => transformAbsPath(configEntry));\n\n  const generateHMRHandler = (framework: string): string => {\n    // Web components are not compatible with HMR, so disable HMR, reload page instead.\n    if (framework === 'web-components') {\n      return `\n      if (import.meta.hot) {\n        import.meta.hot.decline();\n      }`.trim();\n    }\n\n    return `\n    if (import.meta.hot) {\n      import.meta.hot.accept('${virtualStoriesFile}', (newModule) => {\n      // importFn has changed so we need to patch the new one in\n      preview.onStoriesChanged({ importFn: newModule.importFn });\n      });\n\n    import.meta.hot.accept(${JSON.stringify(configEntries)}, ([...newConfigEntries]) => {\n      const newGetProjectAnnotations =  () => composeConfigs(newConfigEntries);\n\n      // getProjectAnnotations has changed so we need to patch the new one in\n      preview.onGetProjectAnnotationsChanged({ getProjectAnnotations: newGetProjectAnnotations });\n    });\n  }`.trim();\n  };\n\n  /**\n   * This code is largely taken from https://github.com/storybookjs/storybook/blob/d1195cbd0c61687f1720fefdb772e2f490a46584/lib/builder-webpack4/src/preview/virtualModuleModernEntry.js.handlebars\n   * Some small tweaks were made to `getProjectAnnotations` (since `import()` needs to be resolved asynchronously)\n   * and the HMR implementation has been tweaked to work with Vite.\n   * @todo Inline variable and remove `noinspection`\n   */\n  const code = `\n    import { composeConfigs, PreviewWeb } from '@storybook/preview-web';\n    import { ClientApi } from '@storybook/client-api';\n    import '${virtualAddonSetupFile}';\n    import { importFn } from '${virtualStoriesFile}';\n\n    const getProjectAnnotations = async () =>\n      composeConfigs(await Promise.all([${configEntries\n        .map((configEntry) => `import('${configEntry}')`)\n        .join(',\\n')}]));\n\n    const preview = new PreviewWeb();\n\n    window.__STORYBOOK_PREVIEW__ = preview;\n    window.__STORYBOOK_STORY_STORE__ = preview.storyStore;\n    window.__STORYBOOK_CLIENT_API__ = new ClientApi({ storyStore: preview.storyStore });\n\n    preview.initialize({ importFn, getProjectAnnotations });\n    \n    ${generateHMRHandler(framework)};\n    `.trim();\n  return code;\n}\n"]}