{"version":3,"file":"mdx-plugin.js","sourceRoot":"","sources":["../../plugins/mdx-plugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAM,cAAc,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AAE9F,SAAS,cAAc,CAAC,IAAY,EAAE,IAAa;IACjD,IAAI,IAAI,EAAE;QACR,OAAO;;aAEE,IAAI;YACL,CAAC;KACV;IAED,OAAO;;;;UAIC,IAAI;SACL,CAAC;AACV,CAAC;AAED;;;;;;;GAOG;AACH,SAAgB,SAAS,CAAC,OAAgB;IACxC,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;IAE7B,IAAI,YAAgC,CAAC;IAErC,OAAO;QACL,IAAI,EAAE,2BAA2B;QACjC,OAAO,EAAE,KAAK;QACd,cAAc,CAAC,EAAE,OAAO,EAAE;YACxB,0EAA0E;YAC1E,iHAAiH;YACjH,0DAA0D;YAC1D,gIAAgI;YAChI,MAAM,mBAAmB,GAAG,OAAO,CAAC,MAAM,CACxC,CAAC,CAAC,EAAE,EAAE,CACJ,CAAC,CAAC,IAAI,KAAK,eAAe;gBAC1B,CAAC,CAAC,IAAI,KAAK,kBAAkB;gBAC7B,CAAC,CAAC,IAAI,KAAK,oBAAoB;gBAC/B,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAC9B,CAAC;YACF,YAAY,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC9D,CAAC;QACD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,EAAE,OAAO;YAC9B,IAAI,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBACvB,aAAa;gBACb,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW;oBACvC,CAAC,CAAC,wDAAa,qBAAqB,GAAC;oBACrC,CAAC,CAAC,wDAAa,qBAAqB,GAAC,CAAC;gBAExC,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAE7E,MAAM,YAAY,GAAG,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,CAAC,CAAC,CAAC;gBAE7E,MAAM,MAAM,GAAG,MAAM,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,SAAS,CAAE,IAAI,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAA,CAAC;gBAE7F,IAAI,CAAC,MAAM;oBAAE,OAAO,YAAY,CAAC;gBAEjC,IAAI,OAAO,MAAM,KAAK,QAAQ;oBAAE,OAAO,MAAM,CAAC;gBAE9C,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;gBAExC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;aACjH;QACH,CAAC;KACF,CAAC;AACJ,CAAC;AA7CD,8BA6CC","sourcesContent":["import type { Options } from '@storybook/core-common';\nimport { Plugin } from 'vite';\n\nconst isStorybookMdx = (id: string) => id.endsWith('stories.mdx') || id.endsWith('story.mdx');\n\nfunction injectRenderer(code: string, mdx2: boolean) {\n  if (mdx2) {\n    return `\n           import React from 'react';\n           ${code}\n           `;\n  }\n\n  return `\n        /* @jsx mdx */\n        import React from 'react';\n        import { mdx } from '@mdx-js/react';\n        ${code}\n        `;\n}\n\n/**\n * Storybook uses two different loaders when dealing with MDX:\n *\n * - *stories.mdx and *story.mdx are compiled with the CSF compiler\n * - *.mdx are compiled with the MDX compiler directly\n *\n * @see https://github.com/storybookjs/storybook/blob/next/addons/docs/docs/recipes.md#csf-stories-with-arbitrary-mdx\n */\nexport function mdxPlugin(options: Options): Plugin {\n  const { features } = options;\n\n  let reactRefresh: Plugin | undefined;\n\n  return {\n    name: 'storybook-vite-mdx-plugin',\n    enforce: 'pre',\n    configResolved({ plugins }) {\n      // @vitejs/plugin-react-refresh has been upgraded to @vitejs/plugin-react,\n      // and the name of the plugin performing `transform` has been changed from 'react-refresh' to 'vite:react-babel',\n      // to be compatible, we need to look for both plugin name.\n      // We should also look for the other plugins names exported from @vitejs/plugin-react in case there are some internal refactors.\n      const reactRefreshPlugins = plugins.filter(\n        (p) =>\n          p.name === 'react-refresh' ||\n          p.name === 'vite:react-babel' ||\n          p.name === 'vite:react-refresh' ||\n          p.name === 'vite:react-jsx'\n      );\n      reactRefresh = reactRefreshPlugins.find((p) => p.transform);\n    },\n    async transform(src, id, options) {\n      if (id.match(/\\.mdx?$/)) {\n        // @ts-ignore\n        const { compile } = features?.previewMdx2\n          ? await import('@storybook/mdx2-csf')\n          : await import('@storybook/mdx1-csf');\n\n        const mdxCode = String(await compile(src, { skipCsf: !isStorybookMdx(id) }));\n\n        const modifiedCode = injectRenderer(mdxCode, Boolean(features?.previewMdx2));\n\n        const result = await reactRefresh?.transform!.call(this, modifiedCode, `${id}.jsx`, options);\n\n        if (!result) return modifiedCode;\n\n        if (typeof result === 'string') return result;\n\n        const { code, map: resultMap } = result;\n\n        return { code, map: !resultMap || typeof resultMap === 'string' ? resultMap : { ...resultMap, sources: [id] } };\n      }\n    },\n  };\n}\n"]}