{"version":3,"file":"codegen-iframe-script.js","sourceRoot":"","sources":["../codegen-iframe-script.ts"],"names":[],"mappings":";;;AAAA,6DAA8E;AAC9E,mEAA8D;AAGvD,KAAK,UAAU,wBAAwB,CAAC,OAAwB;IACrE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IACtD,MAAM,mBAAmB,GAAG,aAAa,IAAI,cAAc,SAAS,EAAE,CAAC;IAEvE,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,CAAC,GAAG,aAAa,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEzD,MAAM,qBAAqB,GAAG,CAAC,KAAe,EAAE,IAAY,EAAE,EAAE,CAC9D,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,IAAA,qCAAgB,EAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE9G,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,MAAc,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;IAE9G,0CAA0C;IAC1C,sDAAsD;IACtD,sBAAsB;IACtB,MAAM,IAAI,GAAG;;;iCAGkB,mBAAmB;;;;MAI9C,qBAAqB,CAAC,aAAa,EAAE,QAAQ,CAAC;gCACpB,uCAAkB;qCACb,uCAAkB;;;;;;;;;;;uBAWhC,WAAW,CAAC,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAoEjG,CAAC,IAAI,EAAE,CAAC;IACX,OAAO,IAAI,CAAC;AACd,CAAC;AAzGD,4DAyGC","sourcesContent":["import { virtualPreviewFile, virtualStoriesFile } from './virtual-file-names';\nimport { transformAbsPath } from './utils/transform-abs-path';\nimport type { ExtendedOptions } from './types';\n\nexport async function generateIframeScriptCode(options: ExtendedOptions) {\n  const { presets, frameworkPath, framework } = options;\n  const frameworkImportPath = frameworkPath || `@storybook/${framework}`;\n\n  const presetEntries = await presets.apply('config', [], options);\n  const configEntries = [...presetEntries].filter(Boolean);\n\n  const absoluteFilesToImport = (files: string[], name: string) =>\n    files.map((el, i) => `import ${name ? `* as ${name}_${i} from ` : ''}'${transformAbsPath(el)}'`).join('\\n');\n\n  const importArray = (name: string, length: number) => new Array(length).fill(0).map((_, i) => `${name}_${i}`);\n\n  // noinspection UnnecessaryLocalVariableJS\n  /** @todo Inline variable and remove `noinspection` */\n  // language=JavaScript\n  const code = `\n    // Ensure that the client API is initialized by the framework before any other iframe code\n    // is loaded. That way our client-apis can assume the existence of the API+store\n    import { configure } from '${frameworkImportPath}';\n\n    import * as clientApi from \"@storybook/client-api\";\n    import { logger } from '@storybook/client-logger';\n    ${absoluteFilesToImport(configEntries, 'config')}\n    import * as preview from '${virtualPreviewFile}';\n    import { configStories } from '${virtualStoriesFile}';\n\n    const {\n      addDecorator,\n      addParameters,\n      addLoader,\n      addArgTypesEnhancer,\n      addArgsEnhancer,\n      setGlobalRender,\n    } = clientApi;\n\n    const configs = [${importArray('config', configEntries.length).concat('preview.default').join(',')}].filter(Boolean)\n\n    configs.forEach(config => {\n      Object.keys(config).forEach((key) => {\n        const value = config[key];\n        switch (key) {\n          case 'args': {\n            if (typeof clientApi.addArgs !== \"undefined\") {\n              return clientApi.addArgs(value);\n            } else {\n              return logger.warn(\n                \"Could not add global args. Please open an issue in storybookjs/builder-vite.\"\n              );\n            }\n          }\n          case 'argTypes': {\n            if (typeof clientApi.addArgTypes !== \"undefined\") {\n              return clientApi.addArgTypes(value);\n            } else {\n              return logger.warn(\n                \"Could not add global argTypes. Please open an issue in storybookjs/builder-vite.\"\n              );\n            }\n          }\n          case 'decorators': {\n            return value.forEach((decorator) => addDecorator(decorator, false));\n          }\n          case 'loaders': {\n            return value.forEach((loader) => addLoader(loader, false));\n          }\n          case 'parameters': {\n            return addParameters({ ...value }, false);\n          }\n          case 'argTypesEnhancers': {\n            return value.forEach((enhancer) => addArgTypesEnhancer(enhancer));\n          }\n          case 'argsEnhancers': {\n            return value.forEach((enhancer) => addArgsEnhancer(enhancer))\n          }\n          case 'render': {\n            return setGlobalRender(value)\n          }\n          case 'globals':\n          case 'globalTypes': {\n            const v = {};\n            v[key] = value;\n            return addParameters(v, false);\n          }\n          case 'decorateStory':\n          case 'applyDecorators':\n          case 'renderToDOM': {\n            return null; // This key is not handled directly in v6 mode.\n          }\n          default: {\n            // eslint-disable-next-line prefer-template\n            return console.log(key + ' was not supported :( !');\n          }\n        }\n      });\n    })\n    \n    /* TODO: not quite sure what to do with this, to fix HMR\n    if (import.meta.hot) {\n        import.meta.hot.accept();    \n    }\n    */\n\n    configStories(configure);\n    `.trim();\n  return code;\n}\n"]}