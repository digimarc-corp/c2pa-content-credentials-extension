{"version":3,"file":"source-loader-plugin.js","sourceRoot":"","sources":["../source-loader-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Plugin } from 'vite';\nimport sourceLoaderTransform from '@storybook/source-loader';\nimport type { ExtendedOptions } from './types';\nimport MagicString from 'magic-string';\n\nconst storyPattern = /\\.stories\\.[jt]sx?$/;\nconst storySourcePattern = /var __STORY__ = \"(.*)\"/;\nconst storySourceReplacement = '--STORY_SOURCE_REPLACEMENT--';\n\nconst mockClassLoader = (id: string) => ({ emitWarning: (message: string) => console.warn(message), resourcePath: id });\n\n// HACK: Until we can support only node 15+ and use string.prototype.replaceAll\nconst replaceAll = (str: string, search: string, replacement: string) => {\n  return str.split(search).join(replacement);\n};\n\nexport function sourceLoaderPlugin(config: ExtendedOptions): Plugin | Plugin[] {\n  if (config.configType === 'DEVELOPMENT') {\n    return {\n      name: 'storybook-vite-source-loader-plugin',\n      enforce: 'pre',\n      async transform(src: string, id: string) {\n        if (id.match(storyPattern)) {\n          const code: string = await sourceLoaderTransform.call(mockClassLoader(id), src);\n          const s = new MagicString(src);\n          // Entirely replace with new code\n          s.overwrite(0, src.length, code);\n\n          return {\n            code: s.toString(),\n            map: s.generateMap({ hires: true, source: id }),\n          };\n        }\n      },\n    };\n  }\n\n  // In production, we need to be fancier, to avoid vite:define plugin from replacing values inside the `__STORY__` string\n  const storySources = new WeakMap<ExtendedOptions, Map<string, string>>();\n\n  return [\n    {\n      name: 'storybook-vite-source-loader-plugin',\n      enforce: 'pre',\n      buildStart() {\n        storySources.set(config, new Map());\n      },\n      async transform(src: string, id: string) {\n        if (id.match(storyPattern)) {\n          let code: string = await sourceLoaderTransform.call(mockClassLoader(id), src);\n          const [_, sourceString] = code.match(storySourcePattern) ?? [null, null];\n          if (sourceString) {\n            const map = storySources.get(config);\n            map?.set(id, sourceString);\n\n            // Remove story source so that it is not processed by vite:define plugin\n            code = replaceAll(code, sourceString, storySourceReplacement);\n          }\n\n          const s = new MagicString(src);\n          // Entirely replace with new code\n          s.overwrite(0, src.length, code);\n\n          return {\n            code: s.toString(),\n            map: s.generateMap(),\n          };\n        }\n      },\n    },\n    {\n      name: 'storybook-vite-source-loader-plugin-post',\n      enforce: 'post',\n      buildStart() {\n        storySources.set(config, new Map());\n      },\n      async transform(src: string, id: string) {\n        if (id.match(storyPattern)) {\n          const s = new MagicString(src);\n          const map = storySources.get(config);\n          const storySourceStatement = map?.get(id);\n          // Put the previously-extracted source back in\n          if (storySourceStatement) {\n            const newCode = replaceAll(src, storySourceReplacement, storySourceStatement);\n            s.overwrite(0, src.length, newCode);\n          }\n\n          return {\n            code: s.toString(),\n            map: s.generateMap(),\n          };\n        }\n      },\n    },\n  ];\n}\n"]}