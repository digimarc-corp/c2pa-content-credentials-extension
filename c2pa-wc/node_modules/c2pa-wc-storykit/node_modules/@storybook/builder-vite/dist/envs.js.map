{"version":3,"file":"envs.js","sourceRoot":"","sources":["../envs.ts"],"names":[],"mappings":";;;AAAA,wDAAuD;AAKvD,sCAAsC;AACtC,MAAM,mBAAmB,GAAG;IAC1B,WAAW;IACX,2CAA2C;IAC3C,gIAAgI;IAChI,UAAU;IACV,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;CACN,CAAC;AAEF,wGAAwG;AAC3F,QAAA,gBAAgB,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AAExD;;;GAGG;AACH,SAAgB,oBAAoB,CAAC,GAAY,EAAE,SAAkC;IACnF,MAAM,UAAU,GAAY,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CACrC,CAAC,GAAY,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QAC7B,uFAAuF;QACvF,IACE,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC;YACjC,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;YAClF,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAC5D;YACA,GAAG,CAAC,mBAAmB,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtD,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACzB;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EACD;QACE,mBAAmB;QACnB,oCAAoC,EAAE,IAAI;KAC3C,CACF,CAAC;IACF,6BAA6B;IAC7B,mCAAmC;IACnC,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,IAAA,2BAAa,EAAC,UAAU,CAAC,CAAC,CAAC;IAEpE,OAAO,IAAI,CAAC;AACd,CAAC;AAzBD,oDAyBC","sourcesContent":["import { stringifyEnvs } from '@storybook/core-common';\n\nimport type { EnvsRaw } from './types';\nimport type { UserConfig } from 'vite';\n\n// Allowed env variables on the client\nconst allowedEnvVariables = [\n  'STORYBOOK',\n  // Vite `import.meta.env` default variables\n  // @see https://github.com/vitejs/vite/blob/6b8d94dca2a1a8b4952e3e3fcd0aed1aedb94215/packages/vite/types/importMeta.d.ts#L68-L75\n  'BASE_URL',\n  'MODE',\n  'DEV',\n  'PROD',\n  'SSR',\n];\n\n// Env variables starts with env prefix will be exposed to your client source code via `import.meta.env`\nexport const allowedEnvPrefix = ['VITE_', 'STORYBOOK_'];\n\n/**\n * Customized version of stringifyProcessEnvs from @storybook/core-common which\n * uses import.meta.env instead of process.env and checks for allowed variables.\n */\nexport function stringifyProcessEnvs(raw: EnvsRaw, envPrefix: UserConfig['envPrefix']) {\n  const updatedRaw: EnvsRaw = {};\n  const envs = Object.entries(raw).reduce(\n    (acc: EnvsRaw, [key, value]) => {\n      // Only add allowed values OR values from array OR string started with allowed prefixes\n      if (\n        allowedEnvVariables.includes(key) ||\n        (Array.isArray(envPrefix) && !!envPrefix.find((prefix) => key.startsWith(prefix))) ||\n        (typeof envPrefix === 'string' && key.startsWith(envPrefix))\n      ) {\n        acc[`import.meta.env.${key}`] = JSON.stringify(value);\n        updatedRaw[key] = value;\n      }\n      return acc;\n    },\n    {\n      // Default fallback\n      'process.env.XSTORYBOOK_EXAMPLE_APP': '\"\"',\n    }\n  );\n  // support destructuring like\n  // const { foo } = import.meta.env;\n  envs['import.meta.env'] = JSON.stringify(stringifyEnvs(updatedRaw));\n\n  return envs;\n}\n"]}