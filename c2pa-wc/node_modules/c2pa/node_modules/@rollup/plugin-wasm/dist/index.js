'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');
var crypto = require('crypto');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var HELPERS_ID = '\0wasmHelpers.js';
var getHelpersModule = function () { return "\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  var buf = null\n  var isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null\n\n  if (filepath && isNode) {\n    var fs = require(\"fs\")\n    var path = require(\"path\")\n\n    return new Promise((resolve, reject) => {\n      fs.readFile(path.resolve(__dirname, filepath), (error, buffer) => {\n        if (error != null) {\n          reject(error)\n        }\n\n        resolve(_instantiateOrCompile(buffer, imports, false))\n      });\n    });\n  } else if (filepath) {\n    return _instantiateOrCompile(fetch(filepath), imports, true)\n  }\n\n  if (isNode) {\n    buf = Buffer.from(src, 'base64')\n  } else {\n    var raw = globalThis.atob(src)\n    var rawLength = raw.length\n    buf = new Uint8Array(new ArrayBuffer(rawLength))\n    for(var i = 0; i < rawLength; i++) {\n       buf[i] = raw.charCodeAt(i)\n    }\n  }\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf)\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\nexport { _loadWasmModule };\n"; };

function wasm(options) {
    if (options === void 0) { options = {}; }
    var _a = options.sync, sync = _a === void 0 ? [] : _a, _b = options.maxFileSize, maxFileSize = _b === void 0 ? 14 * 1024 : _b, _c = options.publicPath, publicPath = _c === void 0 ? '' : _c;
    var syncFiles = sync.map(function (x) { return path.resolve(x); });
    var copies = Object.create(null);
    return {
        name: 'wasm',
        resolveId: function (id) {
            if (id === HELPERS_ID) {
                return id;
            }
            return null;
        },
        load: function (id) {
            if (id === HELPERS_ID) {
                return getHelpersModule();
            }
            if (!/\.wasm$/.test(id)) {
                return null;
            }
            return Promise.all([fs.promises.stat(id), fs.promises.readFile(id)]).then(function (_a) {
                var stats = _a[0], buffer = _a[1];
                if ((maxFileSize && stats.size > maxFileSize) || maxFileSize === 0) {
                    var hash = crypto.createHash('sha1')
                        .update(buffer)
                        .digest('hex')
                        .substr(0, 16);
                    var filename = hash + ".wasm";
                    var publicFilepath = "" + publicPath + filename;
                    // only copy if the file is not marked `sync`, `sync` files are always inlined
                    if (syncFiles.indexOf(id) === -1) {
                        copies[id] = {
                            filename: filename,
                            publicFilepath: publicFilepath,
                            buffer: buffer
                        };
                    }
                }
                return buffer.toString('binary');
            });
        },
        transform: function (code, id) {
            if (code && /\.wasm$/.test(id)) {
                var isSync = syncFiles.indexOf(id) !== -1;
                var publicFilepath = copies[id] ? "'" + copies[id].publicFilepath + "'" : null;
                var src = void 0;
                if (publicFilepath === null) {
                    src = Buffer.from(code, 'binary').toString('base64');
                    src = "'" + src + "'";
                }
                else {
                    if (isSync) {
                        this.error('non-inlined files can not be `sync`.');
                    }
                    src = null;
                }
                return {
                    map: {
                        mappings: ''
                    },
                    code: "import { _loadWasmModule } from " + JSON.stringify(HELPERS_ID) + ";\nexport default function(imports){return _loadWasmModule(" + +isSync + ", " + publicFilepath + ", " + src + ", imports)}"
                };
            }
            return null;
        },
        generateBundle: function write() {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, Promise.all(Object.keys(copies).map(function (name) { return __awaiter(_this, void 0, void 0, function () {
                                var copy;
                                return __generator(this, function (_a) {
                                    copy = copies[name];
                                    this.emitFile({
                                        type: 'asset',
                                        source: copy.buffer,
                                        name: 'Rollup WASM Asset',
                                        fileName: copy.filename
                                    });
                                    return [2 /*return*/];
                                });
                            }); }))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        }
    };
}

exports.default = wasm;
exports.wasm = wasm;
module.exports = Object.assign(exports.default, exports);
