"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWatchCommands = void 0;
const nanocolors_1 = require("nanocolors");
function getWatchCommands(coverage, testFiles, focusedTest) {
    if (focusedTest) {
        return [
            `${nanocolors_1.gray('Press')} F ${nanocolors_1.gray('to focus another test file.')}`,
            `${nanocolors_1.gray('Press')} D ${nanocolors_1.gray('to debug in the browser.')}`,
            coverage ? `${nanocolors_1.gray('Press')} C ${nanocolors_1.gray('to view coverage details.')}` : '',
            `${nanocolors_1.gray('Press')} Q ${nanocolors_1.gray('to exit watch mode.')}`,
            `${nanocolors_1.gray('Press')} Enter ${nanocolors_1.gray('to re-run this test file.')}`,
            `${nanocolors_1.gray('Press')} ESC ${nanocolors_1.gray('to exit focus mode')}`,
        ].filter(_ => !!_);
    }
    return [
        testFiles.length > 1 ? `${nanocolors_1.gray('Press')} F ${nanocolors_1.gray('to focus on a test file.')}` : '',
        `${nanocolors_1.gray('Press')} D ${nanocolors_1.gray('to debug in the browser.')}`,
        `${nanocolors_1.gray('Press')} M ${nanocolors_1.gray('to debug manually in a custom browser.')}`,
        coverage ? `${nanocolors_1.gray('Press')} C ${nanocolors_1.gray('to view coverage details.')}` : '',
        `${nanocolors_1.gray('Press')} Q ${nanocolors_1.gray('to quit watch mode.')}`,
        `${nanocolors_1.gray('Press')} Enter ${nanocolors_1.gray('to re-run all tests.')}`,
    ].filter(_ => !!_);
}
exports.getWatchCommands = getWatchCommands;
//# sourceMappingURL=getWatchCommands.js.map