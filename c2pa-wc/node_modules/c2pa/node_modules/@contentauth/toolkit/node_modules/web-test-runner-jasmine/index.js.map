{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AAEnD,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO;QACL,SAAS,EAAE;YACT,eAAe,CAAC,EAAE,iBAAiB,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;SACvE;QACD,cAAc,EAAE,CAAC,KAAU,EAAE,MAAuE,EAAE,EAAE;;YACtG,MAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,yDAAyD;gBAC/D,MAAM,EAAE;oBACN,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,EAAE;oBACV,GAAG,MAAA,MAAM,CAAC,aAAa,0CAAE,MAAM;iBAChC;aACF,CAAC;YACF,OAAO,UAAU,CAAA;;;cAGT,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,eAAe,KAAK,uBAAuB,CAAC;;kDAEjD,aAAa,CAAC,IAAI;;;;;qBAK/C,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4E3C,CAAC;QACJ,CAAC;KACF,CAAA;AACH,CAAC,CAAA","sourcesContent":["import { defaultReporter } from '@web/test-runner';\n\nexport const jasmineTestRunnerConfig = () => {\n  return {\n    reporters: [\n      defaultReporter({ reportTestResults: true, reportTestProgress: true })\n    ],\n    testRunnerHtml: (_path: any, config: { testFramework: { config?: { timeout?: number, styles?: [] }}}) => {\n      const testFramework = {\n        path: './node_modules/jasmine-core/lib/jasmine-core/jasmine.js',\n        config: {\n          timeout: 20000,\n          styles: [],\n          ...config.testFramework?.config\n        }\n      };\n      return /* html */`\n        <html>\n          <head>\n            ${testFramework.config.styles.map(style => `<link href=\"${style}\" rel=\"stylesheet\" />`)}\n            <script>window.process = { env: { NODE_ENV: \"development\" } }</script>\n            <script type=\"text/javascript\" src=\"${testFramework.path}\"></script>\n            <script type=\"module\">\n              import { getConfig, sessionStarted, sessionFinished, sessionFailed } from '@web/test-runner-core/browser/session.js';\n   \n              const testFramework = {\n                ...${JSON.stringify(testFramework)}\n              };\n  \n              const jasmine = jasmineRequire.core(window.jasmineRequire);\n              jasmine.DEFAULT_TIMEOUT_INTERVAL = testFramework.config.timeout;\n              const global = jasmine.getGlobal();\n              global.jasmine = jasmine;\n              const env = jasmine.getEnv();\n              Object.assign(window, jasmineRequire.interface(jasmine, env));\n              window.onload = function () {};\n  \n              const failedSpecs = [];\n              const allSpecs = [];\n              const failedImports = [];\n  \n              env.addReporter({\n                jasmineStarted: () => {},\n                suiteStarted: () => {},\n                specStarted: () => {},\n                suiteDone: () => {},\n                specDone: result => {\n                  [...result.passedExpectations, ...result.failedExpectations].forEach(e => {\n                    allSpecs.push({\n                      name: e.description,\n                      passed: e.passed,\n                    });\n                  });\n  \n                  if (result.status !== 'passed' || result.status !== 'incomplete') {\n                    result.failedExpectations.forEach(e => {\n                      failedSpecs.push({\n                        message: result.description + ': ' + e.message,\n                        name: e.description,\n                        stack: e.stack,\n                        expected: e.expected,\n                        actual: e.actual,\n                      });\n                    });\n                  }\n                },\n                jasmineDone: result => {\n                  sessionFinished({\n                    passed: result.overallStatus === 'passed',\n                    errors: [...failedSpecs, ...failedImports],\n                    testResults: {\n                      name: '',\n                      suites: [],\n                      tests: allSpecs,\n                    },\n                  });\n                },\n              });\n  \n              (async () => {\n                sessionStarted();\n                const { testFile, watch, debug, testFrameworkConfig } = await getConfig();\n                const config = { defaultTimeoutInterval: 60000, ...(testFrameworkConfig ?? {}) };\n  \n                jasmine.DEFAULT_TIMEOUT_INTERVAL = config.defaultTimeoutInterval;\n  \n                await import(new URL(testFile, document.baseURI).href).catch(error => {\n                  failedImports.push({ file: testFile, error: { message: error.message, stack: error.stack } });\n                });\n  \n                try {\n                  env.execute();\n                } catch (error) {\n                  console.log(error);\n                  sessionFailed(error);\n                  return;\n                }\n              })();\n            </script>\n          </head>\n          <body></body>\n        </html>\n      `;\n    }\n  }\n}"]}